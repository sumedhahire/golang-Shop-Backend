// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"inventory/ent/entgen/tblauthclient"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblAuthClient is the model entity for the TblAuthClient schema.
type TblAuthClient struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ClientSecret holds the value of the "Client_secret" field.
	ClientSecret string `json:"Client_secret,omitempty"`
	// GrantType holds the value of the "Grant_type" field.
	GrantType *string `json:"Grant_type,omitempty"`
	// CreatedAt holds the value of the "CreatedAt" field.
	CreatedAt time.Time `json:"CreatedAt,omitempty"`
	// UpdatedAt holds the value of the "UpdatedAt" field.
	UpdatedAt time.Time `json:"UpdatedAt,omitempty"`
	// DeletedAt holds the value of the "DeletedAt" field.
	DeletedAt *time.Time `json:"DeletedAt,omitempty"`
	// Domain holds the value of the "domain" field.
	Domain *string `json:"domain,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// UserAgent holds the value of the "UserAgent" field.
	UserAgent string `json:"UserAgent,omitempty"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI *string `json:"redirect_uri,omitempty"`
	// CreatedBy holds the value of the "CreatedBy" field.
	CreatedBy string `json:"CreatedBy,omitempty"`
	// UpdatedBy holds the value of the "UpdatedBy" field.
	UpdatedBy string `json:"UpdatedBy,omitempty"`
	// DeletedBy holds the value of the "DeletedBy" field.
	DeletedBy *string `json:"DeletedBy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblAuthClientQuery when eager-loading is set.
	Edges        TblAuthClientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblAuthClientEdges holds the relations/edges for other nodes in the graph.
type TblAuthClientEdges struct {
	// ClientToken holds the value of the ClientToken edge.
	ClientToken []*TblAuthToken `json:"ClientToken,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ClientTokenOrErr returns the ClientToken value or an error if the edge
// was not loaded in eager-loading.
func (e TblAuthClientEdges) ClientTokenOrErr() ([]*TblAuthToken, error) {
	if e.loadedTypes[0] {
		return e.ClientToken, nil
	}
	return nil, &NotLoadedError{edge: "ClientToken"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblAuthClient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tblauthclient.FieldPublic:
			values[i] = new(sql.NullBool)
		case tblauthclient.FieldID, tblauthclient.FieldClientSecret, tblauthclient.FieldGrantType, tblauthclient.FieldDomain, tblauthclient.FieldUserAgent, tblauthclient.FieldRedirectURI, tblauthclient.FieldCreatedBy, tblauthclient.FieldUpdatedBy, tblauthclient.FieldDeletedBy:
			values[i] = new(sql.NullString)
		case tblauthclient.FieldCreatedAt, tblauthclient.FieldUpdatedAt, tblauthclient.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblAuthClient fields.
func (tac *TblAuthClient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tblauthclient.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tac.ID = value.String
			}
		case tblauthclient.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Client_secret", values[i])
			} else if value.Valid {
				tac.ClientSecret = value.String
			}
		case tblauthclient.FieldGrantType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Grant_type", values[i])
			} else if value.Valid {
				tac.GrantType = new(string)
				*tac.GrantType = value.String
			}
		case tblauthclient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedAt", values[i])
			} else if value.Valid {
				tac.CreatedAt = value.Time
			}
		case tblauthclient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedAt", values[i])
			} else if value.Valid {
				tac.UpdatedAt = value.Time
			}
		case tblauthclient.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedAt", values[i])
			} else if value.Valid {
				tac.DeletedAt = new(time.Time)
				*tac.DeletedAt = value.Time
			}
		case tblauthclient.FieldDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain", values[i])
			} else if value.Valid {
				tac.Domain = new(string)
				*tac.Domain = value.String
			}
		case tblauthclient.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				tac.Public = value.Bool
			}
		case tblauthclient.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserAgent", values[i])
			} else if value.Valid {
				tac.UserAgent = value.String
			}
		case tblauthclient.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				tac.RedirectURI = new(string)
				*tac.RedirectURI = value.String
			}
		case tblauthclient.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedBy", values[i])
			} else if value.Valid {
				tac.CreatedBy = value.String
			}
		case tblauthclient.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UpdatedBy", values[i])
			} else if value.Valid {
				tac.UpdatedBy = value.String
			}
		case tblauthclient.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field DeletedBy", values[i])
			} else if value.Valid {
				tac.DeletedBy = new(string)
				*tac.DeletedBy = value.String
			}
		default:
			tac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblAuthClient.
// This includes values selected through modifiers, order, etc.
func (tac *TblAuthClient) Value(name string) (ent.Value, error) {
	return tac.selectValues.Get(name)
}

// QueryClientToken queries the "ClientToken" edge of the TblAuthClient entity.
func (tac *TblAuthClient) QueryClientToken() *TblAuthTokenQuery {
	return NewTblAuthClientClient(tac.config).QueryClientToken(tac)
}

// Update returns a builder for updating this TblAuthClient.
// Note that you need to call TblAuthClient.Unwrap() before calling this method if this TblAuthClient
// was returned from a transaction, and the transaction was committed or rolled back.
func (tac *TblAuthClient) Update() *TblAuthClientUpdateOne {
	return NewTblAuthClientClient(tac.config).UpdateOne(tac)
}

// Unwrap unwraps the TblAuthClient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tac *TblAuthClient) Unwrap() *TblAuthClient {
	_tx, ok := tac.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblAuthClient is not a transactional entity")
	}
	tac.config.driver = _tx.drv
	return tac
}

// String implements the fmt.Stringer.
func (tac *TblAuthClient) String() string {
	var builder strings.Builder
	builder.WriteString("TblAuthClient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tac.ID))
	builder.WriteString("Client_secret=")
	builder.WriteString(tac.ClientSecret)
	builder.WriteString(", ")
	if v := tac.GrantType; v != nil {
		builder.WriteString("Grant_type=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("CreatedAt=")
	builder.WriteString(tac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("UpdatedAt=")
	builder.WriteString(tac.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tac.DeletedAt; v != nil {
		builder.WriteString("DeletedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := tac.Domain; v != nil {
		builder.WriteString("domain=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", tac.Public))
	builder.WriteString(", ")
	builder.WriteString("UserAgent=")
	builder.WriteString(tac.UserAgent)
	builder.WriteString(", ")
	if v := tac.RedirectURI; v != nil {
		builder.WriteString("redirect_uri=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("CreatedBy=")
	builder.WriteString(tac.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("UpdatedBy=")
	builder.WriteString(tac.UpdatedBy)
	builder.WriteString(", ")
	if v := tac.DeletedBy; v != nil {
		builder.WriteString("DeletedBy=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// TblAuthClients is a parsable slice of TblAuthClient.
type TblAuthClients []*TblAuthClient
