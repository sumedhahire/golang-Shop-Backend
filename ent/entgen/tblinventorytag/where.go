// Code generated by ent, DO NOT EDIT.

package tblinventorytag

import (
	"inventory/ent/entgen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldContainsFold(FieldID, id))
}

// InventoryId applies equality check predicate on the "InventoryId" field. It's identical to InventoryIdEQ.
func InventoryId(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldInventoryId, v))
}

// TagId applies equality check predicate on the "TagId" field. It's identical to TagIdEQ.
func TagId(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldTagId, v))
}

// CreatedAt applies equality check predicate on the "Created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "Updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "Deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldDeletedAt, v))
}

// InventoryIdEQ applies the EQ predicate on the "InventoryId" field.
func InventoryIdEQ(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldInventoryId, v))
}

// InventoryIdNEQ applies the NEQ predicate on the "InventoryId" field.
func InventoryIdNEQ(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNEQ(FieldInventoryId, v))
}

// InventoryIdIn applies the In predicate on the "InventoryId" field.
func InventoryIdIn(vs ...string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIn(FieldInventoryId, vs...))
}

// InventoryIdNotIn applies the NotIn predicate on the "InventoryId" field.
func InventoryIdNotIn(vs ...string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotIn(FieldInventoryId, vs...))
}

// InventoryIdGT applies the GT predicate on the "InventoryId" field.
func InventoryIdGT(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGT(FieldInventoryId, v))
}

// InventoryIdGTE applies the GTE predicate on the "InventoryId" field.
func InventoryIdGTE(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGTE(FieldInventoryId, v))
}

// InventoryIdLT applies the LT predicate on the "InventoryId" field.
func InventoryIdLT(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLT(FieldInventoryId, v))
}

// InventoryIdLTE applies the LTE predicate on the "InventoryId" field.
func InventoryIdLTE(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLTE(FieldInventoryId, v))
}

// InventoryIdContains applies the Contains predicate on the "InventoryId" field.
func InventoryIdContains(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldContains(FieldInventoryId, v))
}

// InventoryIdHasPrefix applies the HasPrefix predicate on the "InventoryId" field.
func InventoryIdHasPrefix(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldHasPrefix(FieldInventoryId, v))
}

// InventoryIdHasSuffix applies the HasSuffix predicate on the "InventoryId" field.
func InventoryIdHasSuffix(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldHasSuffix(FieldInventoryId, v))
}

// InventoryIdIsNil applies the IsNil predicate on the "InventoryId" field.
func InventoryIdIsNil() predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIsNull(FieldInventoryId))
}

// InventoryIdNotNil applies the NotNil predicate on the "InventoryId" field.
func InventoryIdNotNil() predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotNull(FieldInventoryId))
}

// InventoryIdEqualFold applies the EqualFold predicate on the "InventoryId" field.
func InventoryIdEqualFold(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEqualFold(FieldInventoryId, v))
}

// InventoryIdContainsFold applies the ContainsFold predicate on the "InventoryId" field.
func InventoryIdContainsFold(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldContainsFold(FieldInventoryId, v))
}

// TagIdEQ applies the EQ predicate on the "TagId" field.
func TagIdEQ(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldTagId, v))
}

// TagIdNEQ applies the NEQ predicate on the "TagId" field.
func TagIdNEQ(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNEQ(FieldTagId, v))
}

// TagIdIn applies the In predicate on the "TagId" field.
func TagIdIn(vs ...string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIn(FieldTagId, vs...))
}

// TagIdNotIn applies the NotIn predicate on the "TagId" field.
func TagIdNotIn(vs ...string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotIn(FieldTagId, vs...))
}

// TagIdGT applies the GT predicate on the "TagId" field.
func TagIdGT(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGT(FieldTagId, v))
}

// TagIdGTE applies the GTE predicate on the "TagId" field.
func TagIdGTE(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGTE(FieldTagId, v))
}

// TagIdLT applies the LT predicate on the "TagId" field.
func TagIdLT(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLT(FieldTagId, v))
}

// TagIdLTE applies the LTE predicate on the "TagId" field.
func TagIdLTE(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLTE(FieldTagId, v))
}

// TagIdContains applies the Contains predicate on the "TagId" field.
func TagIdContains(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldContains(FieldTagId, v))
}

// TagIdHasPrefix applies the HasPrefix predicate on the "TagId" field.
func TagIdHasPrefix(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldHasPrefix(FieldTagId, v))
}

// TagIdHasSuffix applies the HasSuffix predicate on the "TagId" field.
func TagIdHasSuffix(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldHasSuffix(FieldTagId, v))
}

// TagIdIsNil applies the IsNil predicate on the "TagId" field.
func TagIdIsNil() predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIsNull(FieldTagId))
}

// TagIdNotNil applies the NotNil predicate on the "TagId" field.
func TagIdNotNil() predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotNull(FieldTagId))
}

// TagIdEqualFold applies the EqualFold predicate on the "TagId" field.
func TagIdEqualFold(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEqualFold(FieldTagId, v))
}

// TagIdContainsFold applies the ContainsFold predicate on the "TagId" field.
func TagIdContainsFold(v string) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldContainsFold(FieldTagId, v))
}

// CreatedAtEQ applies the EQ predicate on the "Created_at" field.
func CreatedAtEQ(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "Created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "Created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "Created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "Created_at" field.
func CreatedAtGT(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "Created_at" field.
func CreatedAtGTE(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "Created_at" field.
func CreatedAtLT(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "Created_at" field.
func CreatedAtLTE(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "Updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "Updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "Updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "Updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "Updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "Updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "Updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "Updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "Deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "Deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "Deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "Deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "Deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "Deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "Deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "Deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.FieldLTE(FieldDeletedAt, v))
}

// HasTagID applies the HasEdge predicate on the "tag_Id" edge.
func HasTagID() predicate.TblInventoryTag {
	return predicate.TblInventoryTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TagIDTable, TagIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagIDWith applies the HasEdge predicate on the "tag_Id" edge with a given conditions (other predicates).
func HasTagIDWith(preds ...predicate.TblTag) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(func(s *sql.Selector) {
		step := newTagIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInventoryID applies the HasEdge predicate on the "inventory_Id" edge.
func HasInventoryID() predicate.TblInventoryTag {
	return predicate.TblInventoryTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InventoryIDTable, InventoryIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryIDWith applies the HasEdge predicate on the "inventory_Id" edge with a given conditions (other predicates).
func HasInventoryIDWith(preds ...predicate.TblInventory) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(func(s *sql.Selector) {
		step := newInventoryIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TblInventoryTag) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TblInventoryTag) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TblInventoryTag) predicate.TblInventoryTag {
	return predicate.TblInventoryTag(sql.NotPredicates(p))
}
