// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"database/sql/driver"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthclient"
	"inventory/ent/entgen/tblauthtoken"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthClientQuery is the builder for querying TblAuthClient entities.
type TblAuthClientQuery struct {
	config
	ctx             *QueryContext
	order           []tblauthclient.OrderOption
	inters          []Interceptor
	predicates      []predicate.TblAuthClient
	withClientToken *TblAuthTokenQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TblAuthClientQuery builder.
func (tacq *TblAuthClientQuery) Where(ps ...predicate.TblAuthClient) *TblAuthClientQuery {
	tacq.predicates = append(tacq.predicates, ps...)
	return tacq
}

// Limit the number of records to be returned by this query.
func (tacq *TblAuthClientQuery) Limit(limit int) *TblAuthClientQuery {
	tacq.ctx.Limit = &limit
	return tacq
}

// Offset to start from.
func (tacq *TblAuthClientQuery) Offset(offset int) *TblAuthClientQuery {
	tacq.ctx.Offset = &offset
	return tacq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tacq *TblAuthClientQuery) Unique(unique bool) *TblAuthClientQuery {
	tacq.ctx.Unique = &unique
	return tacq
}

// Order specifies how the records should be ordered.
func (tacq *TblAuthClientQuery) Order(o ...tblauthclient.OrderOption) *TblAuthClientQuery {
	tacq.order = append(tacq.order, o...)
	return tacq
}

// QueryClientToken chains the current query on the "ClientToken" edge.
func (tacq *TblAuthClientQuery) QueryClientToken() *TblAuthTokenQuery {
	query := (&TblAuthTokenClient{config: tacq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tacq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tacq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tblauthclient.Table, tblauthclient.FieldID, selector),
			sqlgraph.To(tblauthtoken.Table, tblauthtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tblauthclient.ClientTokenTable, tblauthclient.ClientTokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(tacq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TblAuthClient entity from the query.
// Returns a *NotFoundError when no TblAuthClient was found.
func (tacq *TblAuthClientQuery) First(ctx context.Context) (*TblAuthClient, error) {
	nodes, err := tacq.Limit(1).All(setContextOp(ctx, tacq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tblauthclient.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tacq *TblAuthClientQuery) FirstX(ctx context.Context) *TblAuthClient {
	node, err := tacq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TblAuthClient ID from the query.
// Returns a *NotFoundError when no TblAuthClient ID was found.
func (tacq *TblAuthClientQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tacq.Limit(1).IDs(setContextOp(ctx, tacq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tblauthclient.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tacq *TblAuthClientQuery) FirstIDX(ctx context.Context) string {
	id, err := tacq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TblAuthClient entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TblAuthClient entity is found.
// Returns a *NotFoundError when no TblAuthClient entities are found.
func (tacq *TblAuthClientQuery) Only(ctx context.Context) (*TblAuthClient, error) {
	nodes, err := tacq.Limit(2).All(setContextOp(ctx, tacq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tblauthclient.Label}
	default:
		return nil, &NotSingularError{tblauthclient.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tacq *TblAuthClientQuery) OnlyX(ctx context.Context) *TblAuthClient {
	node, err := tacq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TblAuthClient ID in the query.
// Returns a *NotSingularError when more than one TblAuthClient ID is found.
// Returns a *NotFoundError when no entities are found.
func (tacq *TblAuthClientQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tacq.Limit(2).IDs(setContextOp(ctx, tacq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tblauthclient.Label}
	default:
		err = &NotSingularError{tblauthclient.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tacq *TblAuthClientQuery) OnlyIDX(ctx context.Context) string {
	id, err := tacq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TblAuthClients.
func (tacq *TblAuthClientQuery) All(ctx context.Context) ([]*TblAuthClient, error) {
	ctx = setContextOp(ctx, tacq.ctx, ent.OpQueryAll)
	if err := tacq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TblAuthClient, *TblAuthClientQuery]()
	return withInterceptors[[]*TblAuthClient](ctx, tacq, qr, tacq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tacq *TblAuthClientQuery) AllX(ctx context.Context) []*TblAuthClient {
	nodes, err := tacq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TblAuthClient IDs.
func (tacq *TblAuthClientQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tacq.ctx.Unique == nil && tacq.path != nil {
		tacq.Unique(true)
	}
	ctx = setContextOp(ctx, tacq.ctx, ent.OpQueryIDs)
	if err = tacq.Select(tblauthclient.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tacq *TblAuthClientQuery) IDsX(ctx context.Context) []string {
	ids, err := tacq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tacq *TblAuthClientQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tacq.ctx, ent.OpQueryCount)
	if err := tacq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tacq, querierCount[*TblAuthClientQuery](), tacq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tacq *TblAuthClientQuery) CountX(ctx context.Context) int {
	count, err := tacq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tacq *TblAuthClientQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tacq.ctx, ent.OpQueryExist)
	switch _, err := tacq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entgen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tacq *TblAuthClientQuery) ExistX(ctx context.Context) bool {
	exist, err := tacq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TblAuthClientQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tacq *TblAuthClientQuery) Clone() *TblAuthClientQuery {
	if tacq == nil {
		return nil
	}
	return &TblAuthClientQuery{
		config:          tacq.config,
		ctx:             tacq.ctx.Clone(),
		order:           append([]tblauthclient.OrderOption{}, tacq.order...),
		inters:          append([]Interceptor{}, tacq.inters...),
		predicates:      append([]predicate.TblAuthClient{}, tacq.predicates...),
		withClientToken: tacq.withClientToken.Clone(),
		// clone intermediate query.
		sql:  tacq.sql.Clone(),
		path: tacq.path,
	}
}

// WithClientToken tells the query-builder to eager-load the nodes that are connected to
// the "ClientToken" edge. The optional arguments are used to configure the query builder of the edge.
func (tacq *TblAuthClientQuery) WithClientToken(opts ...func(*TblAuthTokenQuery)) *TblAuthClientQuery {
	query := (&TblAuthTokenClient{config: tacq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tacq.withClientToken = query
	return tacq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ClientSecret string `json:"Client_secret,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TblAuthClient.Query().
//		GroupBy(tblauthclient.FieldClientSecret).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
func (tacq *TblAuthClientQuery) GroupBy(field string, fields ...string) *TblAuthClientGroupBy {
	tacq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TblAuthClientGroupBy{build: tacq}
	grbuild.flds = &tacq.ctx.Fields
	grbuild.label = tblauthclient.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ClientSecret string `json:"Client_secret,omitempty"`
//	}
//
//	client.TblAuthClient.Query().
//		Select(tblauthclient.FieldClientSecret).
//		Scan(ctx, &v)
func (tacq *TblAuthClientQuery) Select(fields ...string) *TblAuthClientSelect {
	tacq.ctx.Fields = append(tacq.ctx.Fields, fields...)
	sbuild := &TblAuthClientSelect{TblAuthClientQuery: tacq}
	sbuild.label = tblauthclient.Label
	sbuild.flds, sbuild.scan = &tacq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TblAuthClientSelect configured with the given aggregations.
func (tacq *TblAuthClientQuery) Aggregate(fns ...AggregateFunc) *TblAuthClientSelect {
	return tacq.Select().Aggregate(fns...)
}

func (tacq *TblAuthClientQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tacq.inters {
		if inter == nil {
			return fmt.Errorf("entgen: uninitialized interceptor (forgotten import entgen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tacq); err != nil {
				return err
			}
		}
	}
	for _, f := range tacq.ctx.Fields {
		if !tblauthclient.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if tacq.path != nil {
		prev, err := tacq.path(ctx)
		if err != nil {
			return err
		}
		tacq.sql = prev
	}
	return nil
}

func (tacq *TblAuthClientQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TblAuthClient, error) {
	var (
		nodes       = []*TblAuthClient{}
		_spec       = tacq.querySpec()
		loadedTypes = [1]bool{
			tacq.withClientToken != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TblAuthClient).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TblAuthClient{config: tacq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tacq.modifiers) > 0 {
		_spec.Modifiers = tacq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tacq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tacq.withClientToken; query != nil {
		if err := tacq.loadClientToken(ctx, query, nodes,
			func(n *TblAuthClient) { n.Edges.ClientToken = []*TblAuthToken{} },
			func(n *TblAuthClient, e *TblAuthToken) { n.Edges.ClientToken = append(n.Edges.ClientToken, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tacq *TblAuthClientQuery) loadClientToken(ctx context.Context, query *TblAuthTokenQuery, nodes []*TblAuthClient, init func(*TblAuthClient), assign func(*TblAuthClient, *TblAuthToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblAuthClient)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tblauthtoken.FieldClientid)
	}
	query.Where(predicate.TblAuthToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tblauthclient.ClientTokenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.Clientid
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "clientid" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tacq *TblAuthClientQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tacq.querySpec()
	if len(tacq.modifiers) > 0 {
		_spec.Modifiers = tacq.modifiers
	}
	_spec.Node.Columns = tacq.ctx.Fields
	if len(tacq.ctx.Fields) > 0 {
		_spec.Unique = tacq.ctx.Unique != nil && *tacq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tacq.driver, _spec)
}

func (tacq *TblAuthClientQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tblauthclient.Table, tblauthclient.Columns, sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString))
	_spec.From = tacq.sql
	if unique := tacq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tacq.path != nil {
		_spec.Unique = true
	}
	if fields := tacq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblauthclient.FieldID)
		for i := range fields {
			if fields[i] != tblauthclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tacq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tacq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tacq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tacq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tacq *TblAuthClientQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tacq.driver.Dialect())
	t1 := builder.Table(tblauthclient.Table)
	columns := tacq.ctx.Fields
	if len(columns) == 0 {
		columns = tblauthclient.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tacq.sql != nil {
		selector = tacq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tacq.ctx.Unique != nil && *tacq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tacq.modifiers {
		m(selector)
	}
	for _, p := range tacq.predicates {
		p(selector)
	}
	for _, p := range tacq.order {
		p(selector)
	}
	if offset := tacq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tacq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (tacq *TblAuthClientQuery) ForUpdate(opts ...sql.LockOption) *TblAuthClientQuery {
	if tacq.driver.Dialect() == dialect.Postgres {
		tacq.Unique(false)
	}
	tacq.modifiers = append(tacq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return tacq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (tacq *TblAuthClientQuery) ForShare(opts ...sql.LockOption) *TblAuthClientQuery {
	if tacq.driver.Dialect() == dialect.Postgres {
		tacq.Unique(false)
	}
	tacq.modifiers = append(tacq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return tacq
}

// TblAuthClientGroupBy is the group-by builder for TblAuthClient entities.
type TblAuthClientGroupBy struct {
	selector
	build *TblAuthClientQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tacgb *TblAuthClientGroupBy) Aggregate(fns ...AggregateFunc) *TblAuthClientGroupBy {
	tacgb.fns = append(tacgb.fns, fns...)
	return tacgb
}

// Scan applies the selector query and scans the result into the given value.
func (tacgb *TblAuthClientGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tacgb.build.ctx, ent.OpQueryGroupBy)
	if err := tacgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblAuthClientQuery, *TblAuthClientGroupBy](ctx, tacgb.build, tacgb, tacgb.build.inters, v)
}

func (tacgb *TblAuthClientGroupBy) sqlScan(ctx context.Context, root *TblAuthClientQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tacgb.fns))
	for _, fn := range tacgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tacgb.flds)+len(tacgb.fns))
		for _, f := range *tacgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tacgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tacgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TblAuthClientSelect is the builder for selecting fields of TblAuthClient entities.
type TblAuthClientSelect struct {
	*TblAuthClientQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tacs *TblAuthClientSelect) Aggregate(fns ...AggregateFunc) *TblAuthClientSelect {
	tacs.fns = append(tacs.fns, fns...)
	return tacs
}

// Scan applies the selector query and scans the result into the given value.
func (tacs *TblAuthClientSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tacs.ctx, ent.OpQuerySelect)
	if err := tacs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblAuthClientQuery, *TblAuthClientSelect](ctx, tacs.TblAuthClientQuery, tacs, tacs.inters, v)
}

func (tacs *TblAuthClientSelect) sqlScan(ctx context.Context, root *TblAuthClientQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tacs.fns))
	for _, fn := range tacs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tacs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tacs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
