// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblinventorytag"
	"inventory/ent/entgen/tblpayment"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblInventoryCreate is the builder for creating a TblInventory entity.
type TblInventoryCreate struct {
	config
	mutation *TblInventoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "Name" field.
func (tic *TblInventoryCreate) SetName(s string) *TblInventoryCreate {
	tic.mutation.SetName(s)
	return tic
}

// SetDescription sets the "Description" field.
func (tic *TblInventoryCreate) SetDescription(s string) *TblInventoryCreate {
	tic.mutation.SetDescription(s)
	return tic
}

// SetImageLink sets the "ImageLink" field.
func (tic *TblInventoryCreate) SetImageLink(s string) *TblInventoryCreate {
	tic.mutation.SetImageLink(s)
	return tic
}

// SetPrice sets the "Price" field.
func (tic *TblInventoryCreate) SetPrice(f float32) *TblInventoryCreate {
	tic.mutation.SetPrice(f)
	return tic
}

// SetIsActive sets the "Is_Active" field.
func (tic *TblInventoryCreate) SetIsActive(b bool) *TblInventoryCreate {
	tic.mutation.SetIsActive(b)
	return tic
}

// SetNillableIsActive sets the "Is_Active" field if the given value is not nil.
func (tic *TblInventoryCreate) SetNillableIsActive(b *bool) *TblInventoryCreate {
	if b != nil {
		tic.SetIsActive(*b)
	}
	return tic
}

// SetCreatedAt sets the "Created_at" field.
func (tic *TblInventoryCreate) SetCreatedAt(t time.Time) *TblInventoryCreate {
	tic.mutation.SetCreatedAt(t)
	return tic
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tic *TblInventoryCreate) SetNillableCreatedAt(t *time.Time) *TblInventoryCreate {
	if t != nil {
		tic.SetCreatedAt(*t)
	}
	return tic
}

// SetUpdatedAt sets the "Updated_at" field.
func (tic *TblInventoryCreate) SetUpdatedAt(t time.Time) *TblInventoryCreate {
	tic.mutation.SetUpdatedAt(t)
	return tic
}

// SetDeletedAt sets the "Deleted_at" field.
func (tic *TblInventoryCreate) SetDeletedAt(t time.Time) *TblInventoryCreate {
	tic.mutation.SetDeletedAt(t)
	return tic
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tic *TblInventoryCreate) SetNillableDeletedAt(t *time.Time) *TblInventoryCreate {
	if t != nil {
		tic.SetDeletedAt(*t)
	}
	return tic
}

// SetID sets the "id" field.
func (tic *TblInventoryCreate) SetID(s string) *TblInventoryCreate {
	tic.mutation.SetID(s)
	return tic
}

// AddInventoryTagIDs adds the "inventoryTag" edge to the TblInventoryTag entity by IDs.
func (tic *TblInventoryCreate) AddInventoryTagIDs(ids ...string) *TblInventoryCreate {
	tic.mutation.AddInventoryTagIDs(ids...)
	return tic
}

// AddInventoryTag adds the "inventoryTag" edges to the TblInventoryTag entity.
func (tic *TblInventoryCreate) AddInventoryTag(t ...*TblInventoryTag) *TblInventoryCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tic.AddInventoryTagIDs(ids...)
}

// AddInventoryCartIDs adds the "InventoryCart" edge to the TblCart entity by IDs.
func (tic *TblInventoryCreate) AddInventoryCartIDs(ids ...string) *TblInventoryCreate {
	tic.mutation.AddInventoryCartIDs(ids...)
	return tic
}

// AddInventoryCart adds the "InventoryCart" edges to the TblCart entity.
func (tic *TblInventoryCreate) AddInventoryCart(t ...*TblCart) *TblInventoryCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tic.AddInventoryCartIDs(ids...)
}

// AddInventoryPaymentIDs adds the "InventoryPayment" edge to the TblPayment entity by IDs.
func (tic *TblInventoryCreate) AddInventoryPaymentIDs(ids ...string) *TblInventoryCreate {
	tic.mutation.AddInventoryPaymentIDs(ids...)
	return tic
}

// AddInventoryPayment adds the "InventoryPayment" edges to the TblPayment entity.
func (tic *TblInventoryCreate) AddInventoryPayment(t ...*TblPayment) *TblInventoryCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tic.AddInventoryPaymentIDs(ids...)
}

// Mutation returns the TblInventoryMutation object of the builder.
func (tic *TblInventoryCreate) Mutation() *TblInventoryMutation {
	return tic.mutation
}

// Save creates the TblInventory in the database.
func (tic *TblInventoryCreate) Save(ctx context.Context) (*TblInventory, error) {
	tic.defaults()
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TblInventoryCreate) SaveX(ctx context.Context) *TblInventory {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TblInventoryCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TblInventoryCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tic *TblInventoryCreate) defaults() {
	if _, ok := tic.mutation.IsActive(); !ok {
		v := tblinventory.DefaultIsActive
		tic.mutation.SetIsActive(v)
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		v := tblinventory.DefaultCreatedAt()
		tic.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TblInventoryCreate) check() error {
	if _, ok := tic.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`entgen: missing required field "TblInventory.Name"`)}
	}
	if v, ok := tic.mutation.Name(); ok {
		if err := tblinventory.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblInventory.Name": %w`, err)}
		}
	}
	if _, ok := tic.mutation.Description(); !ok {
		return &ValidationError{Name: "Description", err: errors.New(`entgen: missing required field "TblInventory.Description"`)}
	}
	if v, ok := tic.mutation.Description(); ok {
		if err := tblinventory.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`entgen: validator failed for field "TblInventory.Description": %w`, err)}
		}
	}
	if _, ok := tic.mutation.ImageLink(); !ok {
		return &ValidationError{Name: "ImageLink", err: errors.New(`entgen: missing required field "TblInventory.ImageLink"`)}
	}
	if _, ok := tic.mutation.Price(); !ok {
		return &ValidationError{Name: "Price", err: errors.New(`entgen: missing required field "TblInventory.Price"`)}
	}
	if _, ok := tic.mutation.IsActive(); !ok {
		return &ValidationError{Name: "Is_Active", err: errors.New(`entgen: missing required field "TblInventory.Is_Active"`)}
	}
	if _, ok := tic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "Created_at", err: errors.New(`entgen: missing required field "TblInventory.Created_at"`)}
	}
	if _, ok := tic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "Updated_at", err: errors.New(`entgen: missing required field "TblInventory.Updated_at"`)}
	}
	return nil
}

func (tic *TblInventoryCreate) sqlSave(ctx context.Context) (*TblInventory, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblInventory.ID type: %T", _spec.ID.Value)
		}
	}
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *TblInventoryCreate) createSpec() (*TblInventory, *sqlgraph.CreateSpec) {
	var (
		_node = &TblInventory{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(tblinventory.Table, sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString))
	)
	_spec.OnConflict = tic.conflict
	if id, ok := tic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tic.mutation.Name(); ok {
		_spec.SetField(tblinventory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tic.mutation.Description(); ok {
		_spec.SetField(tblinventory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tic.mutation.ImageLink(); ok {
		_spec.SetField(tblinventory.FieldImageLink, field.TypeString, value)
		_node.ImageLink = value
	}
	if value, ok := tic.mutation.Price(); ok {
		_spec.SetField(tblinventory.FieldPrice, field.TypeFloat32, value)
		_node.Price = value
	}
	if value, ok := tic.mutation.IsActive(); ok {
		_spec.SetField(tblinventory.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tic.mutation.CreatedAt(); ok {
		_spec.SetField(tblinventory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tic.mutation.UpdatedAt(); ok {
		_spec.SetField(tblinventory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tic.mutation.DeletedAt(); ok {
		_spec.SetField(tblinventory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := tic.mutation.InventoryTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryTagTable,
			Columns: []string{tblinventory.InventoryTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tic.mutation.InventoryCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryCartTable,
			Columns: []string{tblinventory.InventoryCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tic.mutation.InventoryPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryPaymentTable,
			Columns: []string{tblinventory.InventoryPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblInventory.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblInventoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tic *TblInventoryCreate) OnConflict(opts ...sql.ConflictOption) *TblInventoryUpsertOne {
	tic.conflict = opts
	return &TblInventoryUpsertOne{
		create: tic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblInventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tic *TblInventoryCreate) OnConflictColumns(columns ...string) *TblInventoryUpsertOne {
	tic.conflict = append(tic.conflict, sql.ConflictColumns(columns...))
	return &TblInventoryUpsertOne{
		create: tic,
	}
}

type (
	// TblInventoryUpsertOne is the builder for "upsert"-ing
	//  one TblInventory node.
	TblInventoryUpsertOne struct {
		create *TblInventoryCreate
	}

	// TblInventoryUpsert is the "OnConflict" setter.
	TblInventoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "Name" field.
func (u *TblInventoryUpsert) SetName(v string) *TblInventoryUpsert {
	u.Set(tblinventory.FieldName, v)
	return u
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdateName() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldName)
	return u
}

// SetDescription sets the "Description" field.
func (u *TblInventoryUpsert) SetDescription(v string) *TblInventoryUpsert {
	u.Set(tblinventory.FieldDescription, v)
	return u
}

// UpdateDescription sets the "Description" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdateDescription() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldDescription)
	return u
}

// SetImageLink sets the "ImageLink" field.
func (u *TblInventoryUpsert) SetImageLink(v string) *TblInventoryUpsert {
	u.Set(tblinventory.FieldImageLink, v)
	return u
}

// UpdateImageLink sets the "ImageLink" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdateImageLink() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldImageLink)
	return u
}

// SetPrice sets the "Price" field.
func (u *TblInventoryUpsert) SetPrice(v float32) *TblInventoryUpsert {
	u.Set(tblinventory.FieldPrice, v)
	return u
}

// UpdatePrice sets the "Price" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdatePrice() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldPrice)
	return u
}

// AddPrice adds v to the "Price" field.
func (u *TblInventoryUpsert) AddPrice(v float32) *TblInventoryUpsert {
	u.Add(tblinventory.FieldPrice, v)
	return u
}

// SetIsActive sets the "Is_Active" field.
func (u *TblInventoryUpsert) SetIsActive(v bool) *TblInventoryUpsert {
	u.Set(tblinventory.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "Is_Active" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdateIsActive() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldIsActive)
	return u
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblInventoryUpsert) SetCreatedAt(v time.Time) *TblInventoryUpsert {
	u.Set(tblinventory.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdateCreatedAt() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblInventoryUpsert) SetUpdatedAt(v time.Time) *TblInventoryUpsert {
	u.Set(tblinventory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdateUpdatedAt() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblInventoryUpsert) SetDeletedAt(v time.Time) *TblInventoryUpsert {
	u.Set(tblinventory.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblInventoryUpsert) UpdateDeletedAt() *TblInventoryUpsert {
	u.SetExcluded(tblinventory.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblInventoryUpsert) ClearDeletedAt() *TblInventoryUpsert {
	u.SetNull(tblinventory.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblInventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblinventory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblInventoryUpsertOne) UpdateNewValues() *TblInventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tblinventory.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblInventory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblInventoryUpsertOne) Ignore() *TblInventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblInventoryUpsertOne) DoNothing() *TblInventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblInventoryCreate.OnConflict
// documentation for more info.
func (u *TblInventoryUpsertOne) Update(set func(*TblInventoryUpsert)) *TblInventoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblInventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *TblInventoryUpsertOne) SetName(v string) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdateName() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "Description" field.
func (u *TblInventoryUpsertOne) SetDescription(v string) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "Description" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdateDescription() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateDescription()
	})
}

// SetImageLink sets the "ImageLink" field.
func (u *TblInventoryUpsertOne) SetImageLink(v string) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetImageLink(v)
	})
}

// UpdateImageLink sets the "ImageLink" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdateImageLink() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateImageLink()
	})
}

// SetPrice sets the "Price" field.
func (u *TblInventoryUpsertOne) SetPrice(v float32) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "Price" field.
func (u *TblInventoryUpsertOne) AddPrice(v float32) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "Price" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdatePrice() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdatePrice()
	})
}

// SetIsActive sets the "Is_Active" field.
func (u *TblInventoryUpsertOne) SetIsActive(v bool) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "Is_Active" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdateIsActive() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateIsActive()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblInventoryUpsertOne) SetCreatedAt(v time.Time) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdateCreatedAt() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblInventoryUpsertOne) SetUpdatedAt(v time.Time) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdateUpdatedAt() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblInventoryUpsertOne) SetDeletedAt(v time.Time) *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblInventoryUpsertOne) UpdateDeletedAt() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblInventoryUpsertOne) ClearDeletedAt() *TblInventoryUpsertOne {
	return u.Update(func(s *TblInventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblInventoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblInventoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblInventoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblInventoryUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblInventoryUpsertOne.ID is not supported by MySQL driver. Use TblInventoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblInventoryUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblInventoryCreateBulk is the builder for creating many TblInventory entities in bulk.
type TblInventoryCreateBulk struct {
	config
	err      error
	builders []*TblInventoryCreate
	conflict []sql.ConflictOption
}

// Save creates the TblInventory entities in the database.
func (ticb *TblInventoryCreateBulk) Save(ctx context.Context) ([]*TblInventory, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TblInventory, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblInventoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ticb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TblInventoryCreateBulk) SaveX(ctx context.Context) []*TblInventory {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TblInventoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TblInventoryCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblInventory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblInventoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ticb *TblInventoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblInventoryUpsertBulk {
	ticb.conflict = opts
	return &TblInventoryUpsertBulk{
		create: ticb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblInventory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ticb *TblInventoryCreateBulk) OnConflictColumns(columns ...string) *TblInventoryUpsertBulk {
	ticb.conflict = append(ticb.conflict, sql.ConflictColumns(columns...))
	return &TblInventoryUpsertBulk{
		create: ticb,
	}
}

// TblInventoryUpsertBulk is the builder for "upsert"-ing
// a bulk of TblInventory nodes.
type TblInventoryUpsertBulk struct {
	create *TblInventoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblInventory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblinventory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblInventoryUpsertBulk) UpdateNewValues() *TblInventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tblinventory.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblInventory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblInventoryUpsertBulk) Ignore() *TblInventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblInventoryUpsertBulk) DoNothing() *TblInventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblInventoryCreateBulk.OnConflict
// documentation for more info.
func (u *TblInventoryUpsertBulk) Update(set func(*TblInventoryUpsert)) *TblInventoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblInventoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *TblInventoryUpsertBulk) SetName(v string) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdateName() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "Description" field.
func (u *TblInventoryUpsertBulk) SetDescription(v string) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "Description" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdateDescription() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateDescription()
	})
}

// SetImageLink sets the "ImageLink" field.
func (u *TblInventoryUpsertBulk) SetImageLink(v string) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetImageLink(v)
	})
}

// UpdateImageLink sets the "ImageLink" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdateImageLink() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateImageLink()
	})
}

// SetPrice sets the "Price" field.
func (u *TblInventoryUpsertBulk) SetPrice(v float32) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "Price" field.
func (u *TblInventoryUpsertBulk) AddPrice(v float32) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "Price" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdatePrice() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdatePrice()
	})
}

// SetIsActive sets the "Is_Active" field.
func (u *TblInventoryUpsertBulk) SetIsActive(v bool) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "Is_Active" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdateIsActive() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateIsActive()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblInventoryUpsertBulk) SetCreatedAt(v time.Time) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdateCreatedAt() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblInventoryUpsertBulk) SetUpdatedAt(v time.Time) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdateUpdatedAt() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblInventoryUpsertBulk) SetDeletedAt(v time.Time) *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblInventoryUpsertBulk) UpdateDeletedAt() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblInventoryUpsertBulk) ClearDeletedAt() *TblInventoryUpsertBulk {
	return u.Update(func(s *TblInventoryUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblInventoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblInventoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblInventoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblInventoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
