// Code generated by ent, DO NOT EDIT.

package tblcart

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tblcart type in the database.
	Label = "tbl_cart"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id_uuid"
	// FieldProductId holds the string denoting the productid field in the database.
	FieldProductId = "ProductId"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "UserId"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "Created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "Updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "Deleted_at"
	// EdgeInventory holds the string denoting the inventory edge name in mutations.
	EdgeInventory = "Inventory"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "User"
	// TblUserFieldID holds the string denoting the ID field of the TblUser.
	TblUserFieldID = "id_uuid"
	// Table holds the table name of the tblcart in the database.
	Table = "Tbl_Cart"
	// InventoryTable is the table that holds the Inventory relation/edge.
	InventoryTable = "Tbl_Cart"
	// InventoryInverseTable is the table name for the TblInventory entity.
	// It exists in this package in order to avoid circular dependency with the "tblinventory" package.
	InventoryInverseTable = "Tbl_Inventory"
	// InventoryColumn is the table column denoting the Inventory relation/edge.
	InventoryColumn = "ProductId"
	// UserTable is the table that holds the User relation/edge.
	UserTable = "Tbl_Cart"
	// UserInverseTable is the table name for the TblUser entity.
	// It exists in this package in order to avoid circular dependency with the "tbluser" package.
	UserInverseTable = "tbl_users"
	// UserColumn is the table column denoting the User relation/edge.
	UserColumn = "UserId"
)

// Columns holds all SQL columns for tblcart fields.
var Columns = []string{
	FieldID,
	FieldProductId,
	FieldUserId,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "Created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "Status" enum field.
type Status string

// StatusCart is the default value of the Status enum.
const DefaultStatus = StatusCart

// Status values.
const (
	StatusCart     Status = "cart"
	StatusCanceled Status = "canceled"
	StatusBrought  Status = "brought"
)

func (_status Status) String() string {
	return string(_status)
}

// StatusValidator is a validator for the "Status" field enum values. It is called by the builders before save.
func StatusValidator(_status Status) error {
	switch _status {
	case StatusCart, StatusCanceled, StatusBrought:
		return nil
	default:
		return fmt.Errorf("tblcart: invalid enum value for Status field: %q", _status)
	}
}

// OrderOption defines the ordering options for the TblCart queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByProductId orders the results by the ProductId field.
func ByProductId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProductId, opts...).ToFunc()
}

// ByUserId orders the results by the UserId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByStatus orders the results by the Status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the Created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the Updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the Deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByInventoryField orders the results by Inventory field.
func ByInventoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByUserField orders the results by User field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newInventoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InventoryTable, InventoryColumn),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, TblUserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
