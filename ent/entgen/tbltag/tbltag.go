// Code generated by ent, DO NOT EDIT.

package tbltag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tbltag type in the database.
	Label = "tbl_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id_uuid"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "Name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "Description"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "Is_Active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "Created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "Updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "Deleted_at"
	// EdgeInventoryTag holds the string denoting the inventorytag edge name in mutations.
	EdgeInventoryTag = "inventoryTag"
	// Table holds the table name of the tbltag in the database.
	Table = "Tbl_Tag"
	// InventoryTagTable is the table that holds the inventoryTag relation/edge.
	InventoryTagTable = "Tbl_Inventory_Tag"
	// InventoryTagInverseTable is the table name for the TblInventoryTag entity.
	// It exists in this package in order to avoid circular dependency with the "tblinventorytag" package.
	InventoryTagInverseTable = "Tbl_Inventory_Tag"
	// InventoryTagColumn is the table column denoting the inventoryTag relation/edge.
	InventoryTagColumn = "TagId"
)

// Columns holds all SQL columns for tbltag fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldIsActive,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DescriptionValidator is a validator for the "Description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "Is_Active" field.
	DefaultIsActive bool
	// DefaultCreatedAt holds the default value on creation for the "Created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the TblTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the Description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsActive orders the results by the Is_Active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByCreatedAt orders the results by the Created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the Updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the Deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByInventoryTagCount orders the results by inventoryTag count.
func ByInventoryTagCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInventoryTagStep(), opts...)
	}
}

// ByInventoryTag orders the results by inventoryTag terms.
func ByInventoryTag(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryTagStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newInventoryTagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryTagInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InventoryTagTable, InventoryTagColumn),
	)
}
