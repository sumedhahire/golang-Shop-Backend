// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"inventory/ent/entgen/tbltag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblTag is the model entity for the TblTag schema.
type TblTag struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// IsActive holds the value of the "Is_Active" field.
	IsActive bool `json:"Is_Active,omitempty"`
	// CreatedAt holds the value of the "Created_at" field.
	CreatedAt time.Time `json:"Created_at,omitempty"`
	// UpdatedAt holds the value of the "Updated_at" field.
	UpdatedAt time.Time `json:"Updated_at,omitempty"`
	// DeletedAt holds the value of the "Deleted_at" field.
	DeletedAt *time.Time `json:"Deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblTagQuery when eager-loading is set.
	Edges        TblTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblTagEdges holds the relations/edges for other nodes in the graph.
type TblTagEdges struct {
	// InventoryTag holds the value of the inventoryTag edge.
	InventoryTag []*TblInventoryTag `json:"inventoryTag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InventoryTagOrErr returns the InventoryTag value or an error if the edge
// was not loaded in eager-loading.
func (e TblTagEdges) InventoryTagOrErr() ([]*TblInventoryTag, error) {
	if e.loadedTypes[0] {
		return e.InventoryTag, nil
	}
	return nil, &NotLoadedError{edge: "inventoryTag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tbltag.FieldIsActive:
			values[i] = new(sql.NullBool)
		case tbltag.FieldID, tbltag.FieldName, tbltag.FieldDescription:
			values[i] = new(sql.NullString)
		case tbltag.FieldCreatedAt, tbltag.FieldUpdatedAt, tbltag.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblTag fields.
func (tt *TblTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tbltag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tt.ID = value.String
			}
		case tbltag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				tt.Name = value.String
			}
		case tbltag.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				tt.Description = value.String
			}
		case tbltag.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Is_Active", values[i])
			} else if value.Valid {
				tt.IsActive = value.Bool
			}
		case tbltag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Created_at", values[i])
			} else if value.Valid {
				tt.CreatedAt = value.Time
			}
		case tbltag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Updated_at", values[i])
			} else if value.Valid {
				tt.UpdatedAt = value.Time
			}
		case tbltag.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Deleted_at", values[i])
			} else if value.Valid {
				tt.DeletedAt = new(time.Time)
				*tt.DeletedAt = value.Time
			}
		default:
			tt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblTag.
// This includes values selected through modifiers, order, etc.
func (tt *TblTag) Value(name string) (ent.Value, error) {
	return tt.selectValues.Get(name)
}

// QueryInventoryTag queries the "inventoryTag" edge of the TblTag entity.
func (tt *TblTag) QueryInventoryTag() *TblInventoryTagQuery {
	return NewTblTagClient(tt.config).QueryInventoryTag(tt)
}

// Update returns a builder for updating this TblTag.
// Note that you need to call TblTag.Unwrap() before calling this method if this TblTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TblTag) Update() *TblTagUpdateOne {
	return NewTblTagClient(tt.config).UpdateOne(tt)
}

// Unwrap unwraps the TblTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tt *TblTag) Unwrap() *TblTag {
	_tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblTag is not a transactional entity")
	}
	tt.config.driver = _tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TblTag) String() string {
	var builder strings.Builder
	builder.WriteString("TblTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tt.ID))
	builder.WriteString("Name=")
	builder.WriteString(tt.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(tt.Description)
	builder.WriteString(", ")
	builder.WriteString("Is_Active=")
	builder.WriteString(fmt.Sprintf("%v", tt.IsActive))
	builder.WriteString(", ")
	builder.WriteString("Created_at=")
	builder.WriteString(tt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Updated_at=")
	builder.WriteString(tt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tt.DeletedAt; v != nil {
		builder.WriteString("Deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TblTags is a parsable slice of TblTag.
type TblTags []*TblTag
