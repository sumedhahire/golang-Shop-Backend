// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblinventorytag"
	"inventory/ent/entgen/tbltag"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblTagCreate is the builder for creating a TblTag entity.
type TblTagCreate struct {
	config
	mutation *TblTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "Name" field.
func (ttc *TblTagCreate) SetName(s string) *TblTagCreate {
	ttc.mutation.SetName(s)
	return ttc
}

// SetDescription sets the "Description" field.
func (ttc *TblTagCreate) SetDescription(s string) *TblTagCreate {
	ttc.mutation.SetDescription(s)
	return ttc
}

// SetIsActive sets the "Is_Active" field.
func (ttc *TblTagCreate) SetIsActive(b bool) *TblTagCreate {
	ttc.mutation.SetIsActive(b)
	return ttc
}

// SetNillableIsActive sets the "Is_Active" field if the given value is not nil.
func (ttc *TblTagCreate) SetNillableIsActive(b *bool) *TblTagCreate {
	if b != nil {
		ttc.SetIsActive(*b)
	}
	return ttc
}

// SetCreatedAt sets the "Created_at" field.
func (ttc *TblTagCreate) SetCreatedAt(t time.Time) *TblTagCreate {
	ttc.mutation.SetCreatedAt(t)
	return ttc
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (ttc *TblTagCreate) SetNillableCreatedAt(t *time.Time) *TblTagCreate {
	if t != nil {
		ttc.SetCreatedAt(*t)
	}
	return ttc
}

// SetUpdatedAt sets the "Updated_at" field.
func (ttc *TblTagCreate) SetUpdatedAt(t time.Time) *TblTagCreate {
	ttc.mutation.SetUpdatedAt(t)
	return ttc
}

// SetDeletedAt sets the "Deleted_at" field.
func (ttc *TblTagCreate) SetDeletedAt(t time.Time) *TblTagCreate {
	ttc.mutation.SetDeletedAt(t)
	return ttc
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (ttc *TblTagCreate) SetNillableDeletedAt(t *time.Time) *TblTagCreate {
	if t != nil {
		ttc.SetDeletedAt(*t)
	}
	return ttc
}

// SetID sets the "id" field.
func (ttc *TblTagCreate) SetID(s string) *TblTagCreate {
	ttc.mutation.SetID(s)
	return ttc
}

// AddTagIDs adds the "tag" edge to the TblInventoryTag entity by IDs.
func (ttc *TblTagCreate) AddTagIDs(ids ...string) *TblTagCreate {
	ttc.mutation.AddTagIDs(ids...)
	return ttc
}

// AddTag adds the "tag" edges to the TblInventoryTag entity.
func (ttc *TblTagCreate) AddTag(t ...*TblInventoryTag) *TblTagCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttc.AddTagIDs(ids...)
}

// Mutation returns the TblTagMutation object of the builder.
func (ttc *TblTagCreate) Mutation() *TblTagMutation {
	return ttc.mutation
}

// Save creates the TblTag in the database.
func (ttc *TblTagCreate) Save(ctx context.Context) (*TblTag, error) {
	ttc.defaults()
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *TblTagCreate) SaveX(ctx context.Context) *TblTag {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *TblTagCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *TblTagCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ttc *TblTagCreate) defaults() {
	if _, ok := ttc.mutation.IsActive(); !ok {
		v := tbltag.DefaultIsActive
		ttc.mutation.SetIsActive(v)
	}
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		v := tbltag.DefaultCreatedAt()
		ttc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *TblTagCreate) check() error {
	if _, ok := ttc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`entgen: missing required field "TblTag.Name"`)}
	}
	if v, ok := ttc.mutation.Name(); ok {
		if err := tbltag.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblTag.Name": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.Description(); !ok {
		return &ValidationError{Name: "Description", err: errors.New(`entgen: missing required field "TblTag.Description"`)}
	}
	if v, ok := ttc.mutation.Description(); ok {
		if err := tbltag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`entgen: validator failed for field "TblTag.Description": %w`, err)}
		}
	}
	if _, ok := ttc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "Is_Active", err: errors.New(`entgen: missing required field "TblTag.Is_Active"`)}
	}
	if _, ok := ttc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "Created_at", err: errors.New(`entgen: missing required field "TblTag.Created_at"`)}
	}
	if _, ok := ttc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "Updated_at", err: errors.New(`entgen: missing required field "TblTag.Updated_at"`)}
	}
	return nil
}

func (ttc *TblTagCreate) sqlSave(ctx context.Context) (*TblTag, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblTag.ID type: %T", _spec.ID.Value)
		}
	}
	ttc.mutation.id = &_node.ID
	ttc.mutation.done = true
	return _node, nil
}

func (ttc *TblTagCreate) createSpec() (*TblTag, *sqlgraph.CreateSpec) {
	var (
		_node = &TblTag{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(tbltag.Table, sqlgraph.NewFieldSpec(tbltag.FieldID, field.TypeString))
	)
	_spec.OnConflict = ttc.conflict
	if id, ok := ttc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ttc.mutation.Name(); ok {
		_spec.SetField(tbltag.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ttc.mutation.Description(); ok {
		_spec.SetField(tbltag.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ttc.mutation.IsActive(); ok {
		_spec.SetField(tbltag.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := ttc.mutation.CreatedAt(); ok {
		_spec.SetField(tbltag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ttc.mutation.UpdatedAt(); ok {
		_spec.SetField(tbltag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ttc.mutation.DeletedAt(); ok {
		_spec.SetField(tbltag.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := ttc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbltag.TagTable,
			Columns: []string{tbltag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblTag.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblTagUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ttc *TblTagCreate) OnConflict(opts ...sql.ConflictOption) *TblTagUpsertOne {
	ttc.conflict = opts
	return &TblTagUpsertOne{
		create: ttc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttc *TblTagCreate) OnConflictColumns(columns ...string) *TblTagUpsertOne {
	ttc.conflict = append(ttc.conflict, sql.ConflictColumns(columns...))
	return &TblTagUpsertOne{
		create: ttc,
	}
}

type (
	// TblTagUpsertOne is the builder for "upsert"-ing
	//  one TblTag node.
	TblTagUpsertOne struct {
		create *TblTagCreate
	}

	// TblTagUpsert is the "OnConflict" setter.
	TblTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "Name" field.
func (u *TblTagUpsert) SetName(v string) *TblTagUpsert {
	u.Set(tbltag.FieldName, v)
	return u
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *TblTagUpsert) UpdateName() *TblTagUpsert {
	u.SetExcluded(tbltag.FieldName)
	return u
}

// SetDescription sets the "Description" field.
func (u *TblTagUpsert) SetDescription(v string) *TblTagUpsert {
	u.Set(tbltag.FieldDescription, v)
	return u
}

// UpdateDescription sets the "Description" field to the value that was provided on create.
func (u *TblTagUpsert) UpdateDescription() *TblTagUpsert {
	u.SetExcluded(tbltag.FieldDescription)
	return u
}

// SetIsActive sets the "Is_Active" field.
func (u *TblTagUpsert) SetIsActive(v bool) *TblTagUpsert {
	u.Set(tbltag.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "Is_Active" field to the value that was provided on create.
func (u *TblTagUpsert) UpdateIsActive() *TblTagUpsert {
	u.SetExcluded(tbltag.FieldIsActive)
	return u
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblTagUpsert) SetCreatedAt(v time.Time) *TblTagUpsert {
	u.Set(tbltag.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblTagUpsert) UpdateCreatedAt() *TblTagUpsert {
	u.SetExcluded(tbltag.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblTagUpsert) SetUpdatedAt(v time.Time) *TblTagUpsert {
	u.Set(tbltag.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblTagUpsert) UpdateUpdatedAt() *TblTagUpsert {
	u.SetExcluded(tbltag.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblTagUpsert) SetDeletedAt(v time.Time) *TblTagUpsert {
	u.Set(tbltag.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblTagUpsert) UpdateDeletedAt() *TblTagUpsert {
	u.SetExcluded(tbltag.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblTagUpsert) ClearDeletedAt() *TblTagUpsert {
	u.SetNull(tbltag.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tbltag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblTagUpsertOne) UpdateNewValues() *TblTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tbltag.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblTagUpsertOne) Ignore() *TblTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblTagUpsertOne) DoNothing() *TblTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblTagCreate.OnConflict
// documentation for more info.
func (u *TblTagUpsertOne) Update(set func(*TblTagUpsert)) *TblTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *TblTagUpsertOne) SetName(v string) *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *TblTagUpsertOne) UpdateName() *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "Description" field.
func (u *TblTagUpsertOne) SetDescription(v string) *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "Description" field to the value that was provided on create.
func (u *TblTagUpsertOne) UpdateDescription() *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateDescription()
	})
}

// SetIsActive sets the "Is_Active" field.
func (u *TblTagUpsertOne) SetIsActive(v bool) *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "Is_Active" field to the value that was provided on create.
func (u *TblTagUpsertOne) UpdateIsActive() *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateIsActive()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblTagUpsertOne) SetCreatedAt(v time.Time) *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblTagUpsertOne) UpdateCreatedAt() *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblTagUpsertOne) SetUpdatedAt(v time.Time) *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblTagUpsertOne) UpdateUpdatedAt() *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblTagUpsertOne) SetDeletedAt(v time.Time) *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblTagUpsertOne) UpdateDeletedAt() *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblTagUpsertOne) ClearDeletedAt() *TblTagUpsertOne {
	return u.Update(func(s *TblTagUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblTagUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblTagUpsertOne.ID is not supported by MySQL driver. Use TblTagUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblTagUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblTagCreateBulk is the builder for creating many TblTag entities in bulk.
type TblTagCreateBulk struct {
	config
	err      error
	builders []*TblTagCreate
	conflict []sql.ConflictOption
}

// Save creates the TblTag entities in the database.
func (ttcb *TblTagCreateBulk) Save(ctx context.Context) ([]*TblTag, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*TblTag, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ttcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *TblTagCreateBulk) SaveX(ctx context.Context) []*TblTag {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *TblTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *TblTagCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblTagUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ttcb *TblTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblTagUpsertBulk {
	ttcb.conflict = opts
	return &TblTagUpsertBulk{
		create: ttcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ttcb *TblTagCreateBulk) OnConflictColumns(columns ...string) *TblTagUpsertBulk {
	ttcb.conflict = append(ttcb.conflict, sql.ConflictColumns(columns...))
	return &TblTagUpsertBulk{
		create: ttcb,
	}
}

// TblTagUpsertBulk is the builder for "upsert"-ing
// a bulk of TblTag nodes.
type TblTagUpsertBulk struct {
	create *TblTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tbltag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblTagUpsertBulk) UpdateNewValues() *TblTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tbltag.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblTagUpsertBulk) Ignore() *TblTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblTagUpsertBulk) DoNothing() *TblTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblTagCreateBulk.OnConflict
// documentation for more info.
func (u *TblTagUpsertBulk) Update(set func(*TblTagUpsert)) *TblTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "Name" field.
func (u *TblTagUpsertBulk) SetName(v string) *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "Name" field to the value that was provided on create.
func (u *TblTagUpsertBulk) UpdateName() *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "Description" field.
func (u *TblTagUpsertBulk) SetDescription(v string) *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "Description" field to the value that was provided on create.
func (u *TblTagUpsertBulk) UpdateDescription() *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateDescription()
	})
}

// SetIsActive sets the "Is_Active" field.
func (u *TblTagUpsertBulk) SetIsActive(v bool) *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "Is_Active" field to the value that was provided on create.
func (u *TblTagUpsertBulk) UpdateIsActive() *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateIsActive()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblTagUpsertBulk) SetCreatedAt(v time.Time) *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblTagUpsertBulk) UpdateCreatedAt() *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblTagUpsertBulk) SetUpdatedAt(v time.Time) *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblTagUpsertBulk) UpdateUpdatedAt() *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblTagUpsertBulk) SetDeletedAt(v time.Time) *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblTagUpsertBulk) UpdateDeletedAt() *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblTagUpsertBulk) ClearDeletedAt() *TblTagUpsertBulk {
	return u.Update(func(s *TblTagUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblTagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
