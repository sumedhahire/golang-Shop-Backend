// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthclient"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthClientDelete is the builder for deleting a TblAuthClient entity.
type TblAuthClientDelete struct {
	config
	hooks    []Hook
	mutation *TblAuthClientMutation
}

// Where appends a list predicates to the TblAuthClientDelete builder.
func (tacd *TblAuthClientDelete) Where(ps ...predicate.TblAuthClient) *TblAuthClientDelete {
	tacd.mutation.Where(ps...)
	return tacd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tacd *TblAuthClientDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tacd.sqlExec, tacd.mutation, tacd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tacd *TblAuthClientDelete) ExecX(ctx context.Context) int {
	n, err := tacd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tacd *TblAuthClientDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tblauthclient.Table, sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString))
	if ps := tacd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tacd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tacd.mutation.done = true
	return affected, err
}

// TblAuthClientDeleteOne is the builder for deleting a single TblAuthClient entity.
type TblAuthClientDeleteOne struct {
	tacd *TblAuthClientDelete
}

// Where appends a list predicates to the TblAuthClientDelete builder.
func (tacdo *TblAuthClientDeleteOne) Where(ps ...predicate.TblAuthClient) *TblAuthClientDeleteOne {
	tacdo.tacd.mutation.Where(ps...)
	return tacdo
}

// Exec executes the deletion query.
func (tacdo *TblAuthClientDeleteOne) Exec(ctx context.Context) error {
	n, err := tacdo.tacd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tblauthclient.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tacdo *TblAuthClientDeleteOne) ExecX(ctx context.Context) {
	if err := tacdo.Exec(ctx); err != nil {
		panic(err)
	}
}
