// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthclient"
	"inventory/ent/entgen/tblauthtoken"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthClientUpdate is the builder for updating TblAuthClient entities.
type TblAuthClientUpdate struct {
	config
	hooks    []Hook
	mutation *TblAuthClientMutation
}

// Where appends a list predicates to the TblAuthClientUpdate builder.
func (tacu *TblAuthClientUpdate) Where(ps ...predicate.TblAuthClient) *TblAuthClientUpdate {
	tacu.mutation.Where(ps...)
	return tacu
}

// SetClientSecret sets the "Client_secret" field.
func (tacu *TblAuthClientUpdate) SetClientSecret(s string) *TblAuthClientUpdate {
	tacu.mutation.SetClientSecret(s)
	return tacu
}

// SetNillableClientSecret sets the "Client_secret" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableClientSecret(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetClientSecret(*s)
	}
	return tacu
}

// SetGrantType sets the "Grant_type" field.
func (tacu *TblAuthClientUpdate) SetGrantType(s string) *TblAuthClientUpdate {
	tacu.mutation.SetGrantType(s)
	return tacu
}

// SetNillableGrantType sets the "Grant_type" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableGrantType(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetGrantType(*s)
	}
	return tacu
}

// ClearGrantType clears the value of the "Grant_type" field.
func (tacu *TblAuthClientUpdate) ClearGrantType() *TblAuthClientUpdate {
	tacu.mutation.ClearGrantType()
	return tacu
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tacu *TblAuthClientUpdate) SetUpdatedAt(t time.Time) *TblAuthClientUpdate {
	tacu.mutation.SetUpdatedAt(t)
	return tacu
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableUpdatedAt(t *time.Time) *TblAuthClientUpdate {
	if t != nil {
		tacu.SetUpdatedAt(*t)
	}
	return tacu
}

// SetDeletedAt sets the "DeletedAt" field.
func (tacu *TblAuthClientUpdate) SetDeletedAt(t time.Time) *TblAuthClientUpdate {
	tacu.mutation.SetDeletedAt(t)
	return tacu
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableDeletedAt(t *time.Time) *TblAuthClientUpdate {
	if t != nil {
		tacu.SetDeletedAt(*t)
	}
	return tacu
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tacu *TblAuthClientUpdate) ClearDeletedAt() *TblAuthClientUpdate {
	tacu.mutation.ClearDeletedAt()
	return tacu
}

// SetDomain sets the "domain" field.
func (tacu *TblAuthClientUpdate) SetDomain(s string) *TblAuthClientUpdate {
	tacu.mutation.SetDomain(s)
	return tacu
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableDomain(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetDomain(*s)
	}
	return tacu
}

// ClearDomain clears the value of the "domain" field.
func (tacu *TblAuthClientUpdate) ClearDomain() *TblAuthClientUpdate {
	tacu.mutation.ClearDomain()
	return tacu
}

// SetPublic sets the "public" field.
func (tacu *TblAuthClientUpdate) SetPublic(b bool) *TblAuthClientUpdate {
	tacu.mutation.SetPublic(b)
	return tacu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillablePublic(b *bool) *TblAuthClientUpdate {
	if b != nil {
		tacu.SetPublic(*b)
	}
	return tacu
}

// SetUserAgent sets the "UserAgent" field.
func (tacu *TblAuthClientUpdate) SetUserAgent(s string) *TblAuthClientUpdate {
	tacu.mutation.SetUserAgent(s)
	return tacu
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableUserAgent(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetUserAgent(*s)
	}
	return tacu
}

// SetRedirectURI sets the "redirect_uri" field.
func (tacu *TblAuthClientUpdate) SetRedirectURI(s string) *TblAuthClientUpdate {
	tacu.mutation.SetRedirectURI(s)
	return tacu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableRedirectURI(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetRedirectURI(*s)
	}
	return tacu
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (tacu *TblAuthClientUpdate) ClearRedirectURI() *TblAuthClientUpdate {
	tacu.mutation.ClearRedirectURI()
	return tacu
}

// SetCreatedBy sets the "CreatedBy" field.
func (tacu *TblAuthClientUpdate) SetCreatedBy(s string) *TblAuthClientUpdate {
	tacu.mutation.SetCreatedBy(s)
	return tacu
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableCreatedBy(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetCreatedBy(*s)
	}
	return tacu
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tacu *TblAuthClientUpdate) SetUpdatedBy(s string) *TblAuthClientUpdate {
	tacu.mutation.SetUpdatedBy(s)
	return tacu
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableUpdatedBy(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetUpdatedBy(*s)
	}
	return tacu
}

// SetDeletedBy sets the "DeletedBy" field.
func (tacu *TblAuthClientUpdate) SetDeletedBy(s string) *TblAuthClientUpdate {
	tacu.mutation.SetDeletedBy(s)
	return tacu
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tacu *TblAuthClientUpdate) SetNillableDeletedBy(s *string) *TblAuthClientUpdate {
	if s != nil {
		tacu.SetDeletedBy(*s)
	}
	return tacu
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tacu *TblAuthClientUpdate) ClearDeletedBy() *TblAuthClientUpdate {
	tacu.mutation.ClearDeletedBy()
	return tacu
}

// AddClientTokenIDs adds the "ClientToken" edge to the TblAuthToken entity by IDs.
func (tacu *TblAuthClientUpdate) AddClientTokenIDs(ids ...string) *TblAuthClientUpdate {
	tacu.mutation.AddClientTokenIDs(ids...)
	return tacu
}

// AddClientToken adds the "ClientToken" edges to the TblAuthToken entity.
func (tacu *TblAuthClientUpdate) AddClientToken(t ...*TblAuthToken) *TblAuthClientUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tacu.AddClientTokenIDs(ids...)
}

// Mutation returns the TblAuthClientMutation object of the builder.
func (tacu *TblAuthClientUpdate) Mutation() *TblAuthClientMutation {
	return tacu.mutation
}

// ClearClientToken clears all "ClientToken" edges to the TblAuthToken entity.
func (tacu *TblAuthClientUpdate) ClearClientToken() *TblAuthClientUpdate {
	tacu.mutation.ClearClientToken()
	return tacu
}

// RemoveClientTokenIDs removes the "ClientToken" edge to TblAuthToken entities by IDs.
func (tacu *TblAuthClientUpdate) RemoveClientTokenIDs(ids ...string) *TblAuthClientUpdate {
	tacu.mutation.RemoveClientTokenIDs(ids...)
	return tacu
}

// RemoveClientToken removes "ClientToken" edges to TblAuthToken entities.
func (tacu *TblAuthClientUpdate) RemoveClientToken(t ...*TblAuthToken) *TblAuthClientUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tacu.RemoveClientTokenIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tacu *TblAuthClientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tacu.sqlSave, tacu.mutation, tacu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tacu *TblAuthClientUpdate) SaveX(ctx context.Context) int {
	affected, err := tacu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tacu *TblAuthClientUpdate) Exec(ctx context.Context) error {
	_, err := tacu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacu *TblAuthClientUpdate) ExecX(ctx context.Context) {
	if err := tacu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tacu *TblAuthClientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tblauthclient.Table, tblauthclient.Columns, sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString))
	if ps := tacu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tacu.mutation.ClientSecret(); ok {
		_spec.SetField(tblauthclient.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := tacu.mutation.GrantType(); ok {
		_spec.SetField(tblauthclient.FieldGrantType, field.TypeString, value)
	}
	if tacu.mutation.GrantTypeCleared() {
		_spec.ClearField(tblauthclient.FieldGrantType, field.TypeString)
	}
	if value, ok := tacu.mutation.UpdatedAt(); ok {
		_spec.SetField(tblauthclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tacu.mutation.DeletedAt(); ok {
		_spec.SetField(tblauthclient.FieldDeletedAt, field.TypeTime, value)
	}
	if tacu.mutation.DeletedAtCleared() {
		_spec.ClearField(tblauthclient.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tacu.mutation.Domain(); ok {
		_spec.SetField(tblauthclient.FieldDomain, field.TypeString, value)
	}
	if tacu.mutation.DomainCleared() {
		_spec.ClearField(tblauthclient.FieldDomain, field.TypeString)
	}
	if value, ok := tacu.mutation.Public(); ok {
		_spec.SetField(tblauthclient.FieldPublic, field.TypeBool, value)
	}
	if value, ok := tacu.mutation.UserAgent(); ok {
		_spec.SetField(tblauthclient.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := tacu.mutation.RedirectURI(); ok {
		_spec.SetField(tblauthclient.FieldRedirectURI, field.TypeString, value)
	}
	if tacu.mutation.RedirectURICleared() {
		_spec.ClearField(tblauthclient.FieldRedirectURI, field.TypeString)
	}
	if value, ok := tacu.mutation.CreatedBy(); ok {
		_spec.SetField(tblauthclient.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := tacu.mutation.UpdatedBy(); ok {
		_spec.SetField(tblauthclient.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := tacu.mutation.DeletedBy(); ok {
		_spec.SetField(tblauthclient.FieldDeletedBy, field.TypeString, value)
	}
	if tacu.mutation.DeletedByCleared() {
		_spec.ClearField(tblauthclient.FieldDeletedBy, field.TypeString)
	}
	if tacu.mutation.ClientTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblauthclient.ClientTokenTable,
			Columns: []string{tblauthclient.ClientTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tacu.mutation.RemovedClientTokenIDs(); len(nodes) > 0 && !tacu.mutation.ClientTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblauthclient.ClientTokenTable,
			Columns: []string{tblauthclient.ClientTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tacu.mutation.ClientTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblauthclient.ClientTokenTable,
			Columns: []string{tblauthclient.ClientTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tacu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblauthclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tacu.mutation.done = true
	return n, nil
}

// TblAuthClientUpdateOne is the builder for updating a single TblAuthClient entity.
type TblAuthClientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblAuthClientMutation
}

// SetClientSecret sets the "Client_secret" field.
func (tacuo *TblAuthClientUpdateOne) SetClientSecret(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetClientSecret(s)
	return tacuo
}

// SetNillableClientSecret sets the "Client_secret" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableClientSecret(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetClientSecret(*s)
	}
	return tacuo
}

// SetGrantType sets the "Grant_type" field.
func (tacuo *TblAuthClientUpdateOne) SetGrantType(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetGrantType(s)
	return tacuo
}

// SetNillableGrantType sets the "Grant_type" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableGrantType(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetGrantType(*s)
	}
	return tacuo
}

// ClearGrantType clears the value of the "Grant_type" field.
func (tacuo *TblAuthClientUpdateOne) ClearGrantType() *TblAuthClientUpdateOne {
	tacuo.mutation.ClearGrantType()
	return tacuo
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tacuo *TblAuthClientUpdateOne) SetUpdatedAt(t time.Time) *TblAuthClientUpdateOne {
	tacuo.mutation.SetUpdatedAt(t)
	return tacuo
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableUpdatedAt(t *time.Time) *TblAuthClientUpdateOne {
	if t != nil {
		tacuo.SetUpdatedAt(*t)
	}
	return tacuo
}

// SetDeletedAt sets the "DeletedAt" field.
func (tacuo *TblAuthClientUpdateOne) SetDeletedAt(t time.Time) *TblAuthClientUpdateOne {
	tacuo.mutation.SetDeletedAt(t)
	return tacuo
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableDeletedAt(t *time.Time) *TblAuthClientUpdateOne {
	if t != nil {
		tacuo.SetDeletedAt(*t)
	}
	return tacuo
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (tacuo *TblAuthClientUpdateOne) ClearDeletedAt() *TblAuthClientUpdateOne {
	tacuo.mutation.ClearDeletedAt()
	return tacuo
}

// SetDomain sets the "domain" field.
func (tacuo *TblAuthClientUpdateOne) SetDomain(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetDomain(s)
	return tacuo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableDomain(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetDomain(*s)
	}
	return tacuo
}

// ClearDomain clears the value of the "domain" field.
func (tacuo *TblAuthClientUpdateOne) ClearDomain() *TblAuthClientUpdateOne {
	tacuo.mutation.ClearDomain()
	return tacuo
}

// SetPublic sets the "public" field.
func (tacuo *TblAuthClientUpdateOne) SetPublic(b bool) *TblAuthClientUpdateOne {
	tacuo.mutation.SetPublic(b)
	return tacuo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillablePublic(b *bool) *TblAuthClientUpdateOne {
	if b != nil {
		tacuo.SetPublic(*b)
	}
	return tacuo
}

// SetUserAgent sets the "UserAgent" field.
func (tacuo *TblAuthClientUpdateOne) SetUserAgent(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetUserAgent(s)
	return tacuo
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableUserAgent(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetUserAgent(*s)
	}
	return tacuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (tacuo *TblAuthClientUpdateOne) SetRedirectURI(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetRedirectURI(s)
	return tacuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableRedirectURI(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetRedirectURI(*s)
	}
	return tacuo
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (tacuo *TblAuthClientUpdateOne) ClearRedirectURI() *TblAuthClientUpdateOne {
	tacuo.mutation.ClearRedirectURI()
	return tacuo
}

// SetCreatedBy sets the "CreatedBy" field.
func (tacuo *TblAuthClientUpdateOne) SetCreatedBy(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetCreatedBy(s)
	return tacuo
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableCreatedBy(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetCreatedBy(*s)
	}
	return tacuo
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tacuo *TblAuthClientUpdateOne) SetUpdatedBy(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetUpdatedBy(s)
	return tacuo
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableUpdatedBy(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetUpdatedBy(*s)
	}
	return tacuo
}

// SetDeletedBy sets the "DeletedBy" field.
func (tacuo *TblAuthClientUpdateOne) SetDeletedBy(s string) *TblAuthClientUpdateOne {
	tacuo.mutation.SetDeletedBy(s)
	return tacuo
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tacuo *TblAuthClientUpdateOne) SetNillableDeletedBy(s *string) *TblAuthClientUpdateOne {
	if s != nil {
		tacuo.SetDeletedBy(*s)
	}
	return tacuo
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (tacuo *TblAuthClientUpdateOne) ClearDeletedBy() *TblAuthClientUpdateOne {
	tacuo.mutation.ClearDeletedBy()
	return tacuo
}

// AddClientTokenIDs adds the "ClientToken" edge to the TblAuthToken entity by IDs.
func (tacuo *TblAuthClientUpdateOne) AddClientTokenIDs(ids ...string) *TblAuthClientUpdateOne {
	tacuo.mutation.AddClientTokenIDs(ids...)
	return tacuo
}

// AddClientToken adds the "ClientToken" edges to the TblAuthToken entity.
func (tacuo *TblAuthClientUpdateOne) AddClientToken(t ...*TblAuthToken) *TblAuthClientUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tacuo.AddClientTokenIDs(ids...)
}

// Mutation returns the TblAuthClientMutation object of the builder.
func (tacuo *TblAuthClientUpdateOne) Mutation() *TblAuthClientMutation {
	return tacuo.mutation
}

// ClearClientToken clears all "ClientToken" edges to the TblAuthToken entity.
func (tacuo *TblAuthClientUpdateOne) ClearClientToken() *TblAuthClientUpdateOne {
	tacuo.mutation.ClearClientToken()
	return tacuo
}

// RemoveClientTokenIDs removes the "ClientToken" edge to TblAuthToken entities by IDs.
func (tacuo *TblAuthClientUpdateOne) RemoveClientTokenIDs(ids ...string) *TblAuthClientUpdateOne {
	tacuo.mutation.RemoveClientTokenIDs(ids...)
	return tacuo
}

// RemoveClientToken removes "ClientToken" edges to TblAuthToken entities.
func (tacuo *TblAuthClientUpdateOne) RemoveClientToken(t ...*TblAuthToken) *TblAuthClientUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tacuo.RemoveClientTokenIDs(ids...)
}

// Where appends a list predicates to the TblAuthClientUpdate builder.
func (tacuo *TblAuthClientUpdateOne) Where(ps ...predicate.TblAuthClient) *TblAuthClientUpdateOne {
	tacuo.mutation.Where(ps...)
	return tacuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tacuo *TblAuthClientUpdateOne) Select(field string, fields ...string) *TblAuthClientUpdateOne {
	tacuo.fields = append([]string{field}, fields...)
	return tacuo
}

// Save executes the query and returns the updated TblAuthClient entity.
func (tacuo *TblAuthClientUpdateOne) Save(ctx context.Context) (*TblAuthClient, error) {
	return withHooks(ctx, tacuo.sqlSave, tacuo.mutation, tacuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tacuo *TblAuthClientUpdateOne) SaveX(ctx context.Context) *TblAuthClient {
	node, err := tacuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tacuo *TblAuthClientUpdateOne) Exec(ctx context.Context) error {
	_, err := tacuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacuo *TblAuthClientUpdateOne) ExecX(ctx context.Context) {
	if err := tacuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tacuo *TblAuthClientUpdateOne) sqlSave(ctx context.Context) (_node *TblAuthClient, err error) {
	_spec := sqlgraph.NewUpdateSpec(tblauthclient.Table, tblauthclient.Columns, sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString))
	id, ok := tacuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblAuthClient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tacuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblauthclient.FieldID)
		for _, f := range fields {
			if !tblauthclient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tblauthclient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tacuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tacuo.mutation.ClientSecret(); ok {
		_spec.SetField(tblauthclient.FieldClientSecret, field.TypeString, value)
	}
	if value, ok := tacuo.mutation.GrantType(); ok {
		_spec.SetField(tblauthclient.FieldGrantType, field.TypeString, value)
	}
	if tacuo.mutation.GrantTypeCleared() {
		_spec.ClearField(tblauthclient.FieldGrantType, field.TypeString)
	}
	if value, ok := tacuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tblauthclient.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tacuo.mutation.DeletedAt(); ok {
		_spec.SetField(tblauthclient.FieldDeletedAt, field.TypeTime, value)
	}
	if tacuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tblauthclient.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tacuo.mutation.Domain(); ok {
		_spec.SetField(tblauthclient.FieldDomain, field.TypeString, value)
	}
	if tacuo.mutation.DomainCleared() {
		_spec.ClearField(tblauthclient.FieldDomain, field.TypeString)
	}
	if value, ok := tacuo.mutation.Public(); ok {
		_spec.SetField(tblauthclient.FieldPublic, field.TypeBool, value)
	}
	if value, ok := tacuo.mutation.UserAgent(); ok {
		_spec.SetField(tblauthclient.FieldUserAgent, field.TypeString, value)
	}
	if value, ok := tacuo.mutation.RedirectURI(); ok {
		_spec.SetField(tblauthclient.FieldRedirectURI, field.TypeString, value)
	}
	if tacuo.mutation.RedirectURICleared() {
		_spec.ClearField(tblauthclient.FieldRedirectURI, field.TypeString)
	}
	if value, ok := tacuo.mutation.CreatedBy(); ok {
		_spec.SetField(tblauthclient.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := tacuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tblauthclient.FieldUpdatedBy, field.TypeString, value)
	}
	if value, ok := tacuo.mutation.DeletedBy(); ok {
		_spec.SetField(tblauthclient.FieldDeletedBy, field.TypeString, value)
	}
	if tacuo.mutation.DeletedByCleared() {
		_spec.ClearField(tblauthclient.FieldDeletedBy, field.TypeString)
	}
	if tacuo.mutation.ClientTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblauthclient.ClientTokenTable,
			Columns: []string{tblauthclient.ClientTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tacuo.mutation.RemovedClientTokenIDs(); len(nodes) > 0 && !tacuo.mutation.ClientTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblauthclient.ClientTokenTable,
			Columns: []string{tblauthclient.ClientTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tacuo.mutation.ClientTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblauthclient.ClientTokenTable,
			Columns: []string{tblauthclient.ClientTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblAuthClient{config: tacuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tacuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblauthclient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tacuo.mutation.done = true
	return _node, nil
}
