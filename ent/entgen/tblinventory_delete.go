// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblinventory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblInventoryDelete is the builder for deleting a TblInventory entity.
type TblInventoryDelete struct {
	config
	hooks    []Hook
	mutation *TblInventoryMutation
}

// Where appends a list predicates to the TblInventoryDelete builder.
func (tid *TblInventoryDelete) Where(ps ...predicate.TblInventory) *TblInventoryDelete {
	tid.mutation.Where(ps...)
	return tid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tid *TblInventoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tid.sqlExec, tid.mutation, tid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tid *TblInventoryDelete) ExecX(ctx context.Context) int {
	n, err := tid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tid *TblInventoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tblinventory.Table, sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString))
	if ps := tid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tid.mutation.done = true
	return affected, err
}

// TblInventoryDeleteOne is the builder for deleting a single TblInventory entity.
type TblInventoryDeleteOne struct {
	tid *TblInventoryDelete
}

// Where appends a list predicates to the TblInventoryDelete builder.
func (tido *TblInventoryDeleteOne) Where(ps ...predicate.TblInventory) *TblInventoryDeleteOne {
	tido.tid.mutation.Where(ps...)
	return tido
}

// Exec executes the deletion query.
func (tido *TblInventoryDeleteOne) Exec(ctx context.Context) error {
	n, err := tido.tid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tblinventory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tido *TblInventoryDeleteOne) ExecX(ctx context.Context) {
	if err := tido.Exec(ctx); err != nil {
		panic(err)
	}
}
