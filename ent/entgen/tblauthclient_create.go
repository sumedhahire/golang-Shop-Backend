// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblauthclient"
	"inventory/ent/entgen/tblauthtoken"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthClientCreate is the builder for creating a TblAuthClient entity.
type TblAuthClientCreate struct {
	config
	mutation *TblAuthClientMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetClientSecret sets the "Client_secret" field.
func (tacc *TblAuthClientCreate) SetClientSecret(s string) *TblAuthClientCreate {
	tacc.mutation.SetClientSecret(s)
	return tacc
}

// SetGrantType sets the "Grant_type" field.
func (tacc *TblAuthClientCreate) SetGrantType(s string) *TblAuthClientCreate {
	tacc.mutation.SetGrantType(s)
	return tacc
}

// SetNillableGrantType sets the "Grant_type" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableGrantType(s *string) *TblAuthClientCreate {
	if s != nil {
		tacc.SetGrantType(*s)
	}
	return tacc
}

// SetCreatedAt sets the "CreatedAt" field.
func (tacc *TblAuthClientCreate) SetCreatedAt(t time.Time) *TblAuthClientCreate {
	tacc.mutation.SetCreatedAt(t)
	return tacc
}

// SetNillableCreatedAt sets the "CreatedAt" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableCreatedAt(t *time.Time) *TblAuthClientCreate {
	if t != nil {
		tacc.SetCreatedAt(*t)
	}
	return tacc
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (tacc *TblAuthClientCreate) SetUpdatedAt(t time.Time) *TblAuthClientCreate {
	tacc.mutation.SetUpdatedAt(t)
	return tacc
}

// SetNillableUpdatedAt sets the "UpdatedAt" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableUpdatedAt(t *time.Time) *TblAuthClientCreate {
	if t != nil {
		tacc.SetUpdatedAt(*t)
	}
	return tacc
}

// SetDeletedAt sets the "DeletedAt" field.
func (tacc *TblAuthClientCreate) SetDeletedAt(t time.Time) *TblAuthClientCreate {
	tacc.mutation.SetDeletedAt(t)
	return tacc
}

// SetNillableDeletedAt sets the "DeletedAt" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableDeletedAt(t *time.Time) *TblAuthClientCreate {
	if t != nil {
		tacc.SetDeletedAt(*t)
	}
	return tacc
}

// SetDomain sets the "domain" field.
func (tacc *TblAuthClientCreate) SetDomain(s string) *TblAuthClientCreate {
	tacc.mutation.SetDomain(s)
	return tacc
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableDomain(s *string) *TblAuthClientCreate {
	if s != nil {
		tacc.SetDomain(*s)
	}
	return tacc
}

// SetPublic sets the "public" field.
func (tacc *TblAuthClientCreate) SetPublic(b bool) *TblAuthClientCreate {
	tacc.mutation.SetPublic(b)
	return tacc
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillablePublic(b *bool) *TblAuthClientCreate {
	if b != nil {
		tacc.SetPublic(*b)
	}
	return tacc
}

// SetUserAgent sets the "UserAgent" field.
func (tacc *TblAuthClientCreate) SetUserAgent(s string) *TblAuthClientCreate {
	tacc.mutation.SetUserAgent(s)
	return tacc
}

// SetNillableUserAgent sets the "UserAgent" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableUserAgent(s *string) *TblAuthClientCreate {
	if s != nil {
		tacc.SetUserAgent(*s)
	}
	return tacc
}

// SetRedirectURI sets the "redirect_uri" field.
func (tacc *TblAuthClientCreate) SetRedirectURI(s string) *TblAuthClientCreate {
	tacc.mutation.SetRedirectURI(s)
	return tacc
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableRedirectURI(s *string) *TblAuthClientCreate {
	if s != nil {
		tacc.SetRedirectURI(*s)
	}
	return tacc
}

// SetCreatedBy sets the "CreatedBy" field.
func (tacc *TblAuthClientCreate) SetCreatedBy(s string) *TblAuthClientCreate {
	tacc.mutation.SetCreatedBy(s)
	return tacc
}

// SetNillableCreatedBy sets the "CreatedBy" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableCreatedBy(s *string) *TblAuthClientCreate {
	if s != nil {
		tacc.SetCreatedBy(*s)
	}
	return tacc
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (tacc *TblAuthClientCreate) SetUpdatedBy(s string) *TblAuthClientCreate {
	tacc.mutation.SetUpdatedBy(s)
	return tacc
}

// SetNillableUpdatedBy sets the "UpdatedBy" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableUpdatedBy(s *string) *TblAuthClientCreate {
	if s != nil {
		tacc.SetUpdatedBy(*s)
	}
	return tacc
}

// SetDeletedBy sets the "DeletedBy" field.
func (tacc *TblAuthClientCreate) SetDeletedBy(s string) *TblAuthClientCreate {
	tacc.mutation.SetDeletedBy(s)
	return tacc
}

// SetNillableDeletedBy sets the "DeletedBy" field if the given value is not nil.
func (tacc *TblAuthClientCreate) SetNillableDeletedBy(s *string) *TblAuthClientCreate {
	if s != nil {
		tacc.SetDeletedBy(*s)
	}
	return tacc
}

// SetID sets the "id" field.
func (tacc *TblAuthClientCreate) SetID(s string) *TblAuthClientCreate {
	tacc.mutation.SetID(s)
	return tacc
}

// AddClientTokenIDs adds the "ClientToken" edge to the TblAuthToken entity by IDs.
func (tacc *TblAuthClientCreate) AddClientTokenIDs(ids ...string) *TblAuthClientCreate {
	tacc.mutation.AddClientTokenIDs(ids...)
	return tacc
}

// AddClientToken adds the "ClientToken" edges to the TblAuthToken entity.
func (tacc *TblAuthClientCreate) AddClientToken(t ...*TblAuthToken) *TblAuthClientCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tacc.AddClientTokenIDs(ids...)
}

// Mutation returns the TblAuthClientMutation object of the builder.
func (tacc *TblAuthClientCreate) Mutation() *TblAuthClientMutation {
	return tacc.mutation
}

// Save creates the TblAuthClient in the database.
func (tacc *TblAuthClientCreate) Save(ctx context.Context) (*TblAuthClient, error) {
	tacc.defaults()
	return withHooks(ctx, tacc.sqlSave, tacc.mutation, tacc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tacc *TblAuthClientCreate) SaveX(ctx context.Context) *TblAuthClient {
	v, err := tacc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tacc *TblAuthClientCreate) Exec(ctx context.Context) error {
	_, err := tacc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tacc *TblAuthClientCreate) ExecX(ctx context.Context) {
	if err := tacc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tacc *TblAuthClientCreate) defaults() {
	if _, ok := tacc.mutation.CreatedAt(); !ok {
		v := tblauthclient.DefaultCreatedAt
		tacc.mutation.SetCreatedAt(v)
	}
	if _, ok := tacc.mutation.UpdatedAt(); !ok {
		v := tblauthclient.DefaultUpdatedAt
		tacc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tacc.mutation.Public(); !ok {
		v := tblauthclient.DefaultPublic
		tacc.mutation.SetPublic(v)
	}
	if _, ok := tacc.mutation.UserAgent(); !ok {
		v := tblauthclient.DefaultUserAgent
		tacc.mutation.SetUserAgent(v)
	}
	if _, ok := tacc.mutation.CreatedBy(); !ok {
		v := tblauthclient.DefaultCreatedBy
		tacc.mutation.SetCreatedBy(v)
	}
	if _, ok := tacc.mutation.UpdatedBy(); !ok {
		v := tblauthclient.DefaultUpdatedBy
		tacc.mutation.SetUpdatedBy(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tacc *TblAuthClientCreate) check() error {
	if _, ok := tacc.mutation.ClientSecret(); !ok {
		return &ValidationError{Name: "Client_secret", err: errors.New(`entgen: missing required field "TblAuthClient.Client_secret"`)}
	}
	if _, ok := tacc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "CreatedAt", err: errors.New(`entgen: missing required field "TblAuthClient.CreatedAt"`)}
	}
	if _, ok := tacc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "UpdatedAt", err: errors.New(`entgen: missing required field "TblAuthClient.UpdatedAt"`)}
	}
	if _, ok := tacc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`entgen: missing required field "TblAuthClient.public"`)}
	}
	if _, ok := tacc.mutation.UserAgent(); !ok {
		return &ValidationError{Name: "UserAgent", err: errors.New(`entgen: missing required field "TblAuthClient.UserAgent"`)}
	}
	if _, ok := tacc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "CreatedBy", err: errors.New(`entgen: missing required field "TblAuthClient.CreatedBy"`)}
	}
	if _, ok := tacc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "UpdatedBy", err: errors.New(`entgen: missing required field "TblAuthClient.UpdatedBy"`)}
	}
	return nil
}

func (tacc *TblAuthClientCreate) sqlSave(ctx context.Context) (*TblAuthClient, error) {
	if err := tacc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tacc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tacc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblAuthClient.ID type: %T", _spec.ID.Value)
		}
	}
	tacc.mutation.id = &_node.ID
	tacc.mutation.done = true
	return _node, nil
}

func (tacc *TblAuthClientCreate) createSpec() (*TblAuthClient, *sqlgraph.CreateSpec) {
	var (
		_node = &TblAuthClient{config: tacc.config}
		_spec = sqlgraph.NewCreateSpec(tblauthclient.Table, sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString))
	)
	_spec.OnConflict = tacc.conflict
	if id, ok := tacc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tacc.mutation.ClientSecret(); ok {
		_spec.SetField(tblauthclient.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := tacc.mutation.GrantType(); ok {
		_spec.SetField(tblauthclient.FieldGrantType, field.TypeString, value)
		_node.GrantType = &value
	}
	if value, ok := tacc.mutation.CreatedAt(); ok {
		_spec.SetField(tblauthclient.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tacc.mutation.UpdatedAt(); ok {
		_spec.SetField(tblauthclient.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tacc.mutation.DeletedAt(); ok {
		_spec.SetField(tblauthclient.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tacc.mutation.Domain(); ok {
		_spec.SetField(tblauthclient.FieldDomain, field.TypeString, value)
		_node.Domain = &value
	}
	if value, ok := tacc.mutation.Public(); ok {
		_spec.SetField(tblauthclient.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if value, ok := tacc.mutation.UserAgent(); ok {
		_spec.SetField(tblauthclient.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := tacc.mutation.RedirectURI(); ok {
		_spec.SetField(tblauthclient.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = &value
	}
	if value, ok := tacc.mutation.CreatedBy(); ok {
		_spec.SetField(tblauthclient.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tacc.mutation.UpdatedBy(); ok {
		_spec.SetField(tblauthclient.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tacc.mutation.DeletedBy(); ok {
		_spec.SetField(tblauthclient.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = &value
	}
	if nodes := tacc.mutation.ClientTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblauthclient.ClientTokenTable,
			Columns: []string{tblauthclient.ClientTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblAuthClient.Create().
//		SetClientSecret(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblAuthClientUpsert) {
//			SetClientSecret(v+v).
//		}).
//		Exec(ctx)
func (tacc *TblAuthClientCreate) OnConflict(opts ...sql.ConflictOption) *TblAuthClientUpsertOne {
	tacc.conflict = opts
	return &TblAuthClientUpsertOne{
		create: tacc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblAuthClient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tacc *TblAuthClientCreate) OnConflictColumns(columns ...string) *TblAuthClientUpsertOne {
	tacc.conflict = append(tacc.conflict, sql.ConflictColumns(columns...))
	return &TblAuthClientUpsertOne{
		create: tacc,
	}
}

type (
	// TblAuthClientUpsertOne is the builder for "upsert"-ing
	//  one TblAuthClient node.
	TblAuthClientUpsertOne struct {
		create *TblAuthClientCreate
	}

	// TblAuthClientUpsert is the "OnConflict" setter.
	TblAuthClientUpsert struct {
		*sql.UpdateSet
	}
)

// SetClientSecret sets the "Client_secret" field.
func (u *TblAuthClientUpsert) SetClientSecret(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "Client_secret" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateClientSecret() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldClientSecret)
	return u
}

// SetGrantType sets the "Grant_type" field.
func (u *TblAuthClientUpsert) SetGrantType(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldGrantType, v)
	return u
}

// UpdateGrantType sets the "Grant_type" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateGrantType() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldGrantType)
	return u
}

// ClearGrantType clears the value of the "Grant_type" field.
func (u *TblAuthClientUpsert) ClearGrantType() *TblAuthClientUpsert {
	u.SetNull(tblauthclient.FieldGrantType)
	return u
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (u *TblAuthClientUpsert) SetUpdatedAt(v time.Time) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "UpdatedAt" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateUpdatedAt() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "DeletedAt" field.
func (u *TblAuthClientUpsert) SetDeletedAt(v time.Time) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "DeletedAt" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateDeletedAt() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (u *TblAuthClientUpsert) ClearDeletedAt() *TblAuthClientUpsert {
	u.SetNull(tblauthclient.FieldDeletedAt)
	return u
}

// SetDomain sets the "domain" field.
func (u *TblAuthClientUpsert) SetDomain(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldDomain, v)
	return u
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateDomain() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldDomain)
	return u
}

// ClearDomain clears the value of the "domain" field.
func (u *TblAuthClientUpsert) ClearDomain() *TblAuthClientUpsert {
	u.SetNull(tblauthclient.FieldDomain)
	return u
}

// SetPublic sets the "public" field.
func (u *TblAuthClientUpsert) SetPublic(v bool) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldPublic, v)
	return u
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdatePublic() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldPublic)
	return u
}

// SetUserAgent sets the "UserAgent" field.
func (u *TblAuthClientUpsert) SetUserAgent(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldUserAgent, v)
	return u
}

// UpdateUserAgent sets the "UserAgent" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateUserAgent() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldUserAgent)
	return u
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *TblAuthClientUpsert) SetRedirectURI(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldRedirectURI, v)
	return u
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateRedirectURI() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldRedirectURI)
	return u
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *TblAuthClientUpsert) ClearRedirectURI() *TblAuthClientUpsert {
	u.SetNull(tblauthclient.FieldRedirectURI)
	return u
}

// SetCreatedBy sets the "CreatedBy" field.
func (u *TblAuthClientUpsert) SetCreatedBy(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldCreatedBy, v)
	return u
}

// UpdateCreatedBy sets the "CreatedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateCreatedBy() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldCreatedBy)
	return u
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (u *TblAuthClientUpsert) SetUpdatedBy(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldUpdatedBy, v)
	return u
}

// UpdateUpdatedBy sets the "UpdatedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateUpdatedBy() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldUpdatedBy)
	return u
}

// SetDeletedBy sets the "DeletedBy" field.
func (u *TblAuthClientUpsert) SetDeletedBy(v string) *TblAuthClientUpsert {
	u.Set(tblauthclient.FieldDeletedBy, v)
	return u
}

// UpdateDeletedBy sets the "DeletedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsert) UpdateDeletedBy() *TblAuthClientUpsert {
	u.SetExcluded(tblauthclient.FieldDeletedBy)
	return u
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (u *TblAuthClientUpsert) ClearDeletedBy() *TblAuthClientUpsert {
	u.SetNull(tblauthclient.FieldDeletedBy)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblAuthClient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblauthclient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblAuthClientUpsertOne) UpdateNewValues() *TblAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tblauthclient.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(tblauthclient.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblAuthClient.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblAuthClientUpsertOne) Ignore() *TblAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblAuthClientUpsertOne) DoNothing() *TblAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblAuthClientCreate.OnConflict
// documentation for more info.
func (u *TblAuthClientUpsertOne) Update(set func(*TblAuthClientUpsert)) *TblAuthClientUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblAuthClientUpsert{UpdateSet: update})
	}))
	return u
}

// SetClientSecret sets the "Client_secret" field.
func (u *TblAuthClientUpsertOne) SetClientSecret(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "Client_secret" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateClientSecret() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateClientSecret()
	})
}

// SetGrantType sets the "Grant_type" field.
func (u *TblAuthClientUpsertOne) SetGrantType(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetGrantType(v)
	})
}

// UpdateGrantType sets the "Grant_type" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateGrantType() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateGrantType()
	})
}

// ClearGrantType clears the value of the "Grant_type" field.
func (u *TblAuthClientUpsertOne) ClearGrantType() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearGrantType()
	})
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (u *TblAuthClientUpsertOne) SetUpdatedAt(v time.Time) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "UpdatedAt" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateUpdatedAt() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "DeletedAt" field.
func (u *TblAuthClientUpsertOne) SetDeletedAt(v time.Time) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "DeletedAt" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateDeletedAt() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (u *TblAuthClientUpsertOne) ClearDeletedAt() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearDeletedAt()
	})
}

// SetDomain sets the "domain" field.
func (u *TblAuthClientUpsertOne) SetDomain(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateDomain() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *TblAuthClientUpsertOne) ClearDomain() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearDomain()
	})
}

// SetPublic sets the "public" field.
func (u *TblAuthClientUpsertOne) SetPublic(v bool) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdatePublic() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdatePublic()
	})
}

// SetUserAgent sets the "UserAgent" field.
func (u *TblAuthClientUpsertOne) SetUserAgent(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "UserAgent" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateUserAgent() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateUserAgent()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *TblAuthClientUpsertOne) SetRedirectURI(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateRedirectURI() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *TblAuthClientUpsertOne) ClearRedirectURI() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearRedirectURI()
	})
}

// SetCreatedBy sets the "CreatedBy" field.
func (u *TblAuthClientUpsertOne) SetCreatedBy(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "CreatedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateCreatedBy() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (u *TblAuthClientUpsertOne) SetUpdatedBy(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "UpdatedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateUpdatedBy() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedBy sets the "DeletedBy" field.
func (u *TblAuthClientUpsertOne) SetDeletedBy(v string) *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "DeletedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsertOne) UpdateDeletedBy() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (u *TblAuthClientUpsertOne) ClearDeletedBy() *TblAuthClientUpsertOne {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearDeletedBy()
	})
}

// Exec executes the query.
func (u *TblAuthClientUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblAuthClientCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblAuthClientUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblAuthClientUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblAuthClientUpsertOne.ID is not supported by MySQL driver. Use TblAuthClientUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblAuthClientUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblAuthClientCreateBulk is the builder for creating many TblAuthClient entities in bulk.
type TblAuthClientCreateBulk struct {
	config
	err      error
	builders []*TblAuthClientCreate
	conflict []sql.ConflictOption
}

// Save creates the TblAuthClient entities in the database.
func (taccb *TblAuthClientCreateBulk) Save(ctx context.Context) ([]*TblAuthClient, error) {
	if taccb.err != nil {
		return nil, taccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(taccb.builders))
	nodes := make([]*TblAuthClient, len(taccb.builders))
	mutators := make([]Mutator, len(taccb.builders))
	for i := range taccb.builders {
		func(i int, root context.Context) {
			builder := taccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblAuthClientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, taccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = taccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, taccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, taccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (taccb *TblAuthClientCreateBulk) SaveX(ctx context.Context) []*TblAuthClient {
	v, err := taccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (taccb *TblAuthClientCreateBulk) Exec(ctx context.Context) error {
	_, err := taccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (taccb *TblAuthClientCreateBulk) ExecX(ctx context.Context) {
	if err := taccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblAuthClient.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblAuthClientUpsert) {
//			SetClientSecret(v+v).
//		}).
//		Exec(ctx)
func (taccb *TblAuthClientCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblAuthClientUpsertBulk {
	taccb.conflict = opts
	return &TblAuthClientUpsertBulk{
		create: taccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblAuthClient.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (taccb *TblAuthClientCreateBulk) OnConflictColumns(columns ...string) *TblAuthClientUpsertBulk {
	taccb.conflict = append(taccb.conflict, sql.ConflictColumns(columns...))
	return &TblAuthClientUpsertBulk{
		create: taccb,
	}
}

// TblAuthClientUpsertBulk is the builder for "upsert"-ing
// a bulk of TblAuthClient nodes.
type TblAuthClientUpsertBulk struct {
	create *TblAuthClientCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblAuthClient.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblauthclient.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblAuthClientUpsertBulk) UpdateNewValues() *TblAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tblauthclient.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(tblauthclient.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblAuthClient.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblAuthClientUpsertBulk) Ignore() *TblAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblAuthClientUpsertBulk) DoNothing() *TblAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblAuthClientCreateBulk.OnConflict
// documentation for more info.
func (u *TblAuthClientUpsertBulk) Update(set func(*TblAuthClientUpsert)) *TblAuthClientUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblAuthClientUpsert{UpdateSet: update})
	}))
	return u
}

// SetClientSecret sets the "Client_secret" field.
func (u *TblAuthClientUpsertBulk) SetClientSecret(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "Client_secret" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateClientSecret() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateClientSecret()
	})
}

// SetGrantType sets the "Grant_type" field.
func (u *TblAuthClientUpsertBulk) SetGrantType(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetGrantType(v)
	})
}

// UpdateGrantType sets the "Grant_type" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateGrantType() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateGrantType()
	})
}

// ClearGrantType clears the value of the "Grant_type" field.
func (u *TblAuthClientUpsertBulk) ClearGrantType() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearGrantType()
	})
}

// SetUpdatedAt sets the "UpdatedAt" field.
func (u *TblAuthClientUpsertBulk) SetUpdatedAt(v time.Time) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "UpdatedAt" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateUpdatedAt() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "DeletedAt" field.
func (u *TblAuthClientUpsertBulk) SetDeletedAt(v time.Time) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "DeletedAt" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateDeletedAt() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "DeletedAt" field.
func (u *TblAuthClientUpsertBulk) ClearDeletedAt() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearDeletedAt()
	})
}

// SetDomain sets the "domain" field.
func (u *TblAuthClientUpsertBulk) SetDomain(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetDomain(v)
	})
}

// UpdateDomain sets the "domain" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateDomain() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateDomain()
	})
}

// ClearDomain clears the value of the "domain" field.
func (u *TblAuthClientUpsertBulk) ClearDomain() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearDomain()
	})
}

// SetPublic sets the "public" field.
func (u *TblAuthClientUpsertBulk) SetPublic(v bool) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetPublic(v)
	})
}

// UpdatePublic sets the "public" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdatePublic() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdatePublic()
	})
}

// SetUserAgent sets the "UserAgent" field.
func (u *TblAuthClientUpsertBulk) SetUserAgent(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetUserAgent(v)
	})
}

// UpdateUserAgent sets the "UserAgent" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateUserAgent() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateUserAgent()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *TblAuthClientUpsertBulk) SetRedirectURI(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateRedirectURI() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *TblAuthClientUpsertBulk) ClearRedirectURI() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearRedirectURI()
	})
}

// SetCreatedBy sets the "CreatedBy" field.
func (u *TblAuthClientUpsertBulk) SetCreatedBy(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetCreatedBy(v)
	})
}

// UpdateCreatedBy sets the "CreatedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateCreatedBy() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateCreatedBy()
	})
}

// SetUpdatedBy sets the "UpdatedBy" field.
func (u *TblAuthClientUpsertBulk) SetUpdatedBy(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetUpdatedBy(v)
	})
}

// UpdateUpdatedBy sets the "UpdatedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateUpdatedBy() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateUpdatedBy()
	})
}

// SetDeletedBy sets the "DeletedBy" field.
func (u *TblAuthClientUpsertBulk) SetDeletedBy(v string) *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.SetDeletedBy(v)
	})
}

// UpdateDeletedBy sets the "DeletedBy" field to the value that was provided on create.
func (u *TblAuthClientUpsertBulk) UpdateDeletedBy() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.UpdateDeletedBy()
	})
}

// ClearDeletedBy clears the value of the "DeletedBy" field.
func (u *TblAuthClientUpsertBulk) ClearDeletedBy() *TblAuthClientUpsertBulk {
	return u.Update(func(s *TblAuthClientUpsert) {
		s.ClearDeletedBy()
	})
}

// Exec executes the query.
func (u *TblAuthClientUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblAuthClientCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblAuthClientCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblAuthClientUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
