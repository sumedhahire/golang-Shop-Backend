// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblauthclient"
	"inventory/ent/entgen/tblauthtoken"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthTokenCreate is the builder for creating a TblAuthToken entity.
type TblAuthTokenCreate struct {
	config
	mutation *TblAuthTokenMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAuthUUID sets the "auth_uuid" field.
func (tatc *TblAuthTokenCreate) SetAuthUUID(s string) *TblAuthTokenCreate {
	tatc.mutation.SetAuthUUID(s)
	return tatc
}

// SetAuthXref sets the "auth_xref" field.
func (tatc *TblAuthTokenCreate) SetAuthXref(s string) *TblAuthTokenCreate {
	tatc.mutation.SetAuthXref(s)
	return tatc
}

// SetAccesstoken sets the "accesstoken" field.
func (tatc *TblAuthTokenCreate) SetAccesstoken(s string) *TblAuthTokenCreate {
	tatc.mutation.SetAccesstoken(s)
	return tatc
}

// SetAccesstokencreatedat sets the "accesstokencreatedat" field.
func (tatc *TblAuthTokenCreate) SetAccesstokencreatedat(t time.Time) *TblAuthTokenCreate {
	tatc.mutation.SetAccesstokencreatedat(t)
	return tatc
}

// SetNillableAccesstokencreatedat sets the "accesstokencreatedat" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableAccesstokencreatedat(t *time.Time) *TblAuthTokenCreate {
	if t != nil {
		tatc.SetAccesstokencreatedat(*t)
	}
	return tatc
}

// SetAccesstokenexpiresin sets the "accesstokenexpiresin" field.
func (tatc *TblAuthTokenCreate) SetAccesstokenexpiresin(i int) *TblAuthTokenCreate {
	tatc.mutation.SetAccesstokenexpiresin(i)
	return tatc
}

// SetClientid sets the "clientid" field.
func (tatc *TblAuthTokenCreate) SetClientid(s string) *TblAuthTokenCreate {
	tatc.mutation.SetClientid(s)
	return tatc
}

// SetNillableClientid sets the "clientid" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableClientid(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetClientid(*s)
	}
	return tatc
}

// SetUserUlid sets the "user_ulid" field.
func (tatc *TblAuthTokenCreate) SetUserUlid(s string) *TblAuthTokenCreate {
	tatc.mutation.SetUserUlid(s)
	return tatc
}

// SetNillableUserUlid sets the "user_ulid" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableUserUlid(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetUserUlid(*s)
	}
	return tatc
}

// SetRefreshtoken sets the "refreshtoken" field.
func (tatc *TblAuthTokenCreate) SetRefreshtoken(s string) *TblAuthTokenCreate {
	tatc.mutation.SetRefreshtoken(s)
	return tatc
}

// SetRefreshtokencreatedat sets the "refreshtokencreatedat" field.
func (tatc *TblAuthTokenCreate) SetRefreshtokencreatedat(t time.Time) *TblAuthTokenCreate {
	tatc.mutation.SetRefreshtokencreatedat(t)
	return tatc
}

// SetNillableRefreshtokencreatedat sets the "refreshtokencreatedat" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableRefreshtokencreatedat(t *time.Time) *TblAuthTokenCreate {
	if t != nil {
		tatc.SetRefreshtokencreatedat(*t)
	}
	return tatc
}

// SetRefreshtokenexpiresin sets the "refreshtokenexpiresin" field.
func (tatc *TblAuthTokenCreate) SetRefreshtokenexpiresin(i int) *TblAuthTokenCreate {
	tatc.mutation.SetRefreshtokenexpiresin(i)
	return tatc
}

// SetCreatedat sets the "createdat" field.
func (tatc *TblAuthTokenCreate) SetCreatedat(t time.Time) *TblAuthTokenCreate {
	tatc.mutation.SetCreatedat(t)
	return tatc
}

// SetNillableCreatedat sets the "createdat" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableCreatedat(t *time.Time) *TblAuthTokenCreate {
	if t != nil {
		tatc.SetCreatedat(*t)
	}
	return tatc
}

// SetUpdatedat sets the "updatedat" field.
func (tatc *TblAuthTokenCreate) SetUpdatedat(t time.Time) *TblAuthTokenCreate {
	tatc.mutation.SetUpdatedat(t)
	return tatc
}

// SetNillableUpdatedat sets the "updatedat" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableUpdatedat(t *time.Time) *TblAuthTokenCreate {
	if t != nil {
		tatc.SetUpdatedat(*t)
	}
	return tatc
}

// SetDeletedat sets the "deletedat" field.
func (tatc *TblAuthTokenCreate) SetDeletedat(t time.Time) *TblAuthTokenCreate {
	tatc.mutation.SetDeletedat(t)
	return tatc
}

// SetNillableDeletedat sets the "deletedat" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableDeletedat(t *time.Time) *TblAuthTokenCreate {
	if t != nil {
		tatc.SetDeletedat(*t)
	}
	return tatc
}

// SetIPAddress sets the "ip_address" field.
func (tatc *TblAuthTokenCreate) SetIPAddress(s string) *TblAuthTokenCreate {
	tatc.mutation.SetIPAddress(s)
	return tatc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableIPAddress(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetIPAddress(*s)
	}
	return tatc
}

// SetUseragent sets the "useragent" field.
func (tatc *TblAuthTokenCreate) SetUseragent(s string) *TblAuthTokenCreate {
	tatc.mutation.SetUseragent(s)
	return tatc
}

// SetNillableUseragent sets the "useragent" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableUseragent(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetUseragent(*s)
	}
	return tatc
}

// SetCreatedby sets the "createdby" field.
func (tatc *TblAuthTokenCreate) SetCreatedby(s string) *TblAuthTokenCreate {
	tatc.mutation.SetCreatedby(s)
	return tatc
}

// SetNillableCreatedby sets the "createdby" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableCreatedby(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetCreatedby(*s)
	}
	return tatc
}

// SetUpdatedby sets the "updatedby" field.
func (tatc *TblAuthTokenCreate) SetUpdatedby(s string) *TblAuthTokenCreate {
	tatc.mutation.SetUpdatedby(s)
	return tatc
}

// SetNillableUpdatedby sets the "updatedby" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableUpdatedby(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetUpdatedby(*s)
	}
	return tatc
}

// SetDeletedby sets the "deletedby" field.
func (tatc *TblAuthTokenCreate) SetDeletedby(s string) *TblAuthTokenCreate {
	tatc.mutation.SetDeletedby(s)
	return tatc
}

// SetNillableDeletedby sets the "deletedby" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableDeletedby(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetDeletedby(*s)
	}
	return tatc
}

// SetCode sets the "code" field.
func (tatc *TblAuthTokenCreate) SetCode(s string) *TblAuthTokenCreate {
	tatc.mutation.SetCode(s)
	return tatc
}

// SetCodecreatedat sets the "codecreatedat" field.
func (tatc *TblAuthTokenCreate) SetCodecreatedat(t time.Time) *TblAuthTokenCreate {
	tatc.mutation.SetCodecreatedat(t)
	return tatc
}

// SetNillableCodecreatedat sets the "codecreatedat" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableCodecreatedat(t *time.Time) *TblAuthTokenCreate {
	if t != nil {
		tatc.SetCodecreatedat(*t)
	}
	return tatc
}

// SetCodeexpiresin sets the "codeexpiresin" field.
func (tatc *TblAuthTokenCreate) SetCodeexpiresin(i int) *TblAuthTokenCreate {
	tatc.mutation.SetCodeexpiresin(i)
	return tatc
}

// SetCodechallenge sets the "codechallenge" field.
func (tatc *TblAuthTokenCreate) SetCodechallenge(s string) *TblAuthTokenCreate {
	tatc.mutation.SetCodechallenge(s)
	return tatc
}

// SetNillableCodechallenge sets the "codechallenge" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableCodechallenge(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetCodechallenge(*s)
	}
	return tatc
}

// SetRedirectURI sets the "redirect_uri" field.
func (tatc *TblAuthTokenCreate) SetRedirectURI(s string) *TblAuthTokenCreate {
	tatc.mutation.SetRedirectURI(s)
	return tatc
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableRedirectURI(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetRedirectURI(*s)
	}
	return tatc
}

// SetScope sets the "scope" field.
func (tatc *TblAuthTokenCreate) SetScope(s string) *TblAuthTokenCreate {
	tatc.mutation.SetScope(s)
	return tatc
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableScope(s *string) *TblAuthTokenCreate {
	if s != nil {
		tatc.SetScope(*s)
	}
	return tatc
}

// SetID sets the "id" field.
func (tatc *TblAuthTokenCreate) SetID(s string) *TblAuthTokenCreate {
	tatc.mutation.SetID(s)
	return tatc
}

// SetTokenClientID sets the "TokenClient" edge to the TblAuthClient entity by ID.
func (tatc *TblAuthTokenCreate) SetTokenClientID(id string) *TblAuthTokenCreate {
	tatc.mutation.SetTokenClientID(id)
	return tatc
}

// SetNillableTokenClientID sets the "TokenClient" edge to the TblAuthClient entity by ID if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableTokenClientID(id *string) *TblAuthTokenCreate {
	if id != nil {
		tatc = tatc.SetTokenClientID(*id)
	}
	return tatc
}

// SetTokenClient sets the "TokenClient" edge to the TblAuthClient entity.
func (tatc *TblAuthTokenCreate) SetTokenClient(t *TblAuthClient) *TblAuthTokenCreate {
	return tatc.SetTokenClientID(t.ID)
}

// SetTokenUserID sets the "TokenUser" edge to the TblUser entity by ID.
func (tatc *TblAuthTokenCreate) SetTokenUserID(id string) *TblAuthTokenCreate {
	tatc.mutation.SetTokenUserID(id)
	return tatc
}

// SetNillableTokenUserID sets the "TokenUser" edge to the TblUser entity by ID if the given value is not nil.
func (tatc *TblAuthTokenCreate) SetNillableTokenUserID(id *string) *TblAuthTokenCreate {
	if id != nil {
		tatc = tatc.SetTokenUserID(*id)
	}
	return tatc
}

// SetTokenUser sets the "TokenUser" edge to the TblUser entity.
func (tatc *TblAuthTokenCreate) SetTokenUser(t *TblUser) *TblAuthTokenCreate {
	return tatc.SetTokenUserID(t.ID)
}

// Mutation returns the TblAuthTokenMutation object of the builder.
func (tatc *TblAuthTokenCreate) Mutation() *TblAuthTokenMutation {
	return tatc.mutation
}

// Save creates the TblAuthToken in the database.
func (tatc *TblAuthTokenCreate) Save(ctx context.Context) (*TblAuthToken, error) {
	tatc.defaults()
	return withHooks(ctx, tatc.sqlSave, tatc.mutation, tatc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tatc *TblAuthTokenCreate) SaveX(ctx context.Context) *TblAuthToken {
	v, err := tatc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tatc *TblAuthTokenCreate) Exec(ctx context.Context) error {
	_, err := tatc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tatc *TblAuthTokenCreate) ExecX(ctx context.Context) {
	if err := tatc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tatc *TblAuthTokenCreate) defaults() {
	if _, ok := tatc.mutation.Accesstokencreatedat(); !ok {
		v := tblauthtoken.DefaultAccesstokencreatedat
		tatc.mutation.SetAccesstokencreatedat(v)
	}
	if _, ok := tatc.mutation.Refreshtokencreatedat(); !ok {
		v := tblauthtoken.DefaultRefreshtokencreatedat
		tatc.mutation.SetRefreshtokencreatedat(v)
	}
	if _, ok := tatc.mutation.Createdat(); !ok {
		v := tblauthtoken.DefaultCreatedat
		tatc.mutation.SetCreatedat(v)
	}
	if _, ok := tatc.mutation.Updatedat(); !ok {
		v := tblauthtoken.DefaultUpdatedat
		tatc.mutation.SetUpdatedat(v)
	}
	if _, ok := tatc.mutation.IPAddress(); !ok {
		v := tblauthtoken.DefaultIPAddress
		tatc.mutation.SetIPAddress(v)
	}
	if _, ok := tatc.mutation.Useragent(); !ok {
		v := tblauthtoken.DefaultUseragent
		tatc.mutation.SetUseragent(v)
	}
	if _, ok := tatc.mutation.Createdby(); !ok {
		v := tblauthtoken.DefaultCreatedby
		tatc.mutation.SetCreatedby(v)
	}
	if _, ok := tatc.mutation.Updatedby(); !ok {
		v := tblauthtoken.DefaultUpdatedby
		tatc.mutation.SetUpdatedby(v)
	}
	if _, ok := tatc.mutation.Codecreatedat(); !ok {
		v := tblauthtoken.DefaultCodecreatedat
		tatc.mutation.SetCodecreatedat(v)
	}
	if _, ok := tatc.mutation.Scope(); !ok {
		v := tblauthtoken.DefaultScope
		tatc.mutation.SetScope(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tatc *TblAuthTokenCreate) check() error {
	if _, ok := tatc.mutation.AuthUUID(); !ok {
		return &ValidationError{Name: "auth_uuid", err: errors.New(`entgen: missing required field "TblAuthToken.auth_uuid"`)}
	}
	if _, ok := tatc.mutation.AuthXref(); !ok {
		return &ValidationError{Name: "auth_xref", err: errors.New(`entgen: missing required field "TblAuthToken.auth_xref"`)}
	}
	if _, ok := tatc.mutation.Accesstoken(); !ok {
		return &ValidationError{Name: "accesstoken", err: errors.New(`entgen: missing required field "TblAuthToken.accesstoken"`)}
	}
	if _, ok := tatc.mutation.Accesstokencreatedat(); !ok {
		return &ValidationError{Name: "accesstokencreatedat", err: errors.New(`entgen: missing required field "TblAuthToken.accesstokencreatedat"`)}
	}
	if _, ok := tatc.mutation.Accesstokenexpiresin(); !ok {
		return &ValidationError{Name: "accesstokenexpiresin", err: errors.New(`entgen: missing required field "TblAuthToken.accesstokenexpiresin"`)}
	}
	if _, ok := tatc.mutation.Refreshtoken(); !ok {
		return &ValidationError{Name: "refreshtoken", err: errors.New(`entgen: missing required field "TblAuthToken.refreshtoken"`)}
	}
	if _, ok := tatc.mutation.Refreshtokencreatedat(); !ok {
		return &ValidationError{Name: "refreshtokencreatedat", err: errors.New(`entgen: missing required field "TblAuthToken.refreshtokencreatedat"`)}
	}
	if _, ok := tatc.mutation.Refreshtokenexpiresin(); !ok {
		return &ValidationError{Name: "refreshtokenexpiresin", err: errors.New(`entgen: missing required field "TblAuthToken.refreshtokenexpiresin"`)}
	}
	if _, ok := tatc.mutation.Createdat(); !ok {
		return &ValidationError{Name: "createdat", err: errors.New(`entgen: missing required field "TblAuthToken.createdat"`)}
	}
	if _, ok := tatc.mutation.Updatedat(); !ok {
		return &ValidationError{Name: "updatedat", err: errors.New(`entgen: missing required field "TblAuthToken.updatedat"`)}
	}
	if _, ok := tatc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`entgen: missing required field "TblAuthToken.ip_address"`)}
	}
	if _, ok := tatc.mutation.Useragent(); !ok {
		return &ValidationError{Name: "useragent", err: errors.New(`entgen: missing required field "TblAuthToken.useragent"`)}
	}
	if _, ok := tatc.mutation.Createdby(); !ok {
		return &ValidationError{Name: "createdby", err: errors.New(`entgen: missing required field "TblAuthToken.createdby"`)}
	}
	if _, ok := tatc.mutation.Updatedby(); !ok {
		return &ValidationError{Name: "updatedby", err: errors.New(`entgen: missing required field "TblAuthToken.updatedby"`)}
	}
	if _, ok := tatc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`entgen: missing required field "TblAuthToken.code"`)}
	}
	if _, ok := tatc.mutation.Codecreatedat(); !ok {
		return &ValidationError{Name: "codecreatedat", err: errors.New(`entgen: missing required field "TblAuthToken.codecreatedat"`)}
	}
	if _, ok := tatc.mutation.Codeexpiresin(); !ok {
		return &ValidationError{Name: "codeexpiresin", err: errors.New(`entgen: missing required field "TblAuthToken.codeexpiresin"`)}
	}
	if _, ok := tatc.mutation.Scope(); !ok {
		return &ValidationError{Name: "scope", err: errors.New(`entgen: missing required field "TblAuthToken.scope"`)}
	}
	return nil
}

func (tatc *TblAuthTokenCreate) sqlSave(ctx context.Context) (*TblAuthToken, error) {
	if err := tatc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tatc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tatc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblAuthToken.ID type: %T", _spec.ID.Value)
		}
	}
	tatc.mutation.id = &_node.ID
	tatc.mutation.done = true
	return _node, nil
}

func (tatc *TblAuthTokenCreate) createSpec() (*TblAuthToken, *sqlgraph.CreateSpec) {
	var (
		_node = &TblAuthToken{config: tatc.config}
		_spec = sqlgraph.NewCreateSpec(tblauthtoken.Table, sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString))
	)
	_spec.OnConflict = tatc.conflict
	if id, ok := tatc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tatc.mutation.AuthUUID(); ok {
		_spec.SetField(tblauthtoken.FieldAuthUUID, field.TypeString, value)
		_node.AuthUUID = value
	}
	if value, ok := tatc.mutation.AuthXref(); ok {
		_spec.SetField(tblauthtoken.FieldAuthXref, field.TypeString, value)
		_node.AuthXref = value
	}
	if value, ok := tatc.mutation.Accesstoken(); ok {
		_spec.SetField(tblauthtoken.FieldAccesstoken, field.TypeString, value)
		_node.Accesstoken = value
	}
	if value, ok := tatc.mutation.Accesstokencreatedat(); ok {
		_spec.SetField(tblauthtoken.FieldAccesstokencreatedat, field.TypeTime, value)
		_node.Accesstokencreatedat = value
	}
	if value, ok := tatc.mutation.Accesstokenexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldAccesstokenexpiresin, field.TypeInt, value)
		_node.Accesstokenexpiresin = value
	}
	if value, ok := tatc.mutation.Refreshtoken(); ok {
		_spec.SetField(tblauthtoken.FieldRefreshtoken, field.TypeString, value)
		_node.Refreshtoken = value
	}
	if value, ok := tatc.mutation.Refreshtokencreatedat(); ok {
		_spec.SetField(tblauthtoken.FieldRefreshtokencreatedat, field.TypeTime, value)
		_node.Refreshtokencreatedat = value
	}
	if value, ok := tatc.mutation.Refreshtokenexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldRefreshtokenexpiresin, field.TypeInt, value)
		_node.Refreshtokenexpiresin = value
	}
	if value, ok := tatc.mutation.Createdat(); ok {
		_spec.SetField(tblauthtoken.FieldCreatedat, field.TypeTime, value)
		_node.Createdat = value
	}
	if value, ok := tatc.mutation.Updatedat(); ok {
		_spec.SetField(tblauthtoken.FieldUpdatedat, field.TypeTime, value)
		_node.Updatedat = value
	}
	if value, ok := tatc.mutation.Deletedat(); ok {
		_spec.SetField(tblauthtoken.FieldDeletedat, field.TypeTime, value)
		_node.Deletedat = &value
	}
	if value, ok := tatc.mutation.IPAddress(); ok {
		_spec.SetField(tblauthtoken.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := tatc.mutation.Useragent(); ok {
		_spec.SetField(tblauthtoken.FieldUseragent, field.TypeString, value)
		_node.Useragent = value
	}
	if value, ok := tatc.mutation.Createdby(); ok {
		_spec.SetField(tblauthtoken.FieldCreatedby, field.TypeString, value)
		_node.Createdby = value
	}
	if value, ok := tatc.mutation.Updatedby(); ok {
		_spec.SetField(tblauthtoken.FieldUpdatedby, field.TypeString, value)
		_node.Updatedby = value
	}
	if value, ok := tatc.mutation.Deletedby(); ok {
		_spec.SetField(tblauthtoken.FieldDeletedby, field.TypeString, value)
		_node.Deletedby = &value
	}
	if value, ok := tatc.mutation.Code(); ok {
		_spec.SetField(tblauthtoken.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := tatc.mutation.Codecreatedat(); ok {
		_spec.SetField(tblauthtoken.FieldCodecreatedat, field.TypeTime, value)
		_node.Codecreatedat = value
	}
	if value, ok := tatc.mutation.Codeexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldCodeexpiresin, field.TypeInt, value)
		_node.Codeexpiresin = value
	}
	if value, ok := tatc.mutation.Codechallenge(); ok {
		_spec.SetField(tblauthtoken.FieldCodechallenge, field.TypeString, value)
		_node.Codechallenge = &value
	}
	if value, ok := tatc.mutation.RedirectURI(); ok {
		_spec.SetField(tblauthtoken.FieldRedirectURI, field.TypeString, value)
		_node.RedirectURI = &value
	}
	if value, ok := tatc.mutation.Scope(); ok {
		_spec.SetField(tblauthtoken.FieldScope, field.TypeString, value)
		_node.Scope = value
	}
	if nodes := tatc.mutation.TokenClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenClientTable,
			Columns: []string{tblauthtoken.TokenClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.Clientid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tatc.mutation.TokenUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenUserTable,
			Columns: []string{tblauthtoken.TokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserUlid = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblAuthToken.Create().
//		SetAuthUUID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblAuthTokenUpsert) {
//			SetAuthUUID(v+v).
//		}).
//		Exec(ctx)
func (tatc *TblAuthTokenCreate) OnConflict(opts ...sql.ConflictOption) *TblAuthTokenUpsertOne {
	tatc.conflict = opts
	return &TblAuthTokenUpsertOne{
		create: tatc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblAuthToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tatc *TblAuthTokenCreate) OnConflictColumns(columns ...string) *TblAuthTokenUpsertOne {
	tatc.conflict = append(tatc.conflict, sql.ConflictColumns(columns...))
	return &TblAuthTokenUpsertOne{
		create: tatc,
	}
}

type (
	// TblAuthTokenUpsertOne is the builder for "upsert"-ing
	//  one TblAuthToken node.
	TblAuthTokenUpsertOne struct {
		create *TblAuthTokenCreate
	}

	// TblAuthTokenUpsert is the "OnConflict" setter.
	TblAuthTokenUpsert struct {
		*sql.UpdateSet
	}
)

// SetAuthUUID sets the "auth_uuid" field.
func (u *TblAuthTokenUpsert) SetAuthUUID(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldAuthUUID, v)
	return u
}

// UpdateAuthUUID sets the "auth_uuid" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateAuthUUID() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldAuthUUID)
	return u
}

// SetAuthXref sets the "auth_xref" field.
func (u *TblAuthTokenUpsert) SetAuthXref(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldAuthXref, v)
	return u
}

// UpdateAuthXref sets the "auth_xref" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateAuthXref() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldAuthXref)
	return u
}

// SetAccesstoken sets the "accesstoken" field.
func (u *TblAuthTokenUpsert) SetAccesstoken(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldAccesstoken, v)
	return u
}

// UpdateAccesstoken sets the "accesstoken" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateAccesstoken() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldAccesstoken)
	return u
}

// SetAccesstokenexpiresin sets the "accesstokenexpiresin" field.
func (u *TblAuthTokenUpsert) SetAccesstokenexpiresin(v int) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldAccesstokenexpiresin, v)
	return u
}

// UpdateAccesstokenexpiresin sets the "accesstokenexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateAccesstokenexpiresin() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldAccesstokenexpiresin)
	return u
}

// AddAccesstokenexpiresin adds v to the "accesstokenexpiresin" field.
func (u *TblAuthTokenUpsert) AddAccesstokenexpiresin(v int) *TblAuthTokenUpsert {
	u.Add(tblauthtoken.FieldAccesstokenexpiresin, v)
	return u
}

// SetClientid sets the "clientid" field.
func (u *TblAuthTokenUpsert) SetClientid(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldClientid, v)
	return u
}

// UpdateClientid sets the "clientid" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateClientid() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldClientid)
	return u
}

// ClearClientid clears the value of the "clientid" field.
func (u *TblAuthTokenUpsert) ClearClientid() *TblAuthTokenUpsert {
	u.SetNull(tblauthtoken.FieldClientid)
	return u
}

// SetUserUlid sets the "user_ulid" field.
func (u *TblAuthTokenUpsert) SetUserUlid(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldUserUlid, v)
	return u
}

// UpdateUserUlid sets the "user_ulid" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateUserUlid() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldUserUlid)
	return u
}

// ClearUserUlid clears the value of the "user_ulid" field.
func (u *TblAuthTokenUpsert) ClearUserUlid() *TblAuthTokenUpsert {
	u.SetNull(tblauthtoken.FieldUserUlid)
	return u
}

// SetRefreshtoken sets the "refreshtoken" field.
func (u *TblAuthTokenUpsert) SetRefreshtoken(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldRefreshtoken, v)
	return u
}

// UpdateRefreshtoken sets the "refreshtoken" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateRefreshtoken() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldRefreshtoken)
	return u
}

// SetRefreshtokenexpiresin sets the "refreshtokenexpiresin" field.
func (u *TblAuthTokenUpsert) SetRefreshtokenexpiresin(v int) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldRefreshtokenexpiresin, v)
	return u
}

// UpdateRefreshtokenexpiresin sets the "refreshtokenexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateRefreshtokenexpiresin() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldRefreshtokenexpiresin)
	return u
}

// AddRefreshtokenexpiresin adds v to the "refreshtokenexpiresin" field.
func (u *TblAuthTokenUpsert) AddRefreshtokenexpiresin(v int) *TblAuthTokenUpsert {
	u.Add(tblauthtoken.FieldRefreshtokenexpiresin, v)
	return u
}

// SetUpdatedat sets the "updatedat" field.
func (u *TblAuthTokenUpsert) SetUpdatedat(v time.Time) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldUpdatedat, v)
	return u
}

// UpdateUpdatedat sets the "updatedat" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateUpdatedat() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldUpdatedat)
	return u
}

// SetDeletedat sets the "deletedat" field.
func (u *TblAuthTokenUpsert) SetDeletedat(v time.Time) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldDeletedat, v)
	return u
}

// UpdateDeletedat sets the "deletedat" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateDeletedat() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldDeletedat)
	return u
}

// ClearDeletedat clears the value of the "deletedat" field.
func (u *TblAuthTokenUpsert) ClearDeletedat() *TblAuthTokenUpsert {
	u.SetNull(tblauthtoken.FieldDeletedat)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *TblAuthTokenUpsert) SetIPAddress(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateIPAddress() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldIPAddress)
	return u
}

// SetUseragent sets the "useragent" field.
func (u *TblAuthTokenUpsert) SetUseragent(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldUseragent, v)
	return u
}

// UpdateUseragent sets the "useragent" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateUseragent() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldUseragent)
	return u
}

// SetCreatedby sets the "createdby" field.
func (u *TblAuthTokenUpsert) SetCreatedby(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldCreatedby, v)
	return u
}

// UpdateCreatedby sets the "createdby" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateCreatedby() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldCreatedby)
	return u
}

// SetUpdatedby sets the "updatedby" field.
func (u *TblAuthTokenUpsert) SetUpdatedby(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldUpdatedby, v)
	return u
}

// UpdateUpdatedby sets the "updatedby" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateUpdatedby() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldUpdatedby)
	return u
}

// SetDeletedby sets the "deletedby" field.
func (u *TblAuthTokenUpsert) SetDeletedby(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldDeletedby, v)
	return u
}

// UpdateDeletedby sets the "deletedby" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateDeletedby() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldDeletedby)
	return u
}

// ClearDeletedby clears the value of the "deletedby" field.
func (u *TblAuthTokenUpsert) ClearDeletedby() *TblAuthTokenUpsert {
	u.SetNull(tblauthtoken.FieldDeletedby)
	return u
}

// SetCode sets the "code" field.
func (u *TblAuthTokenUpsert) SetCode(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateCode() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldCode)
	return u
}

// SetCodeexpiresin sets the "codeexpiresin" field.
func (u *TblAuthTokenUpsert) SetCodeexpiresin(v int) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldCodeexpiresin, v)
	return u
}

// UpdateCodeexpiresin sets the "codeexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateCodeexpiresin() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldCodeexpiresin)
	return u
}

// AddCodeexpiresin adds v to the "codeexpiresin" field.
func (u *TblAuthTokenUpsert) AddCodeexpiresin(v int) *TblAuthTokenUpsert {
	u.Add(tblauthtoken.FieldCodeexpiresin, v)
	return u
}

// SetCodechallenge sets the "codechallenge" field.
func (u *TblAuthTokenUpsert) SetCodechallenge(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldCodechallenge, v)
	return u
}

// UpdateCodechallenge sets the "codechallenge" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateCodechallenge() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldCodechallenge)
	return u
}

// ClearCodechallenge clears the value of the "codechallenge" field.
func (u *TblAuthTokenUpsert) ClearCodechallenge() *TblAuthTokenUpsert {
	u.SetNull(tblauthtoken.FieldCodechallenge)
	return u
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *TblAuthTokenUpsert) SetRedirectURI(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldRedirectURI, v)
	return u
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateRedirectURI() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldRedirectURI)
	return u
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *TblAuthTokenUpsert) ClearRedirectURI() *TblAuthTokenUpsert {
	u.SetNull(tblauthtoken.FieldRedirectURI)
	return u
}

// SetScope sets the "scope" field.
func (u *TblAuthTokenUpsert) SetScope(v string) *TblAuthTokenUpsert {
	u.Set(tblauthtoken.FieldScope, v)
	return u
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *TblAuthTokenUpsert) UpdateScope() *TblAuthTokenUpsert {
	u.SetExcluded(tblauthtoken.FieldScope)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblAuthToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblauthtoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblAuthTokenUpsertOne) UpdateNewValues() *TblAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tblauthtoken.FieldID)
		}
		if _, exists := u.create.mutation.Accesstokencreatedat(); exists {
			s.SetIgnore(tblauthtoken.FieldAccesstokencreatedat)
		}
		if _, exists := u.create.mutation.Refreshtokencreatedat(); exists {
			s.SetIgnore(tblauthtoken.FieldRefreshtokencreatedat)
		}
		if _, exists := u.create.mutation.Createdat(); exists {
			s.SetIgnore(tblauthtoken.FieldCreatedat)
		}
		if _, exists := u.create.mutation.Codecreatedat(); exists {
			s.SetIgnore(tblauthtoken.FieldCodecreatedat)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblAuthToken.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblAuthTokenUpsertOne) Ignore() *TblAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblAuthTokenUpsertOne) DoNothing() *TblAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblAuthTokenCreate.OnConflict
// documentation for more info.
func (u *TblAuthTokenUpsertOne) Update(set func(*TblAuthTokenUpsert)) *TblAuthTokenUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblAuthTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetAuthUUID sets the "auth_uuid" field.
func (u *TblAuthTokenUpsertOne) SetAuthUUID(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAuthUUID(v)
	})
}

// UpdateAuthUUID sets the "auth_uuid" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateAuthUUID() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAuthUUID()
	})
}

// SetAuthXref sets the "auth_xref" field.
func (u *TblAuthTokenUpsertOne) SetAuthXref(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAuthXref(v)
	})
}

// UpdateAuthXref sets the "auth_xref" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateAuthXref() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAuthXref()
	})
}

// SetAccesstoken sets the "accesstoken" field.
func (u *TblAuthTokenUpsertOne) SetAccesstoken(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAccesstoken(v)
	})
}

// UpdateAccesstoken sets the "accesstoken" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateAccesstoken() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAccesstoken()
	})
}

// SetAccesstokenexpiresin sets the "accesstokenexpiresin" field.
func (u *TblAuthTokenUpsertOne) SetAccesstokenexpiresin(v int) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAccesstokenexpiresin(v)
	})
}

// AddAccesstokenexpiresin adds v to the "accesstokenexpiresin" field.
func (u *TblAuthTokenUpsertOne) AddAccesstokenexpiresin(v int) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.AddAccesstokenexpiresin(v)
	})
}

// UpdateAccesstokenexpiresin sets the "accesstokenexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateAccesstokenexpiresin() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAccesstokenexpiresin()
	})
}

// SetClientid sets the "clientid" field.
func (u *TblAuthTokenUpsertOne) SetClientid(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetClientid(v)
	})
}

// UpdateClientid sets the "clientid" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateClientid() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateClientid()
	})
}

// ClearClientid clears the value of the "clientid" field.
func (u *TblAuthTokenUpsertOne) ClearClientid() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearClientid()
	})
}

// SetUserUlid sets the "user_ulid" field.
func (u *TblAuthTokenUpsertOne) SetUserUlid(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUserUlid(v)
	})
}

// UpdateUserUlid sets the "user_ulid" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateUserUlid() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUserUlid()
	})
}

// ClearUserUlid clears the value of the "user_ulid" field.
func (u *TblAuthTokenUpsertOne) ClearUserUlid() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearUserUlid()
	})
}

// SetRefreshtoken sets the "refreshtoken" field.
func (u *TblAuthTokenUpsertOne) SetRefreshtoken(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetRefreshtoken(v)
	})
}

// UpdateRefreshtoken sets the "refreshtoken" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateRefreshtoken() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateRefreshtoken()
	})
}

// SetRefreshtokenexpiresin sets the "refreshtokenexpiresin" field.
func (u *TblAuthTokenUpsertOne) SetRefreshtokenexpiresin(v int) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetRefreshtokenexpiresin(v)
	})
}

// AddRefreshtokenexpiresin adds v to the "refreshtokenexpiresin" field.
func (u *TblAuthTokenUpsertOne) AddRefreshtokenexpiresin(v int) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.AddRefreshtokenexpiresin(v)
	})
}

// UpdateRefreshtokenexpiresin sets the "refreshtokenexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateRefreshtokenexpiresin() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateRefreshtokenexpiresin()
	})
}

// SetUpdatedat sets the "updatedat" field.
func (u *TblAuthTokenUpsertOne) SetUpdatedat(v time.Time) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUpdatedat(v)
	})
}

// UpdateUpdatedat sets the "updatedat" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateUpdatedat() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUpdatedat()
	})
}

// SetDeletedat sets the "deletedat" field.
func (u *TblAuthTokenUpsertOne) SetDeletedat(v time.Time) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetDeletedat(v)
	})
}

// UpdateDeletedat sets the "deletedat" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateDeletedat() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateDeletedat()
	})
}

// ClearDeletedat clears the value of the "deletedat" field.
func (u *TblAuthTokenUpsertOne) ClearDeletedat() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearDeletedat()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *TblAuthTokenUpsertOne) SetIPAddress(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateIPAddress() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateIPAddress()
	})
}

// SetUseragent sets the "useragent" field.
func (u *TblAuthTokenUpsertOne) SetUseragent(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUseragent(v)
	})
}

// UpdateUseragent sets the "useragent" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateUseragent() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUseragent()
	})
}

// SetCreatedby sets the "createdby" field.
func (u *TblAuthTokenUpsertOne) SetCreatedby(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCreatedby(v)
	})
}

// UpdateCreatedby sets the "createdby" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateCreatedby() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCreatedby()
	})
}

// SetUpdatedby sets the "updatedby" field.
func (u *TblAuthTokenUpsertOne) SetUpdatedby(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUpdatedby(v)
	})
}

// UpdateUpdatedby sets the "updatedby" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateUpdatedby() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUpdatedby()
	})
}

// SetDeletedby sets the "deletedby" field.
func (u *TblAuthTokenUpsertOne) SetDeletedby(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetDeletedby(v)
	})
}

// UpdateDeletedby sets the "deletedby" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateDeletedby() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateDeletedby()
	})
}

// ClearDeletedby clears the value of the "deletedby" field.
func (u *TblAuthTokenUpsertOne) ClearDeletedby() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearDeletedby()
	})
}

// SetCode sets the "code" field.
func (u *TblAuthTokenUpsertOne) SetCode(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateCode() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCode()
	})
}

// SetCodeexpiresin sets the "codeexpiresin" field.
func (u *TblAuthTokenUpsertOne) SetCodeexpiresin(v int) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCodeexpiresin(v)
	})
}

// AddCodeexpiresin adds v to the "codeexpiresin" field.
func (u *TblAuthTokenUpsertOne) AddCodeexpiresin(v int) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.AddCodeexpiresin(v)
	})
}

// UpdateCodeexpiresin sets the "codeexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateCodeexpiresin() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCodeexpiresin()
	})
}

// SetCodechallenge sets the "codechallenge" field.
func (u *TblAuthTokenUpsertOne) SetCodechallenge(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCodechallenge(v)
	})
}

// UpdateCodechallenge sets the "codechallenge" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateCodechallenge() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCodechallenge()
	})
}

// ClearCodechallenge clears the value of the "codechallenge" field.
func (u *TblAuthTokenUpsertOne) ClearCodechallenge() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearCodechallenge()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *TblAuthTokenUpsertOne) SetRedirectURI(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateRedirectURI() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *TblAuthTokenUpsertOne) ClearRedirectURI() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearRedirectURI()
	})
}

// SetScope sets the "scope" field.
func (u *TblAuthTokenUpsertOne) SetScope(v string) *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *TblAuthTokenUpsertOne) UpdateScope() *TblAuthTokenUpsertOne {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateScope()
	})
}

// Exec executes the query.
func (u *TblAuthTokenUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblAuthTokenCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblAuthTokenUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblAuthTokenUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblAuthTokenUpsertOne.ID is not supported by MySQL driver. Use TblAuthTokenUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblAuthTokenUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblAuthTokenCreateBulk is the builder for creating many TblAuthToken entities in bulk.
type TblAuthTokenCreateBulk struct {
	config
	err      error
	builders []*TblAuthTokenCreate
	conflict []sql.ConflictOption
}

// Save creates the TblAuthToken entities in the database.
func (tatcb *TblAuthTokenCreateBulk) Save(ctx context.Context) ([]*TblAuthToken, error) {
	if tatcb.err != nil {
		return nil, tatcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tatcb.builders))
	nodes := make([]*TblAuthToken, len(tatcb.builders))
	mutators := make([]Mutator, len(tatcb.builders))
	for i := range tatcb.builders {
		func(i int, root context.Context) {
			builder := tatcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblAuthTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tatcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tatcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tatcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tatcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tatcb *TblAuthTokenCreateBulk) SaveX(ctx context.Context) []*TblAuthToken {
	v, err := tatcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tatcb *TblAuthTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := tatcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tatcb *TblAuthTokenCreateBulk) ExecX(ctx context.Context) {
	if err := tatcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblAuthToken.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblAuthTokenUpsert) {
//			SetAuthUUID(v+v).
//		}).
//		Exec(ctx)
func (tatcb *TblAuthTokenCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblAuthTokenUpsertBulk {
	tatcb.conflict = opts
	return &TblAuthTokenUpsertBulk{
		create: tatcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblAuthToken.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tatcb *TblAuthTokenCreateBulk) OnConflictColumns(columns ...string) *TblAuthTokenUpsertBulk {
	tatcb.conflict = append(tatcb.conflict, sql.ConflictColumns(columns...))
	return &TblAuthTokenUpsertBulk{
		create: tatcb,
	}
}

// TblAuthTokenUpsertBulk is the builder for "upsert"-ing
// a bulk of TblAuthToken nodes.
type TblAuthTokenUpsertBulk struct {
	create *TblAuthTokenCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblAuthToken.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblauthtoken.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblAuthTokenUpsertBulk) UpdateNewValues() *TblAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tblauthtoken.FieldID)
			}
			if _, exists := b.mutation.Accesstokencreatedat(); exists {
				s.SetIgnore(tblauthtoken.FieldAccesstokencreatedat)
			}
			if _, exists := b.mutation.Refreshtokencreatedat(); exists {
				s.SetIgnore(tblauthtoken.FieldRefreshtokencreatedat)
			}
			if _, exists := b.mutation.Createdat(); exists {
				s.SetIgnore(tblauthtoken.FieldCreatedat)
			}
			if _, exists := b.mutation.Codecreatedat(); exists {
				s.SetIgnore(tblauthtoken.FieldCodecreatedat)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblAuthToken.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblAuthTokenUpsertBulk) Ignore() *TblAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblAuthTokenUpsertBulk) DoNothing() *TblAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblAuthTokenCreateBulk.OnConflict
// documentation for more info.
func (u *TblAuthTokenUpsertBulk) Update(set func(*TblAuthTokenUpsert)) *TblAuthTokenUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblAuthTokenUpsert{UpdateSet: update})
	}))
	return u
}

// SetAuthUUID sets the "auth_uuid" field.
func (u *TblAuthTokenUpsertBulk) SetAuthUUID(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAuthUUID(v)
	})
}

// UpdateAuthUUID sets the "auth_uuid" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateAuthUUID() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAuthUUID()
	})
}

// SetAuthXref sets the "auth_xref" field.
func (u *TblAuthTokenUpsertBulk) SetAuthXref(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAuthXref(v)
	})
}

// UpdateAuthXref sets the "auth_xref" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateAuthXref() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAuthXref()
	})
}

// SetAccesstoken sets the "accesstoken" field.
func (u *TblAuthTokenUpsertBulk) SetAccesstoken(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAccesstoken(v)
	})
}

// UpdateAccesstoken sets the "accesstoken" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateAccesstoken() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAccesstoken()
	})
}

// SetAccesstokenexpiresin sets the "accesstokenexpiresin" field.
func (u *TblAuthTokenUpsertBulk) SetAccesstokenexpiresin(v int) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetAccesstokenexpiresin(v)
	})
}

// AddAccesstokenexpiresin adds v to the "accesstokenexpiresin" field.
func (u *TblAuthTokenUpsertBulk) AddAccesstokenexpiresin(v int) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.AddAccesstokenexpiresin(v)
	})
}

// UpdateAccesstokenexpiresin sets the "accesstokenexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateAccesstokenexpiresin() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateAccesstokenexpiresin()
	})
}

// SetClientid sets the "clientid" field.
func (u *TblAuthTokenUpsertBulk) SetClientid(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetClientid(v)
	})
}

// UpdateClientid sets the "clientid" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateClientid() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateClientid()
	})
}

// ClearClientid clears the value of the "clientid" field.
func (u *TblAuthTokenUpsertBulk) ClearClientid() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearClientid()
	})
}

// SetUserUlid sets the "user_ulid" field.
func (u *TblAuthTokenUpsertBulk) SetUserUlid(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUserUlid(v)
	})
}

// UpdateUserUlid sets the "user_ulid" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateUserUlid() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUserUlid()
	})
}

// ClearUserUlid clears the value of the "user_ulid" field.
func (u *TblAuthTokenUpsertBulk) ClearUserUlid() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearUserUlid()
	})
}

// SetRefreshtoken sets the "refreshtoken" field.
func (u *TblAuthTokenUpsertBulk) SetRefreshtoken(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetRefreshtoken(v)
	})
}

// UpdateRefreshtoken sets the "refreshtoken" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateRefreshtoken() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateRefreshtoken()
	})
}

// SetRefreshtokenexpiresin sets the "refreshtokenexpiresin" field.
func (u *TblAuthTokenUpsertBulk) SetRefreshtokenexpiresin(v int) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetRefreshtokenexpiresin(v)
	})
}

// AddRefreshtokenexpiresin adds v to the "refreshtokenexpiresin" field.
func (u *TblAuthTokenUpsertBulk) AddRefreshtokenexpiresin(v int) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.AddRefreshtokenexpiresin(v)
	})
}

// UpdateRefreshtokenexpiresin sets the "refreshtokenexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateRefreshtokenexpiresin() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateRefreshtokenexpiresin()
	})
}

// SetUpdatedat sets the "updatedat" field.
func (u *TblAuthTokenUpsertBulk) SetUpdatedat(v time.Time) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUpdatedat(v)
	})
}

// UpdateUpdatedat sets the "updatedat" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateUpdatedat() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUpdatedat()
	})
}

// SetDeletedat sets the "deletedat" field.
func (u *TblAuthTokenUpsertBulk) SetDeletedat(v time.Time) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetDeletedat(v)
	})
}

// UpdateDeletedat sets the "deletedat" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateDeletedat() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateDeletedat()
	})
}

// ClearDeletedat clears the value of the "deletedat" field.
func (u *TblAuthTokenUpsertBulk) ClearDeletedat() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearDeletedat()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *TblAuthTokenUpsertBulk) SetIPAddress(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateIPAddress() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateIPAddress()
	})
}

// SetUseragent sets the "useragent" field.
func (u *TblAuthTokenUpsertBulk) SetUseragent(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUseragent(v)
	})
}

// UpdateUseragent sets the "useragent" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateUseragent() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUseragent()
	})
}

// SetCreatedby sets the "createdby" field.
func (u *TblAuthTokenUpsertBulk) SetCreatedby(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCreatedby(v)
	})
}

// UpdateCreatedby sets the "createdby" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateCreatedby() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCreatedby()
	})
}

// SetUpdatedby sets the "updatedby" field.
func (u *TblAuthTokenUpsertBulk) SetUpdatedby(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetUpdatedby(v)
	})
}

// UpdateUpdatedby sets the "updatedby" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateUpdatedby() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateUpdatedby()
	})
}

// SetDeletedby sets the "deletedby" field.
func (u *TblAuthTokenUpsertBulk) SetDeletedby(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetDeletedby(v)
	})
}

// UpdateDeletedby sets the "deletedby" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateDeletedby() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateDeletedby()
	})
}

// ClearDeletedby clears the value of the "deletedby" field.
func (u *TblAuthTokenUpsertBulk) ClearDeletedby() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearDeletedby()
	})
}

// SetCode sets the "code" field.
func (u *TblAuthTokenUpsertBulk) SetCode(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateCode() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCode()
	})
}

// SetCodeexpiresin sets the "codeexpiresin" field.
func (u *TblAuthTokenUpsertBulk) SetCodeexpiresin(v int) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCodeexpiresin(v)
	})
}

// AddCodeexpiresin adds v to the "codeexpiresin" field.
func (u *TblAuthTokenUpsertBulk) AddCodeexpiresin(v int) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.AddCodeexpiresin(v)
	})
}

// UpdateCodeexpiresin sets the "codeexpiresin" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateCodeexpiresin() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCodeexpiresin()
	})
}

// SetCodechallenge sets the "codechallenge" field.
func (u *TblAuthTokenUpsertBulk) SetCodechallenge(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetCodechallenge(v)
	})
}

// UpdateCodechallenge sets the "codechallenge" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateCodechallenge() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateCodechallenge()
	})
}

// ClearCodechallenge clears the value of the "codechallenge" field.
func (u *TblAuthTokenUpsertBulk) ClearCodechallenge() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearCodechallenge()
	})
}

// SetRedirectURI sets the "redirect_uri" field.
func (u *TblAuthTokenUpsertBulk) SetRedirectURI(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetRedirectURI(v)
	})
}

// UpdateRedirectURI sets the "redirect_uri" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateRedirectURI() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateRedirectURI()
	})
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (u *TblAuthTokenUpsertBulk) ClearRedirectURI() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.ClearRedirectURI()
	})
}

// SetScope sets the "scope" field.
func (u *TblAuthTokenUpsertBulk) SetScope(v string) *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.SetScope(v)
	})
}

// UpdateScope sets the "scope" field to the value that was provided on create.
func (u *TblAuthTokenUpsertBulk) UpdateScope() *TblAuthTokenUpsertBulk {
	return u.Update(func(s *TblAuthTokenUpsert) {
		s.UpdateScope()
	})
}

// Exec executes the query.
func (u *TblAuthTokenUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblAuthTokenCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblAuthTokenCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblAuthTokenUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
