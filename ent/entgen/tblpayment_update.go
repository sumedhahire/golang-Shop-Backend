// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblpayment"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblPaymentUpdate is the builder for updating TblPayment entities.
type TblPaymentUpdate struct {
	config
	hooks    []Hook
	mutation *TblPaymentMutation
}

// Where appends a list predicates to the TblPaymentUpdate builder.
func (tpu *TblPaymentUpdate) Where(ps ...predicate.TblPayment) *TblPaymentUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetInventoryId sets the "InventoryId" field.
func (tpu *TblPaymentUpdate) SetInventoryId(s string) *TblPaymentUpdate {
	tpu.mutation.SetInventoryId(s)
	return tpu
}

// SetNillableInventoryId sets the "InventoryId" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableInventoryId(s *string) *TblPaymentUpdate {
	if s != nil {
		tpu.SetInventoryId(*s)
	}
	return tpu
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (tpu *TblPaymentUpdate) ClearInventoryId() *TblPaymentUpdate {
	tpu.mutation.ClearInventoryId()
	return tpu
}

// SetUserId sets the "UserId" field.
func (tpu *TblPaymentUpdate) SetUserId(s string) *TblPaymentUpdate {
	tpu.mutation.SetUserId(s)
	return tpu
}

// SetNillableUserId sets the "UserId" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableUserId(s *string) *TblPaymentUpdate {
	if s != nil {
		tpu.SetUserId(*s)
	}
	return tpu
}

// ClearUserId clears the value of the "UserId" field.
func (tpu *TblPaymentUpdate) ClearUserId() *TblPaymentUpdate {
	tpu.mutation.ClearUserId()
	return tpu
}

// SetStatus sets the "Status" field.
func (tpu *TblPaymentUpdate) SetStatus(s string) *TblPaymentUpdate {
	tpu.mutation.SetStatus(s)
	return tpu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableStatus(s *string) *TblPaymentUpdate {
	if s != nil {
		tpu.SetStatus(*s)
	}
	return tpu
}

// SetRazorpayOrderId sets the "RazorpayOrderId" field.
func (tpu *TblPaymentUpdate) SetRazorpayOrderId(s string) *TblPaymentUpdate {
	tpu.mutation.SetRazorpayOrderId(s)
	return tpu
}

// SetNillableRazorpayOrderId sets the "RazorpayOrderId" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableRazorpayOrderId(s *string) *TblPaymentUpdate {
	if s != nil {
		tpu.SetRazorpayOrderId(*s)
	}
	return tpu
}

// SetAmount sets the "Amount" field.
func (tpu *TblPaymentUpdate) SetAmount(f float32) *TblPaymentUpdate {
	tpu.mutation.ResetAmount()
	tpu.mutation.SetAmount(f)
	return tpu
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableAmount(f *float32) *TblPaymentUpdate {
	if f != nil {
		tpu.SetAmount(*f)
	}
	return tpu
}

// AddAmount adds f to the "Amount" field.
func (tpu *TblPaymentUpdate) AddAmount(f float32) *TblPaymentUpdate {
	tpu.mutation.AddAmount(f)
	return tpu
}

// SetCreatedAt sets the "Created_at" field.
func (tpu *TblPaymentUpdate) SetCreatedAt(t time.Time) *TblPaymentUpdate {
	tpu.mutation.SetCreatedAt(t)
	return tpu
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableCreatedAt(t *time.Time) *TblPaymentUpdate {
	if t != nil {
		tpu.SetCreatedAt(*t)
	}
	return tpu
}

// SetUpdatedAt sets the "Updated_at" field.
func (tpu *TblPaymentUpdate) SetUpdatedAt(t time.Time) *TblPaymentUpdate {
	tpu.mutation.SetUpdatedAt(t)
	return tpu
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableUpdatedAt(t *time.Time) *TblPaymentUpdate {
	if t != nil {
		tpu.SetUpdatedAt(*t)
	}
	return tpu
}

// SetDeletedAt sets the "Deleted_at" field.
func (tpu *TblPaymentUpdate) SetDeletedAt(t time.Time) *TblPaymentUpdate {
	tpu.mutation.SetDeletedAt(t)
	return tpu
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableDeletedAt(t *time.Time) *TblPaymentUpdate {
	if t != nil {
		tpu.SetDeletedAt(*t)
	}
	return tpu
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (tpu *TblPaymentUpdate) ClearDeletedAt() *TblPaymentUpdate {
	tpu.mutation.ClearDeletedAt()
	return tpu
}

// SetInventoryID sets the "Inventory" edge to the TblInventory entity by ID.
func (tpu *TblPaymentUpdate) SetInventoryID(id string) *TblPaymentUpdate {
	tpu.mutation.SetInventoryID(id)
	return tpu
}

// SetNillableInventoryID sets the "Inventory" edge to the TblInventory entity by ID if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableInventoryID(id *string) *TblPaymentUpdate {
	if id != nil {
		tpu = tpu.SetInventoryID(*id)
	}
	return tpu
}

// SetInventory sets the "Inventory" edge to the TblInventory entity.
func (tpu *TblPaymentUpdate) SetInventory(t *TblInventory) *TblPaymentUpdate {
	return tpu.SetInventoryID(t.ID)
}

// SetUserID sets the "User" edge to the TblUser entity by ID.
func (tpu *TblPaymentUpdate) SetUserID(id string) *TblPaymentUpdate {
	tpu.mutation.SetUserID(id)
	return tpu
}

// SetNillableUserID sets the "User" edge to the TblUser entity by ID if the given value is not nil.
func (tpu *TblPaymentUpdate) SetNillableUserID(id *string) *TblPaymentUpdate {
	if id != nil {
		tpu = tpu.SetUserID(*id)
	}
	return tpu
}

// SetUser sets the "User" edge to the TblUser entity.
func (tpu *TblPaymentUpdate) SetUser(t *TblUser) *TblPaymentUpdate {
	return tpu.SetUserID(t.ID)
}

// Mutation returns the TblPaymentMutation object of the builder.
func (tpu *TblPaymentUpdate) Mutation() *TblPaymentMutation {
	return tpu.mutation
}

// ClearInventory clears the "Inventory" edge to the TblInventory entity.
func (tpu *TblPaymentUpdate) ClearInventory() *TblPaymentUpdate {
	tpu.mutation.ClearInventory()
	return tpu
}

// ClearUser clears the "User" edge to the TblUser entity.
func (tpu *TblPaymentUpdate) ClearUser() *TblPaymentUpdate {
	tpu.mutation.ClearUser()
	return tpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TblPaymentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TblPaymentUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TblPaymentUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TblPaymentUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpu *TblPaymentUpdate) check() error {
	if v, ok := tpu.mutation.RazorpayOrderId(); ok {
		if err := tblpayment.RazorpayOrderIdValidator(v); err != nil {
			return &ValidationError{Name: "RazorpayOrderId", err: fmt.Errorf(`entgen: validator failed for field "TblPayment.RazorpayOrderId": %w`, err)}
		}
	}
	return nil
}

func (tpu *TblPaymentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblpayment.Table, tblpayment.Columns, sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Status(); ok {
		_spec.SetField(tblpayment.FieldStatus, field.TypeString, value)
	}
	if value, ok := tpu.mutation.RazorpayOrderId(); ok {
		_spec.SetField(tblpayment.FieldRazorpayOrderId, field.TypeString, value)
	}
	if value, ok := tpu.mutation.Amount(); ok {
		_spec.SetField(tblpayment.FieldAmount, field.TypeFloat32, value)
	}
	if value, ok := tpu.mutation.AddedAmount(); ok {
		_spec.AddField(tblpayment.FieldAmount, field.TypeFloat32, value)
	}
	if value, ok := tpu.mutation.CreatedAt(); ok {
		_spec.SetField(tblpayment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tpu.mutation.UpdatedAt(); ok {
		_spec.SetField(tblpayment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tpu.mutation.DeletedAt(); ok {
		_spec.SetField(tblpayment.FieldDeletedAt, field.TypeTime, value)
	}
	if tpu.mutation.DeletedAtCleared() {
		_spec.ClearField(tblpayment.FieldDeletedAt, field.TypeTime)
	}
	if tpu.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.InventoryTable,
			Columns: []string{tblpayment.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.InventoryTable,
			Columns: []string{tblpayment.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.UserTable,
			Columns: []string{tblpayment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.UserTable,
			Columns: []string{tblpayment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblpayment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TblPaymentUpdateOne is the builder for updating a single TblPayment entity.
type TblPaymentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblPaymentMutation
}

// SetInventoryId sets the "InventoryId" field.
func (tpuo *TblPaymentUpdateOne) SetInventoryId(s string) *TblPaymentUpdateOne {
	tpuo.mutation.SetInventoryId(s)
	return tpuo
}

// SetNillableInventoryId sets the "InventoryId" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableInventoryId(s *string) *TblPaymentUpdateOne {
	if s != nil {
		tpuo.SetInventoryId(*s)
	}
	return tpuo
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (tpuo *TblPaymentUpdateOne) ClearInventoryId() *TblPaymentUpdateOne {
	tpuo.mutation.ClearInventoryId()
	return tpuo
}

// SetUserId sets the "UserId" field.
func (tpuo *TblPaymentUpdateOne) SetUserId(s string) *TblPaymentUpdateOne {
	tpuo.mutation.SetUserId(s)
	return tpuo
}

// SetNillableUserId sets the "UserId" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableUserId(s *string) *TblPaymentUpdateOne {
	if s != nil {
		tpuo.SetUserId(*s)
	}
	return tpuo
}

// ClearUserId clears the value of the "UserId" field.
func (tpuo *TblPaymentUpdateOne) ClearUserId() *TblPaymentUpdateOne {
	tpuo.mutation.ClearUserId()
	return tpuo
}

// SetStatus sets the "Status" field.
func (tpuo *TblPaymentUpdateOne) SetStatus(s string) *TblPaymentUpdateOne {
	tpuo.mutation.SetStatus(s)
	return tpuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableStatus(s *string) *TblPaymentUpdateOne {
	if s != nil {
		tpuo.SetStatus(*s)
	}
	return tpuo
}

// SetRazorpayOrderId sets the "RazorpayOrderId" field.
func (tpuo *TblPaymentUpdateOne) SetRazorpayOrderId(s string) *TblPaymentUpdateOne {
	tpuo.mutation.SetRazorpayOrderId(s)
	return tpuo
}

// SetNillableRazorpayOrderId sets the "RazorpayOrderId" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableRazorpayOrderId(s *string) *TblPaymentUpdateOne {
	if s != nil {
		tpuo.SetRazorpayOrderId(*s)
	}
	return tpuo
}

// SetAmount sets the "Amount" field.
func (tpuo *TblPaymentUpdateOne) SetAmount(f float32) *TblPaymentUpdateOne {
	tpuo.mutation.ResetAmount()
	tpuo.mutation.SetAmount(f)
	return tpuo
}

// SetNillableAmount sets the "Amount" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableAmount(f *float32) *TblPaymentUpdateOne {
	if f != nil {
		tpuo.SetAmount(*f)
	}
	return tpuo
}

// AddAmount adds f to the "Amount" field.
func (tpuo *TblPaymentUpdateOne) AddAmount(f float32) *TblPaymentUpdateOne {
	tpuo.mutation.AddAmount(f)
	return tpuo
}

// SetCreatedAt sets the "Created_at" field.
func (tpuo *TblPaymentUpdateOne) SetCreatedAt(t time.Time) *TblPaymentUpdateOne {
	tpuo.mutation.SetCreatedAt(t)
	return tpuo
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableCreatedAt(t *time.Time) *TblPaymentUpdateOne {
	if t != nil {
		tpuo.SetCreatedAt(*t)
	}
	return tpuo
}

// SetUpdatedAt sets the "Updated_at" field.
func (tpuo *TblPaymentUpdateOne) SetUpdatedAt(t time.Time) *TblPaymentUpdateOne {
	tpuo.mutation.SetUpdatedAt(t)
	return tpuo
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableUpdatedAt(t *time.Time) *TblPaymentUpdateOne {
	if t != nil {
		tpuo.SetUpdatedAt(*t)
	}
	return tpuo
}

// SetDeletedAt sets the "Deleted_at" field.
func (tpuo *TblPaymentUpdateOne) SetDeletedAt(t time.Time) *TblPaymentUpdateOne {
	tpuo.mutation.SetDeletedAt(t)
	return tpuo
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableDeletedAt(t *time.Time) *TblPaymentUpdateOne {
	if t != nil {
		tpuo.SetDeletedAt(*t)
	}
	return tpuo
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (tpuo *TblPaymentUpdateOne) ClearDeletedAt() *TblPaymentUpdateOne {
	tpuo.mutation.ClearDeletedAt()
	return tpuo
}

// SetInventoryID sets the "Inventory" edge to the TblInventory entity by ID.
func (tpuo *TblPaymentUpdateOne) SetInventoryID(id string) *TblPaymentUpdateOne {
	tpuo.mutation.SetInventoryID(id)
	return tpuo
}

// SetNillableInventoryID sets the "Inventory" edge to the TblInventory entity by ID if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableInventoryID(id *string) *TblPaymentUpdateOne {
	if id != nil {
		tpuo = tpuo.SetInventoryID(*id)
	}
	return tpuo
}

// SetInventory sets the "Inventory" edge to the TblInventory entity.
func (tpuo *TblPaymentUpdateOne) SetInventory(t *TblInventory) *TblPaymentUpdateOne {
	return tpuo.SetInventoryID(t.ID)
}

// SetUserID sets the "User" edge to the TblUser entity by ID.
func (tpuo *TblPaymentUpdateOne) SetUserID(id string) *TblPaymentUpdateOne {
	tpuo.mutation.SetUserID(id)
	return tpuo
}

// SetNillableUserID sets the "User" edge to the TblUser entity by ID if the given value is not nil.
func (tpuo *TblPaymentUpdateOne) SetNillableUserID(id *string) *TblPaymentUpdateOne {
	if id != nil {
		tpuo = tpuo.SetUserID(*id)
	}
	return tpuo
}

// SetUser sets the "User" edge to the TblUser entity.
func (tpuo *TblPaymentUpdateOne) SetUser(t *TblUser) *TblPaymentUpdateOne {
	return tpuo.SetUserID(t.ID)
}

// Mutation returns the TblPaymentMutation object of the builder.
func (tpuo *TblPaymentUpdateOne) Mutation() *TblPaymentMutation {
	return tpuo.mutation
}

// ClearInventory clears the "Inventory" edge to the TblInventory entity.
func (tpuo *TblPaymentUpdateOne) ClearInventory() *TblPaymentUpdateOne {
	tpuo.mutation.ClearInventory()
	return tpuo
}

// ClearUser clears the "User" edge to the TblUser entity.
func (tpuo *TblPaymentUpdateOne) ClearUser() *TblPaymentUpdateOne {
	tpuo.mutation.ClearUser()
	return tpuo
}

// Where appends a list predicates to the TblPaymentUpdate builder.
func (tpuo *TblPaymentUpdateOne) Where(ps ...predicate.TblPayment) *TblPaymentUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TblPaymentUpdateOne) Select(field string, fields ...string) *TblPaymentUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TblPayment entity.
func (tpuo *TblPaymentUpdateOne) Save(ctx context.Context) (*TblPayment, error) {
	return withHooks(ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TblPaymentUpdateOne) SaveX(ctx context.Context) *TblPayment {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TblPaymentUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TblPaymentUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpuo *TblPaymentUpdateOne) check() error {
	if v, ok := tpuo.mutation.RazorpayOrderId(); ok {
		if err := tblpayment.RazorpayOrderIdValidator(v); err != nil {
			return &ValidationError{Name: "RazorpayOrderId", err: fmt.Errorf(`entgen: validator failed for field "TblPayment.RazorpayOrderId": %w`, err)}
		}
	}
	return nil
}

func (tpuo *TblPaymentUpdateOne) sqlSave(ctx context.Context) (_node *TblPayment, err error) {
	if err := tpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblpayment.Table, tblpayment.Columns, sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblPayment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblpayment.FieldID)
		for _, f := range fields {
			if !tblpayment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tblpayment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Status(); ok {
		_spec.SetField(tblpayment.FieldStatus, field.TypeString, value)
	}
	if value, ok := tpuo.mutation.RazorpayOrderId(); ok {
		_spec.SetField(tblpayment.FieldRazorpayOrderId, field.TypeString, value)
	}
	if value, ok := tpuo.mutation.Amount(); ok {
		_spec.SetField(tblpayment.FieldAmount, field.TypeFloat32, value)
	}
	if value, ok := tpuo.mutation.AddedAmount(); ok {
		_spec.AddField(tblpayment.FieldAmount, field.TypeFloat32, value)
	}
	if value, ok := tpuo.mutation.CreatedAt(); ok {
		_spec.SetField(tblpayment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tblpayment.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tpuo.mutation.DeletedAt(); ok {
		_spec.SetField(tblpayment.FieldDeletedAt, field.TypeTime, value)
	}
	if tpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tblpayment.FieldDeletedAt, field.TypeTime)
	}
	if tpuo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.InventoryTable,
			Columns: []string{tblpayment.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.InventoryTable,
			Columns: []string{tblpayment.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.UserTable,
			Columns: []string{tblpayment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.UserTable,
			Columns: []string{tblpayment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblPayment{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblpayment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
