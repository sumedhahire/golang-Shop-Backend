// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblinventorytag"
	"inventory/ent/entgen/tbltag"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblTagUpdate is the builder for updating TblTag entities.
type TblTagUpdate struct {
	config
	hooks    []Hook
	mutation *TblTagMutation
}

// Where appends a list predicates to the TblTagUpdate builder.
func (ttu *TblTagUpdate) Where(ps ...predicate.TblTag) *TblTagUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetName sets the "Name" field.
func (ttu *TblTagUpdate) SetName(s string) *TblTagUpdate {
	ttu.mutation.SetName(s)
	return ttu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (ttu *TblTagUpdate) SetNillableName(s *string) *TblTagUpdate {
	if s != nil {
		ttu.SetName(*s)
	}
	return ttu
}

// SetDescription sets the "Description" field.
func (ttu *TblTagUpdate) SetDescription(s string) *TblTagUpdate {
	ttu.mutation.SetDescription(s)
	return ttu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (ttu *TblTagUpdate) SetNillableDescription(s *string) *TblTagUpdate {
	if s != nil {
		ttu.SetDescription(*s)
	}
	return ttu
}

// SetIsActive sets the "Is_Active" field.
func (ttu *TblTagUpdate) SetIsActive(b bool) *TblTagUpdate {
	ttu.mutation.SetIsActive(b)
	return ttu
}

// SetNillableIsActive sets the "Is_Active" field if the given value is not nil.
func (ttu *TblTagUpdate) SetNillableIsActive(b *bool) *TblTagUpdate {
	if b != nil {
		ttu.SetIsActive(*b)
	}
	return ttu
}

// SetCreatedAt sets the "Created_at" field.
func (ttu *TblTagUpdate) SetCreatedAt(t time.Time) *TblTagUpdate {
	ttu.mutation.SetCreatedAt(t)
	return ttu
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (ttu *TblTagUpdate) SetNillableCreatedAt(t *time.Time) *TblTagUpdate {
	if t != nil {
		ttu.SetCreatedAt(*t)
	}
	return ttu
}

// SetUpdatedAt sets the "Updated_at" field.
func (ttu *TblTagUpdate) SetUpdatedAt(t time.Time) *TblTagUpdate {
	ttu.mutation.SetUpdatedAt(t)
	return ttu
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (ttu *TblTagUpdate) SetNillableUpdatedAt(t *time.Time) *TblTagUpdate {
	if t != nil {
		ttu.SetUpdatedAt(*t)
	}
	return ttu
}

// SetDeletedAt sets the "Deleted_at" field.
func (ttu *TblTagUpdate) SetDeletedAt(t time.Time) *TblTagUpdate {
	ttu.mutation.SetDeletedAt(t)
	return ttu
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (ttu *TblTagUpdate) SetNillableDeletedAt(t *time.Time) *TblTagUpdate {
	if t != nil {
		ttu.SetDeletedAt(*t)
	}
	return ttu
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (ttu *TblTagUpdate) ClearDeletedAt() *TblTagUpdate {
	ttu.mutation.ClearDeletedAt()
	return ttu
}

// AddTagIDs adds the "tag" edge to the TblInventoryTag entity by IDs.
func (ttu *TblTagUpdate) AddTagIDs(ids ...string) *TblTagUpdate {
	ttu.mutation.AddTagIDs(ids...)
	return ttu
}

// AddTag adds the "tag" edges to the TblInventoryTag entity.
func (ttu *TblTagUpdate) AddTag(t ...*TblInventoryTag) *TblTagUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTagIDs(ids...)
}

// Mutation returns the TblTagMutation object of the builder.
func (ttu *TblTagUpdate) Mutation() *TblTagMutation {
	return ttu.mutation
}

// ClearTag clears all "tag" edges to the TblInventoryTag entity.
func (ttu *TblTagUpdate) ClearTag() *TblTagUpdate {
	ttu.mutation.ClearTag()
	return ttu
}

// RemoveTagIDs removes the "tag" edge to TblInventoryTag entities by IDs.
func (ttu *TblTagUpdate) RemoveTagIDs(ids ...string) *TblTagUpdate {
	ttu.mutation.RemoveTagIDs(ids...)
	return ttu
}

// RemoveTag removes "tag" edges to TblInventoryTag entities.
func (ttu *TblTagUpdate) RemoveTag(t ...*TblInventoryTag) *TblTagUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *TblTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TblTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TblTagUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TblTagUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *TblTagUpdate) check() error {
	if v, ok := ttu.mutation.Name(); ok {
		if err := tbltag.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblTag.Name": %w`, err)}
		}
	}
	if v, ok := ttu.mutation.Description(); ok {
		if err := tbltag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`entgen: validator failed for field "TblTag.Description": %w`, err)}
		}
	}
	return nil
}

func (ttu *TblTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbltag.Table, tbltag.Columns, sqlgraph.NewFieldSpec(tbltag.FieldID, field.TypeString))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Name(); ok {
		_spec.SetField(tbltag.FieldName, field.TypeString, value)
	}
	if value, ok := ttu.mutation.Description(); ok {
		_spec.SetField(tbltag.FieldDescription, field.TypeString, value)
	}
	if value, ok := ttu.mutation.IsActive(); ok {
		_spec.SetField(tbltag.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ttu.mutation.CreatedAt(); ok {
		_spec.SetField(tbltag.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ttu.mutation.UpdatedAt(); ok {
		_spec.SetField(tbltag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ttu.mutation.DeletedAt(); ok {
		_spec.SetField(tbltag.FieldDeletedAt, field.TypeTime, value)
	}
	if ttu.mutation.DeletedAtCleared() {
		_spec.ClearField(tbltag.FieldDeletedAt, field.TypeTime)
	}
	if ttu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbltag.TagTable,
			Columns: []string{tbltag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.RemovedTagIDs(); len(nodes) > 0 && !ttu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbltag.TagTable,
			Columns: []string{tbltag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbltag.TagTable,
			Columns: []string{tbltag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbltag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// TblTagUpdateOne is the builder for updating a single TblTag entity.
type TblTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblTagMutation
}

// SetName sets the "Name" field.
func (ttuo *TblTagUpdateOne) SetName(s string) *TblTagUpdateOne {
	ttuo.mutation.SetName(s)
	return ttuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (ttuo *TblTagUpdateOne) SetNillableName(s *string) *TblTagUpdateOne {
	if s != nil {
		ttuo.SetName(*s)
	}
	return ttuo
}

// SetDescription sets the "Description" field.
func (ttuo *TblTagUpdateOne) SetDescription(s string) *TblTagUpdateOne {
	ttuo.mutation.SetDescription(s)
	return ttuo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (ttuo *TblTagUpdateOne) SetNillableDescription(s *string) *TblTagUpdateOne {
	if s != nil {
		ttuo.SetDescription(*s)
	}
	return ttuo
}

// SetIsActive sets the "Is_Active" field.
func (ttuo *TblTagUpdateOne) SetIsActive(b bool) *TblTagUpdateOne {
	ttuo.mutation.SetIsActive(b)
	return ttuo
}

// SetNillableIsActive sets the "Is_Active" field if the given value is not nil.
func (ttuo *TblTagUpdateOne) SetNillableIsActive(b *bool) *TblTagUpdateOne {
	if b != nil {
		ttuo.SetIsActive(*b)
	}
	return ttuo
}

// SetCreatedAt sets the "Created_at" field.
func (ttuo *TblTagUpdateOne) SetCreatedAt(t time.Time) *TblTagUpdateOne {
	ttuo.mutation.SetCreatedAt(t)
	return ttuo
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (ttuo *TblTagUpdateOne) SetNillableCreatedAt(t *time.Time) *TblTagUpdateOne {
	if t != nil {
		ttuo.SetCreatedAt(*t)
	}
	return ttuo
}

// SetUpdatedAt sets the "Updated_at" field.
func (ttuo *TblTagUpdateOne) SetUpdatedAt(t time.Time) *TblTagUpdateOne {
	ttuo.mutation.SetUpdatedAt(t)
	return ttuo
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (ttuo *TblTagUpdateOne) SetNillableUpdatedAt(t *time.Time) *TblTagUpdateOne {
	if t != nil {
		ttuo.SetUpdatedAt(*t)
	}
	return ttuo
}

// SetDeletedAt sets the "Deleted_at" field.
func (ttuo *TblTagUpdateOne) SetDeletedAt(t time.Time) *TblTagUpdateOne {
	ttuo.mutation.SetDeletedAt(t)
	return ttuo
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (ttuo *TblTagUpdateOne) SetNillableDeletedAt(t *time.Time) *TblTagUpdateOne {
	if t != nil {
		ttuo.SetDeletedAt(*t)
	}
	return ttuo
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (ttuo *TblTagUpdateOne) ClearDeletedAt() *TblTagUpdateOne {
	ttuo.mutation.ClearDeletedAt()
	return ttuo
}

// AddTagIDs adds the "tag" edge to the TblInventoryTag entity by IDs.
func (ttuo *TblTagUpdateOne) AddTagIDs(ids ...string) *TblTagUpdateOne {
	ttuo.mutation.AddTagIDs(ids...)
	return ttuo
}

// AddTag adds the "tag" edges to the TblInventoryTag entity.
func (ttuo *TblTagUpdateOne) AddTag(t ...*TblInventoryTag) *TblTagUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTagIDs(ids...)
}

// Mutation returns the TblTagMutation object of the builder.
func (ttuo *TblTagUpdateOne) Mutation() *TblTagMutation {
	return ttuo.mutation
}

// ClearTag clears all "tag" edges to the TblInventoryTag entity.
func (ttuo *TblTagUpdateOne) ClearTag() *TblTagUpdateOne {
	ttuo.mutation.ClearTag()
	return ttuo
}

// RemoveTagIDs removes the "tag" edge to TblInventoryTag entities by IDs.
func (ttuo *TblTagUpdateOne) RemoveTagIDs(ids ...string) *TblTagUpdateOne {
	ttuo.mutation.RemoveTagIDs(ids...)
	return ttuo
}

// RemoveTag removes "tag" edges to TblInventoryTag entities.
func (ttuo *TblTagUpdateOne) RemoveTag(t ...*TblInventoryTag) *TblTagUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the TblTagUpdate builder.
func (ttuo *TblTagUpdateOne) Where(ps ...predicate.TblTag) *TblTagUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *TblTagUpdateOne) Select(field string, fields ...string) *TblTagUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated TblTag entity.
func (ttuo *TblTagUpdateOne) Save(ctx context.Context) (*TblTag, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TblTagUpdateOne) SaveX(ctx context.Context) *TblTag {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *TblTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TblTagUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *TblTagUpdateOne) check() error {
	if v, ok := ttuo.mutation.Name(); ok {
		if err := tbltag.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblTag.Name": %w`, err)}
		}
	}
	if v, ok := ttuo.mutation.Description(); ok {
		if err := tbltag.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`entgen: validator failed for field "TblTag.Description": %w`, err)}
		}
	}
	return nil
}

func (ttuo *TblTagUpdateOne) sqlSave(ctx context.Context) (_node *TblTag, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbltag.Table, tbltag.Columns, sqlgraph.NewFieldSpec(tbltag.FieldID, field.TypeString))
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblTag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tbltag.FieldID)
		for _, f := range fields {
			if !tbltag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tbltag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttuo.mutation.Name(); ok {
		_spec.SetField(tbltag.FieldName, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.Description(); ok {
		_spec.SetField(tbltag.FieldDescription, field.TypeString, value)
	}
	if value, ok := ttuo.mutation.IsActive(); ok {
		_spec.SetField(tbltag.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := ttuo.mutation.CreatedAt(); ok {
		_spec.SetField(tbltag.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ttuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tbltag.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ttuo.mutation.DeletedAt(); ok {
		_spec.SetField(tbltag.FieldDeletedAt, field.TypeTime, value)
	}
	if ttuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tbltag.FieldDeletedAt, field.TypeTime)
	}
	if ttuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbltag.TagTable,
			Columns: []string{tbltag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.RemovedTagIDs(); len(nodes) > 0 && !ttuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbltag.TagTable,
			Columns: []string{tbltag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbltag.TagTable,
			Columns: []string{tbltag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblTag{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbltag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
