// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthtoken"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblpayment"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblUserUpdate is the builder for updating TblUser entities.
type TblUserUpdate struct {
	config
	hooks    []Hook
	mutation *TblUserMutation
}

// Where appends a list predicates to the TblUserUpdate builder.
func (tuu *TblUserUpdate) Where(ps ...predicate.TblUser) *TblUserUpdate {
	tuu.mutation.Where(ps...)
	return tuu
}

// SetFirstname sets the "firstname" field.
func (tuu *TblUserUpdate) SetFirstname(s string) *TblUserUpdate {
	tuu.mutation.SetFirstname(s)
	return tuu
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableFirstname(s *string) *TblUserUpdate {
	if s != nil {
		tuu.SetFirstname(*s)
	}
	return tuu
}

// SetLastname sets the "lastname" field.
func (tuu *TblUserUpdate) SetLastname(s string) *TblUserUpdate {
	tuu.mutation.SetLastname(s)
	return tuu
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableLastname(s *string) *TblUserUpdate {
	if s != nil {
		tuu.SetLastname(*s)
	}
	return tuu
}

// SetEmail sets the "email" field.
func (tuu *TblUserUpdate) SetEmail(s string) *TblUserUpdate {
	tuu.mutation.SetEmail(s)
	return tuu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableEmail(s *string) *TblUserUpdate {
	if s != nil {
		tuu.SetEmail(*s)
	}
	return tuu
}

// SetBirthDate sets the "birth_date" field.
func (tuu *TblUserUpdate) SetBirthDate(t time.Time) *TblUserUpdate {
	tuu.mutation.SetBirthDate(t)
	return tuu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableBirthDate(t *time.Time) *TblUserUpdate {
	if t != nil {
		tuu.SetBirthDate(*t)
	}
	return tuu
}

// ClearBirthDate clears the value of the "birth_date" field.
func (tuu *TblUserUpdate) ClearBirthDate() *TblUserUpdate {
	tuu.mutation.ClearBirthDate()
	return tuu
}

// SetPassword sets the "password" field.
func (tuu *TblUserUpdate) SetPassword(s string) *TblUserUpdate {
	tuu.mutation.SetPassword(s)
	return tuu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillablePassword(s *string) *TblUserUpdate {
	if s != nil {
		tuu.SetPassword(*s)
	}
	return tuu
}

// SetIsActive sets the "is_active" field.
func (tuu *TblUserUpdate) SetIsActive(b bool) *TblUserUpdate {
	tuu.mutation.SetIsActive(b)
	return tuu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableIsActive(b *bool) *TblUserUpdate {
	if b != nil {
		tuu.SetIsActive(*b)
	}
	return tuu
}

// SetZipCode sets the "zip_code" field.
func (tuu *TblUserUpdate) SetZipCode(i int) *TblUserUpdate {
	tuu.mutation.ResetZipCode()
	tuu.mutation.SetZipCode(i)
	return tuu
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableZipCode(i *int) *TblUserUpdate {
	if i != nil {
		tuu.SetZipCode(*i)
	}
	return tuu
}

// AddZipCode adds i to the "zip_code" field.
func (tuu *TblUserUpdate) AddZipCode(i int) *TblUserUpdate {
	tuu.mutation.AddZipCode(i)
	return tuu
}

// ClearZipCode clears the value of the "zip_code" field.
func (tuu *TblUserUpdate) ClearZipCode() *TblUserUpdate {
	tuu.mutation.ClearZipCode()
	return tuu
}

// SetAddress sets the "address" field.
func (tuu *TblUserUpdate) SetAddress(s string) *TblUserUpdate {
	tuu.mutation.SetAddress(s)
	return tuu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableAddress(s *string) *TblUserUpdate {
	if s != nil {
		tuu.SetAddress(*s)
	}
	return tuu
}

// ClearAddress clears the value of the "address" field.
func (tuu *TblUserUpdate) ClearAddress() *TblUserUpdate {
	tuu.mutation.ClearAddress()
	return tuu
}

// SetIPAddress sets the "ip_address" field.
func (tuu *TblUserUpdate) SetIPAddress(s string) *TblUserUpdate {
	tuu.mutation.SetIPAddress(s)
	return tuu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableIPAddress(s *string) *TblUserUpdate {
	if s != nil {
		tuu.SetIPAddress(*s)
	}
	return tuu
}

// ClearIPAddress clears the value of the "ip_address" field.
func (tuu *TblUserUpdate) ClearIPAddress() *TblUserUpdate {
	tuu.mutation.ClearIPAddress()
	return tuu
}

// SetCreatedAt sets the "created_at" field.
func (tuu *TblUserUpdate) SetCreatedAt(t time.Time) *TblUserUpdate {
	tuu.mutation.SetCreatedAt(t)
	return tuu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableCreatedAt(t *time.Time) *TblUserUpdate {
	if t != nil {
		tuu.SetCreatedAt(*t)
	}
	return tuu
}

// SetUpdatedAt sets the "updated_at" field.
func (tuu *TblUserUpdate) SetUpdatedAt(t time.Time) *TblUserUpdate {
	tuu.mutation.SetUpdatedAt(t)
	return tuu
}

// SetDeletedAt sets the "deleted_at" field.
func (tuu *TblUserUpdate) SetDeletedAt(t time.Time) *TblUserUpdate {
	tuu.mutation.SetDeletedAt(t)
	return tuu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableDeletedAt(t *time.Time) *TblUserUpdate {
	if t != nil {
		tuu.SetDeletedAt(*t)
	}
	return tuu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuu *TblUserUpdate) ClearDeletedAt() *TblUserUpdate {
	tuu.mutation.ClearDeletedAt()
	return tuu
}

// SetRole sets the "role" field.
func (tuu *TblUserUpdate) SetRole(t tbluser.Role) *TblUserUpdate {
	tuu.mutation.SetRole(t)
	return tuu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (tuu *TblUserUpdate) SetNillableRole(t *tbluser.Role) *TblUserUpdate {
	if t != nil {
		tuu.SetRole(*t)
	}
	return tuu
}

// AddUserTokenIDs adds the "UserToken" edge to the TblAuthToken entity by IDs.
func (tuu *TblUserUpdate) AddUserTokenIDs(ids ...string) *TblUserUpdate {
	tuu.mutation.AddUserTokenIDs(ids...)
	return tuu
}

// AddUserToken adds the "UserToken" edges to the TblAuthToken entity.
func (tuu *TblUserUpdate) AddUserToken(t ...*TblAuthToken) *TblUserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.AddUserTokenIDs(ids...)
}

// AddUserCartIDs adds the "UserCart" edge to the TblCart entity by IDs.
func (tuu *TblUserUpdate) AddUserCartIDs(ids ...string) *TblUserUpdate {
	tuu.mutation.AddUserCartIDs(ids...)
	return tuu
}

// AddUserCart adds the "UserCart" edges to the TblCart entity.
func (tuu *TblUserUpdate) AddUserCart(t ...*TblCart) *TblUserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.AddUserCartIDs(ids...)
}

// AddUserPaymentIDs adds the "UserPayment" edge to the TblPayment entity by IDs.
func (tuu *TblUserUpdate) AddUserPaymentIDs(ids ...string) *TblUserUpdate {
	tuu.mutation.AddUserPaymentIDs(ids...)
	return tuu
}

// AddUserPayment adds the "UserPayment" edges to the TblPayment entity.
func (tuu *TblUserUpdate) AddUserPayment(t ...*TblPayment) *TblUserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.AddUserPaymentIDs(ids...)
}

// Mutation returns the TblUserMutation object of the builder.
func (tuu *TblUserUpdate) Mutation() *TblUserMutation {
	return tuu.mutation
}

// ClearUserToken clears all "UserToken" edges to the TblAuthToken entity.
func (tuu *TblUserUpdate) ClearUserToken() *TblUserUpdate {
	tuu.mutation.ClearUserToken()
	return tuu
}

// RemoveUserTokenIDs removes the "UserToken" edge to TblAuthToken entities by IDs.
func (tuu *TblUserUpdate) RemoveUserTokenIDs(ids ...string) *TblUserUpdate {
	tuu.mutation.RemoveUserTokenIDs(ids...)
	return tuu
}

// RemoveUserToken removes "UserToken" edges to TblAuthToken entities.
func (tuu *TblUserUpdate) RemoveUserToken(t ...*TblAuthToken) *TblUserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.RemoveUserTokenIDs(ids...)
}

// ClearUserCart clears all "UserCart" edges to the TblCart entity.
func (tuu *TblUserUpdate) ClearUserCart() *TblUserUpdate {
	tuu.mutation.ClearUserCart()
	return tuu
}

// RemoveUserCartIDs removes the "UserCart" edge to TblCart entities by IDs.
func (tuu *TblUserUpdate) RemoveUserCartIDs(ids ...string) *TblUserUpdate {
	tuu.mutation.RemoveUserCartIDs(ids...)
	return tuu
}

// RemoveUserCart removes "UserCart" edges to TblCart entities.
func (tuu *TblUserUpdate) RemoveUserCart(t ...*TblCart) *TblUserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.RemoveUserCartIDs(ids...)
}

// ClearUserPayment clears all "UserPayment" edges to the TblPayment entity.
func (tuu *TblUserUpdate) ClearUserPayment() *TblUserUpdate {
	tuu.mutation.ClearUserPayment()
	return tuu
}

// RemoveUserPaymentIDs removes the "UserPayment" edge to TblPayment entities by IDs.
func (tuu *TblUserUpdate) RemoveUserPaymentIDs(ids ...string) *TblUserUpdate {
	tuu.mutation.RemoveUserPaymentIDs(ids...)
	return tuu
}

// RemoveUserPayment removes "UserPayment" edges to TblPayment entities.
func (tuu *TblUserUpdate) RemoveUserPayment(t ...*TblPayment) *TblUserUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuu.RemoveUserPaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tuu *TblUserUpdate) Save(ctx context.Context) (int, error) {
	tuu.defaults()
	return withHooks(ctx, tuu.sqlSave, tuu.mutation, tuu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuu *TblUserUpdate) SaveX(ctx context.Context) int {
	affected, err := tuu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tuu *TblUserUpdate) Exec(ctx context.Context) error {
	_, err := tuu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuu *TblUserUpdate) ExecX(ctx context.Context) {
	if err := tuu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuu *TblUserUpdate) defaults() {
	if _, ok := tuu.mutation.UpdatedAt(); !ok {
		v := tbluser.UpdateDefaultUpdatedAt()
		tuu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuu *TblUserUpdate) check() error {
	if v, ok := tuu.mutation.Firstname(); ok {
		if err := tbluser.FirstnameValidator(v); err != nil {
			return &ValidationError{Name: "firstname", err: fmt.Errorf(`entgen: validator failed for field "TblUser.firstname": %w`, err)}
		}
	}
	if v, ok := tuu.mutation.Lastname(); ok {
		if err := tbluser.LastnameValidator(v); err != nil {
			return &ValidationError{Name: "lastname", err: fmt.Errorf(`entgen: validator failed for field "TblUser.lastname": %w`, err)}
		}
	}
	if v, ok := tuu.mutation.Email(); ok {
		if err := tbluser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`entgen: validator failed for field "TblUser.email": %w`, err)}
		}
	}
	if v, ok := tuu.mutation.Password(); ok {
		if err := tbluser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`entgen: validator failed for field "TblUser.password": %w`, err)}
		}
	}
	if v, ok := tuu.mutation.IPAddress(); ok {
		if err := tbluser.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`entgen: validator failed for field "TblUser.ip_address": %w`, err)}
		}
	}
	if v, ok := tuu.mutation.Role(); ok {
		if err := tbluser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`entgen: validator failed for field "TblUser.role": %w`, err)}
		}
	}
	return nil
}

func (tuu *TblUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tuu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbluser.Table, tbluser.Columns, sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString))
	if ps := tuu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuu.mutation.Firstname(); ok {
		_spec.SetField(tbluser.FieldFirstname, field.TypeString, value)
	}
	if value, ok := tuu.mutation.Lastname(); ok {
		_spec.SetField(tbluser.FieldLastname, field.TypeString, value)
	}
	if value, ok := tuu.mutation.Email(); ok {
		_spec.SetField(tbluser.FieldEmail, field.TypeString, value)
	}
	if value, ok := tuu.mutation.BirthDate(); ok {
		_spec.SetField(tbluser.FieldBirthDate, field.TypeTime, value)
	}
	if tuu.mutation.BirthDateCleared() {
		_spec.ClearField(tbluser.FieldBirthDate, field.TypeTime)
	}
	if value, ok := tuu.mutation.Password(); ok {
		_spec.SetField(tbluser.FieldPassword, field.TypeString, value)
	}
	if value, ok := tuu.mutation.IsActive(); ok {
		_spec.SetField(tbluser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuu.mutation.ZipCode(); ok {
		_spec.SetField(tbluser.FieldZipCode, field.TypeInt, value)
	}
	if value, ok := tuu.mutation.AddedZipCode(); ok {
		_spec.AddField(tbluser.FieldZipCode, field.TypeInt, value)
	}
	if tuu.mutation.ZipCodeCleared() {
		_spec.ClearField(tbluser.FieldZipCode, field.TypeInt)
	}
	if value, ok := tuu.mutation.Address(); ok {
		_spec.SetField(tbluser.FieldAddress, field.TypeString, value)
	}
	if tuu.mutation.AddressCleared() {
		_spec.ClearField(tbluser.FieldAddress, field.TypeString)
	}
	if value, ok := tuu.mutation.IPAddress(); ok {
		_spec.SetField(tbluser.FieldIPAddress, field.TypeString, value)
	}
	if tuu.mutation.IPAddressCleared() {
		_spec.ClearField(tbluser.FieldIPAddress, field.TypeString)
	}
	if value, ok := tuu.mutation.CreatedAt(); ok {
		_spec.SetField(tbluser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuu.mutation.UpdatedAt(); ok {
		_spec.SetField(tbluser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuu.mutation.DeletedAt(); ok {
		_spec.SetField(tbluser.FieldDeletedAt, field.TypeTime, value)
	}
	if tuu.mutation.DeletedAtCleared() {
		_spec.ClearField(tbluser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuu.mutation.Role(); ok {
		_spec.SetField(tbluser.FieldRole, field.TypeEnum, value)
	}
	if tuu.mutation.UserTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserTokenTable,
			Columns: []string{tbluser.UserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedUserTokenIDs(); len(nodes) > 0 && !tuu.mutation.UserTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserTokenTable,
			Columns: []string{tbluser.UserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.UserTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserTokenTable,
			Columns: []string{tbluser.UserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuu.mutation.UserCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserCartTable,
			Columns: []string{tbluser.UserCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedUserCartIDs(); len(nodes) > 0 && !tuu.mutation.UserCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserCartTable,
			Columns: []string{tbluser.UserCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.UserCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserCartTable,
			Columns: []string{tbluser.UserCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuu.mutation.UserPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserPaymentTable,
			Columns: []string{tbluser.UserPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.RemovedUserPaymentIDs(); len(nodes) > 0 && !tuu.mutation.UserPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserPaymentTable,
			Columns: []string{tbluser.UserPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuu.mutation.UserPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserPaymentTable,
			Columns: []string{tbluser.UserPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tuu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbluser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tuu.mutation.done = true
	return n, nil
}

// TblUserUpdateOne is the builder for updating a single TblUser entity.
type TblUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblUserMutation
}

// SetFirstname sets the "firstname" field.
func (tuuo *TblUserUpdateOne) SetFirstname(s string) *TblUserUpdateOne {
	tuuo.mutation.SetFirstname(s)
	return tuuo
}

// SetNillableFirstname sets the "firstname" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableFirstname(s *string) *TblUserUpdateOne {
	if s != nil {
		tuuo.SetFirstname(*s)
	}
	return tuuo
}

// SetLastname sets the "lastname" field.
func (tuuo *TblUserUpdateOne) SetLastname(s string) *TblUserUpdateOne {
	tuuo.mutation.SetLastname(s)
	return tuuo
}

// SetNillableLastname sets the "lastname" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableLastname(s *string) *TblUserUpdateOne {
	if s != nil {
		tuuo.SetLastname(*s)
	}
	return tuuo
}

// SetEmail sets the "email" field.
func (tuuo *TblUserUpdateOne) SetEmail(s string) *TblUserUpdateOne {
	tuuo.mutation.SetEmail(s)
	return tuuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableEmail(s *string) *TblUserUpdateOne {
	if s != nil {
		tuuo.SetEmail(*s)
	}
	return tuuo
}

// SetBirthDate sets the "birth_date" field.
func (tuuo *TblUserUpdateOne) SetBirthDate(t time.Time) *TblUserUpdateOne {
	tuuo.mutation.SetBirthDate(t)
	return tuuo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableBirthDate(t *time.Time) *TblUserUpdateOne {
	if t != nil {
		tuuo.SetBirthDate(*t)
	}
	return tuuo
}

// ClearBirthDate clears the value of the "birth_date" field.
func (tuuo *TblUserUpdateOne) ClearBirthDate() *TblUserUpdateOne {
	tuuo.mutation.ClearBirthDate()
	return tuuo
}

// SetPassword sets the "password" field.
func (tuuo *TblUserUpdateOne) SetPassword(s string) *TblUserUpdateOne {
	tuuo.mutation.SetPassword(s)
	return tuuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillablePassword(s *string) *TblUserUpdateOne {
	if s != nil {
		tuuo.SetPassword(*s)
	}
	return tuuo
}

// SetIsActive sets the "is_active" field.
func (tuuo *TblUserUpdateOne) SetIsActive(b bool) *TblUserUpdateOne {
	tuuo.mutation.SetIsActive(b)
	return tuuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableIsActive(b *bool) *TblUserUpdateOne {
	if b != nil {
		tuuo.SetIsActive(*b)
	}
	return tuuo
}

// SetZipCode sets the "zip_code" field.
func (tuuo *TblUserUpdateOne) SetZipCode(i int) *TblUserUpdateOne {
	tuuo.mutation.ResetZipCode()
	tuuo.mutation.SetZipCode(i)
	return tuuo
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableZipCode(i *int) *TblUserUpdateOne {
	if i != nil {
		tuuo.SetZipCode(*i)
	}
	return tuuo
}

// AddZipCode adds i to the "zip_code" field.
func (tuuo *TblUserUpdateOne) AddZipCode(i int) *TblUserUpdateOne {
	tuuo.mutation.AddZipCode(i)
	return tuuo
}

// ClearZipCode clears the value of the "zip_code" field.
func (tuuo *TblUserUpdateOne) ClearZipCode() *TblUserUpdateOne {
	tuuo.mutation.ClearZipCode()
	return tuuo
}

// SetAddress sets the "address" field.
func (tuuo *TblUserUpdateOne) SetAddress(s string) *TblUserUpdateOne {
	tuuo.mutation.SetAddress(s)
	return tuuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableAddress(s *string) *TblUserUpdateOne {
	if s != nil {
		tuuo.SetAddress(*s)
	}
	return tuuo
}

// ClearAddress clears the value of the "address" field.
func (tuuo *TblUserUpdateOne) ClearAddress() *TblUserUpdateOne {
	tuuo.mutation.ClearAddress()
	return tuuo
}

// SetIPAddress sets the "ip_address" field.
func (tuuo *TblUserUpdateOne) SetIPAddress(s string) *TblUserUpdateOne {
	tuuo.mutation.SetIPAddress(s)
	return tuuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableIPAddress(s *string) *TblUserUpdateOne {
	if s != nil {
		tuuo.SetIPAddress(*s)
	}
	return tuuo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (tuuo *TblUserUpdateOne) ClearIPAddress() *TblUserUpdateOne {
	tuuo.mutation.ClearIPAddress()
	return tuuo
}

// SetCreatedAt sets the "created_at" field.
func (tuuo *TblUserUpdateOne) SetCreatedAt(t time.Time) *TblUserUpdateOne {
	tuuo.mutation.SetCreatedAt(t)
	return tuuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableCreatedAt(t *time.Time) *TblUserUpdateOne {
	if t != nil {
		tuuo.SetCreatedAt(*t)
	}
	return tuuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuuo *TblUserUpdateOne) SetUpdatedAt(t time.Time) *TblUserUpdateOne {
	tuuo.mutation.SetUpdatedAt(t)
	return tuuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tuuo *TblUserUpdateOne) SetDeletedAt(t time.Time) *TblUserUpdateOne {
	tuuo.mutation.SetDeletedAt(t)
	return tuuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableDeletedAt(t *time.Time) *TblUserUpdateOne {
	if t != nil {
		tuuo.SetDeletedAt(*t)
	}
	return tuuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tuuo *TblUserUpdateOne) ClearDeletedAt() *TblUserUpdateOne {
	tuuo.mutation.ClearDeletedAt()
	return tuuo
}

// SetRole sets the "role" field.
func (tuuo *TblUserUpdateOne) SetRole(t tbluser.Role) *TblUserUpdateOne {
	tuuo.mutation.SetRole(t)
	return tuuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (tuuo *TblUserUpdateOne) SetNillableRole(t *tbluser.Role) *TblUserUpdateOne {
	if t != nil {
		tuuo.SetRole(*t)
	}
	return tuuo
}

// AddUserTokenIDs adds the "UserToken" edge to the TblAuthToken entity by IDs.
func (tuuo *TblUserUpdateOne) AddUserTokenIDs(ids ...string) *TblUserUpdateOne {
	tuuo.mutation.AddUserTokenIDs(ids...)
	return tuuo
}

// AddUserToken adds the "UserToken" edges to the TblAuthToken entity.
func (tuuo *TblUserUpdateOne) AddUserToken(t ...*TblAuthToken) *TblUserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.AddUserTokenIDs(ids...)
}

// AddUserCartIDs adds the "UserCart" edge to the TblCart entity by IDs.
func (tuuo *TblUserUpdateOne) AddUserCartIDs(ids ...string) *TblUserUpdateOne {
	tuuo.mutation.AddUserCartIDs(ids...)
	return tuuo
}

// AddUserCart adds the "UserCart" edges to the TblCart entity.
func (tuuo *TblUserUpdateOne) AddUserCart(t ...*TblCart) *TblUserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.AddUserCartIDs(ids...)
}

// AddUserPaymentIDs adds the "UserPayment" edge to the TblPayment entity by IDs.
func (tuuo *TblUserUpdateOne) AddUserPaymentIDs(ids ...string) *TblUserUpdateOne {
	tuuo.mutation.AddUserPaymentIDs(ids...)
	return tuuo
}

// AddUserPayment adds the "UserPayment" edges to the TblPayment entity.
func (tuuo *TblUserUpdateOne) AddUserPayment(t ...*TblPayment) *TblUserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.AddUserPaymentIDs(ids...)
}

// Mutation returns the TblUserMutation object of the builder.
func (tuuo *TblUserUpdateOne) Mutation() *TblUserMutation {
	return tuuo.mutation
}

// ClearUserToken clears all "UserToken" edges to the TblAuthToken entity.
func (tuuo *TblUserUpdateOne) ClearUserToken() *TblUserUpdateOne {
	tuuo.mutation.ClearUserToken()
	return tuuo
}

// RemoveUserTokenIDs removes the "UserToken" edge to TblAuthToken entities by IDs.
func (tuuo *TblUserUpdateOne) RemoveUserTokenIDs(ids ...string) *TblUserUpdateOne {
	tuuo.mutation.RemoveUserTokenIDs(ids...)
	return tuuo
}

// RemoveUserToken removes "UserToken" edges to TblAuthToken entities.
func (tuuo *TblUserUpdateOne) RemoveUserToken(t ...*TblAuthToken) *TblUserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.RemoveUserTokenIDs(ids...)
}

// ClearUserCart clears all "UserCart" edges to the TblCart entity.
func (tuuo *TblUserUpdateOne) ClearUserCart() *TblUserUpdateOne {
	tuuo.mutation.ClearUserCart()
	return tuuo
}

// RemoveUserCartIDs removes the "UserCart" edge to TblCart entities by IDs.
func (tuuo *TblUserUpdateOne) RemoveUserCartIDs(ids ...string) *TblUserUpdateOne {
	tuuo.mutation.RemoveUserCartIDs(ids...)
	return tuuo
}

// RemoveUserCart removes "UserCart" edges to TblCart entities.
func (tuuo *TblUserUpdateOne) RemoveUserCart(t ...*TblCart) *TblUserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.RemoveUserCartIDs(ids...)
}

// ClearUserPayment clears all "UserPayment" edges to the TblPayment entity.
func (tuuo *TblUserUpdateOne) ClearUserPayment() *TblUserUpdateOne {
	tuuo.mutation.ClearUserPayment()
	return tuuo
}

// RemoveUserPaymentIDs removes the "UserPayment" edge to TblPayment entities by IDs.
func (tuuo *TblUserUpdateOne) RemoveUserPaymentIDs(ids ...string) *TblUserUpdateOne {
	tuuo.mutation.RemoveUserPaymentIDs(ids...)
	return tuuo
}

// RemoveUserPayment removes "UserPayment" edges to TblPayment entities.
func (tuuo *TblUserUpdateOne) RemoveUserPayment(t ...*TblPayment) *TblUserUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuuo.RemoveUserPaymentIDs(ids...)
}

// Where appends a list predicates to the TblUserUpdate builder.
func (tuuo *TblUserUpdateOne) Where(ps ...predicate.TblUser) *TblUserUpdateOne {
	tuuo.mutation.Where(ps...)
	return tuuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuuo *TblUserUpdateOne) Select(field string, fields ...string) *TblUserUpdateOne {
	tuuo.fields = append([]string{field}, fields...)
	return tuuo
}

// Save executes the query and returns the updated TblUser entity.
func (tuuo *TblUserUpdateOne) Save(ctx context.Context) (*TblUser, error) {
	tuuo.defaults()
	return withHooks(ctx, tuuo.sqlSave, tuuo.mutation, tuuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuuo *TblUserUpdateOne) SaveX(ctx context.Context) *TblUser {
	node, err := tuuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuuo *TblUserUpdateOne) Exec(ctx context.Context) error {
	_, err := tuuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuuo *TblUserUpdateOne) ExecX(ctx context.Context) {
	if err := tuuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuuo *TblUserUpdateOne) defaults() {
	if _, ok := tuuo.mutation.UpdatedAt(); !ok {
		v := tbluser.UpdateDefaultUpdatedAt()
		tuuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuuo *TblUserUpdateOne) check() error {
	if v, ok := tuuo.mutation.Firstname(); ok {
		if err := tbluser.FirstnameValidator(v); err != nil {
			return &ValidationError{Name: "firstname", err: fmt.Errorf(`entgen: validator failed for field "TblUser.firstname": %w`, err)}
		}
	}
	if v, ok := tuuo.mutation.Lastname(); ok {
		if err := tbluser.LastnameValidator(v); err != nil {
			return &ValidationError{Name: "lastname", err: fmt.Errorf(`entgen: validator failed for field "TblUser.lastname": %w`, err)}
		}
	}
	if v, ok := tuuo.mutation.Email(); ok {
		if err := tbluser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`entgen: validator failed for field "TblUser.email": %w`, err)}
		}
	}
	if v, ok := tuuo.mutation.Password(); ok {
		if err := tbluser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`entgen: validator failed for field "TblUser.password": %w`, err)}
		}
	}
	if v, ok := tuuo.mutation.IPAddress(); ok {
		if err := tbluser.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`entgen: validator failed for field "TblUser.ip_address": %w`, err)}
		}
	}
	if v, ok := tuuo.mutation.Role(); ok {
		if err := tbluser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`entgen: validator failed for field "TblUser.role": %w`, err)}
		}
	}
	return nil
}

func (tuuo *TblUserUpdateOne) sqlSave(ctx context.Context) (_node *TblUser, err error) {
	if err := tuuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tbluser.Table, tbluser.Columns, sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString))
	id, ok := tuuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tbluser.FieldID)
		for _, f := range fields {
			if !tbluser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tbluser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuuo.mutation.Firstname(); ok {
		_spec.SetField(tbluser.FieldFirstname, field.TypeString, value)
	}
	if value, ok := tuuo.mutation.Lastname(); ok {
		_spec.SetField(tbluser.FieldLastname, field.TypeString, value)
	}
	if value, ok := tuuo.mutation.Email(); ok {
		_spec.SetField(tbluser.FieldEmail, field.TypeString, value)
	}
	if value, ok := tuuo.mutation.BirthDate(); ok {
		_spec.SetField(tbluser.FieldBirthDate, field.TypeTime, value)
	}
	if tuuo.mutation.BirthDateCleared() {
		_spec.ClearField(tbluser.FieldBirthDate, field.TypeTime)
	}
	if value, ok := tuuo.mutation.Password(); ok {
		_spec.SetField(tbluser.FieldPassword, field.TypeString, value)
	}
	if value, ok := tuuo.mutation.IsActive(); ok {
		_spec.SetField(tbluser.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tuuo.mutation.ZipCode(); ok {
		_spec.SetField(tbluser.FieldZipCode, field.TypeInt, value)
	}
	if value, ok := tuuo.mutation.AddedZipCode(); ok {
		_spec.AddField(tbluser.FieldZipCode, field.TypeInt, value)
	}
	if tuuo.mutation.ZipCodeCleared() {
		_spec.ClearField(tbluser.FieldZipCode, field.TypeInt)
	}
	if value, ok := tuuo.mutation.Address(); ok {
		_spec.SetField(tbluser.FieldAddress, field.TypeString, value)
	}
	if tuuo.mutation.AddressCleared() {
		_spec.ClearField(tbluser.FieldAddress, field.TypeString)
	}
	if value, ok := tuuo.mutation.IPAddress(); ok {
		_spec.SetField(tbluser.FieldIPAddress, field.TypeString, value)
	}
	if tuuo.mutation.IPAddressCleared() {
		_spec.ClearField(tbluser.FieldIPAddress, field.TypeString)
	}
	if value, ok := tuuo.mutation.CreatedAt(); ok {
		_spec.SetField(tbluser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tbluser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tuuo.mutation.DeletedAt(); ok {
		_spec.SetField(tbluser.FieldDeletedAt, field.TypeTime, value)
	}
	if tuuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tbluser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuuo.mutation.Role(); ok {
		_spec.SetField(tbluser.FieldRole, field.TypeEnum, value)
	}
	if tuuo.mutation.UserTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserTokenTable,
			Columns: []string{tbluser.UserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedUserTokenIDs(); len(nodes) > 0 && !tuuo.mutation.UserTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserTokenTable,
			Columns: []string{tbluser.UserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.UserTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserTokenTable,
			Columns: []string{tbluser.UserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuuo.mutation.UserCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserCartTable,
			Columns: []string{tbluser.UserCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedUserCartIDs(); len(nodes) > 0 && !tuuo.mutation.UserCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserCartTable,
			Columns: []string{tbluser.UserCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.UserCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserCartTable,
			Columns: []string{tbluser.UserCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuuo.mutation.UserPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserPaymentTable,
			Columns: []string{tbluser.UserPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.RemovedUserPaymentIDs(); len(nodes) > 0 && !tuuo.mutation.UserPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserPaymentTable,
			Columns: []string{tbluser.UserPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuuo.mutation.UserPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserPaymentTable,
			Columns: []string{tbluser.UserPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblUser{config: tuuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tbluser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuuo.mutation.done = true
	return _node, nil
}
