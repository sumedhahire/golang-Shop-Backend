// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"inventory/ent/entgen/tblinventory"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblInventory is the model entity for the TblInventory schema.
type TblInventory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Description holds the value of the "Description" field.
	Description string `json:"Description,omitempty"`
	// ImageLink holds the value of the "ImageLink" field.
	ImageLink string `json:"ImageLink,omitempty"`
	// Price holds the value of the "Price" field.
	Price float32 `json:"Price,omitempty"`
	// IsActive holds the value of the "Is_Active" field.
	IsActive bool `json:"Is_Active,omitempty"`
	// CreatedAt holds the value of the "Created_at" field.
	CreatedAt time.Time `json:"Created_at,omitempty"`
	// UpdatedAt holds the value of the "Updated_at" field.
	UpdatedAt time.Time `json:"Updated_at,omitempty"`
	// DeletedAt holds the value of the "Deleted_at" field.
	DeletedAt *time.Time `json:"Deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblInventoryQuery when eager-loading is set.
	Edges        TblInventoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblInventoryEdges holds the relations/edges for other nodes in the graph.
type TblInventoryEdges struct {
	// InventoryTag holds the value of the inventoryTag edge.
	InventoryTag []*TblInventoryTag `json:"inventoryTag,omitempty"`
	// InventoryCart holds the value of the InventoryCart edge.
	InventoryCart []*TblCart `json:"InventoryCart,omitempty"`
	// InventoryPayment holds the value of the InventoryPayment edge.
	InventoryPayment []*TblPayment `json:"InventoryPayment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// InventoryTagOrErr returns the InventoryTag value or an error if the edge
// was not loaded in eager-loading.
func (e TblInventoryEdges) InventoryTagOrErr() ([]*TblInventoryTag, error) {
	if e.loadedTypes[0] {
		return e.InventoryTag, nil
	}
	return nil, &NotLoadedError{edge: "inventoryTag"}
}

// InventoryCartOrErr returns the InventoryCart value or an error if the edge
// was not loaded in eager-loading.
func (e TblInventoryEdges) InventoryCartOrErr() ([]*TblCart, error) {
	if e.loadedTypes[1] {
		return e.InventoryCart, nil
	}
	return nil, &NotLoadedError{edge: "InventoryCart"}
}

// InventoryPaymentOrErr returns the InventoryPayment value or an error if the edge
// was not loaded in eager-loading.
func (e TblInventoryEdges) InventoryPaymentOrErr() ([]*TblPayment, error) {
	if e.loadedTypes[2] {
		return e.InventoryPayment, nil
	}
	return nil, &NotLoadedError{edge: "InventoryPayment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblInventory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tblinventory.FieldIsActive:
			values[i] = new(sql.NullBool)
		case tblinventory.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case tblinventory.FieldID, tblinventory.FieldName, tblinventory.FieldDescription, tblinventory.FieldImageLink:
			values[i] = new(sql.NullString)
		case tblinventory.FieldCreatedAt, tblinventory.FieldUpdatedAt, tblinventory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblInventory fields.
func (ti *TblInventory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tblinventory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ti.ID = value.String
			}
		case tblinventory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				ti.Name = value.String
			}
		case tblinventory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Description", values[i])
			} else if value.Valid {
				ti.Description = value.String
			}
		case tblinventory.FieldImageLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ImageLink", values[i])
			} else if value.Valid {
				ti.ImageLink = value.String
			}
		case tblinventory.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Price", values[i])
			} else if value.Valid {
				ti.Price = float32(value.Float64)
			}
		case tblinventory.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field Is_Active", values[i])
			} else if value.Valid {
				ti.IsActive = value.Bool
			}
		case tblinventory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Created_at", values[i])
			} else if value.Valid {
				ti.CreatedAt = value.Time
			}
		case tblinventory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Updated_at", values[i])
			} else if value.Valid {
				ti.UpdatedAt = value.Time
			}
		case tblinventory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Deleted_at", values[i])
			} else if value.Valid {
				ti.DeletedAt = new(time.Time)
				*ti.DeletedAt = value.Time
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblInventory.
// This includes values selected through modifiers, order, etc.
func (ti *TblInventory) Value(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// QueryInventoryTag queries the "inventoryTag" edge of the TblInventory entity.
func (ti *TblInventory) QueryInventoryTag() *TblInventoryTagQuery {
	return NewTblInventoryClient(ti.config).QueryInventoryTag(ti)
}

// QueryInventoryCart queries the "InventoryCart" edge of the TblInventory entity.
func (ti *TblInventory) QueryInventoryCart() *TblCartQuery {
	return NewTblInventoryClient(ti.config).QueryInventoryCart(ti)
}

// QueryInventoryPayment queries the "InventoryPayment" edge of the TblInventory entity.
func (ti *TblInventory) QueryInventoryPayment() *TblPaymentQuery {
	return NewTblInventoryClient(ti.config).QueryInventoryPayment(ti)
}

// Update returns a builder for updating this TblInventory.
// Note that you need to call TblInventory.Unwrap() before calling this method if this TblInventory
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TblInventory) Update() *TblInventoryUpdateOne {
	return NewTblInventoryClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the TblInventory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TblInventory) Unwrap() *TblInventory {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblInventory is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TblInventory) String() string {
	var builder strings.Builder
	builder.WriteString("TblInventory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("Name=")
	builder.WriteString(ti.Name)
	builder.WriteString(", ")
	builder.WriteString("Description=")
	builder.WriteString(ti.Description)
	builder.WriteString(", ")
	builder.WriteString("ImageLink=")
	builder.WriteString(ti.ImageLink)
	builder.WriteString(", ")
	builder.WriteString("Price=")
	builder.WriteString(fmt.Sprintf("%v", ti.Price))
	builder.WriteString(", ")
	builder.WriteString("Is_Active=")
	builder.WriteString(fmt.Sprintf("%v", ti.IsActive))
	builder.WriteString(", ")
	builder.WriteString("Created_at=")
	builder.WriteString(ti.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Updated_at=")
	builder.WriteString(ti.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := ti.DeletedAt; v != nil {
		builder.WriteString("Deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TblInventories is a parsable slice of TblInventory.
type TblInventories []*TblInventory
