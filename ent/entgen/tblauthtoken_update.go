// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthclient"
	"inventory/ent/entgen/tblauthtoken"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthTokenUpdate is the builder for updating TblAuthToken entities.
type TblAuthTokenUpdate struct {
	config
	hooks    []Hook
	mutation *TblAuthTokenMutation
}

// Where appends a list predicates to the TblAuthTokenUpdate builder.
func (tatu *TblAuthTokenUpdate) Where(ps ...predicate.TblAuthToken) *TblAuthTokenUpdate {
	tatu.mutation.Where(ps...)
	return tatu
}

// SetAuthUUID sets the "auth_uuid" field.
func (tatu *TblAuthTokenUpdate) SetAuthUUID(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetAuthUUID(s)
	return tatu
}

// SetNillableAuthUUID sets the "auth_uuid" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableAuthUUID(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetAuthUUID(*s)
	}
	return tatu
}

// SetAuthXref sets the "auth_xref" field.
func (tatu *TblAuthTokenUpdate) SetAuthXref(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetAuthXref(s)
	return tatu
}

// SetNillableAuthXref sets the "auth_xref" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableAuthXref(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetAuthXref(*s)
	}
	return tatu
}

// SetAccesstoken sets the "accesstoken" field.
func (tatu *TblAuthTokenUpdate) SetAccesstoken(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetAccesstoken(s)
	return tatu
}

// SetNillableAccesstoken sets the "accesstoken" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableAccesstoken(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetAccesstoken(*s)
	}
	return tatu
}

// SetAccesstokenexpiresin sets the "accesstokenexpiresin" field.
func (tatu *TblAuthTokenUpdate) SetAccesstokenexpiresin(i int) *TblAuthTokenUpdate {
	tatu.mutation.ResetAccesstokenexpiresin()
	tatu.mutation.SetAccesstokenexpiresin(i)
	return tatu
}

// SetNillableAccesstokenexpiresin sets the "accesstokenexpiresin" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableAccesstokenexpiresin(i *int) *TblAuthTokenUpdate {
	if i != nil {
		tatu.SetAccesstokenexpiresin(*i)
	}
	return tatu
}

// AddAccesstokenexpiresin adds i to the "accesstokenexpiresin" field.
func (tatu *TblAuthTokenUpdate) AddAccesstokenexpiresin(i int) *TblAuthTokenUpdate {
	tatu.mutation.AddAccesstokenexpiresin(i)
	return tatu
}

// SetClientid sets the "clientid" field.
func (tatu *TblAuthTokenUpdate) SetClientid(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetClientid(s)
	return tatu
}

// SetNillableClientid sets the "clientid" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableClientid(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetClientid(*s)
	}
	return tatu
}

// ClearClientid clears the value of the "clientid" field.
func (tatu *TblAuthTokenUpdate) ClearClientid() *TblAuthTokenUpdate {
	tatu.mutation.ClearClientid()
	return tatu
}

// SetUserUlid sets the "user_ulid" field.
func (tatu *TblAuthTokenUpdate) SetUserUlid(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetUserUlid(s)
	return tatu
}

// SetNillableUserUlid sets the "user_ulid" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableUserUlid(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetUserUlid(*s)
	}
	return tatu
}

// ClearUserUlid clears the value of the "user_ulid" field.
func (tatu *TblAuthTokenUpdate) ClearUserUlid() *TblAuthTokenUpdate {
	tatu.mutation.ClearUserUlid()
	return tatu
}

// SetRefreshtoken sets the "refreshtoken" field.
func (tatu *TblAuthTokenUpdate) SetRefreshtoken(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetRefreshtoken(s)
	return tatu
}

// SetNillableRefreshtoken sets the "refreshtoken" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableRefreshtoken(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetRefreshtoken(*s)
	}
	return tatu
}

// SetRefreshtokenexpiresin sets the "refreshtokenexpiresin" field.
func (tatu *TblAuthTokenUpdate) SetRefreshtokenexpiresin(i int) *TblAuthTokenUpdate {
	tatu.mutation.ResetRefreshtokenexpiresin()
	tatu.mutation.SetRefreshtokenexpiresin(i)
	return tatu
}

// SetNillableRefreshtokenexpiresin sets the "refreshtokenexpiresin" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableRefreshtokenexpiresin(i *int) *TblAuthTokenUpdate {
	if i != nil {
		tatu.SetRefreshtokenexpiresin(*i)
	}
	return tatu
}

// AddRefreshtokenexpiresin adds i to the "refreshtokenexpiresin" field.
func (tatu *TblAuthTokenUpdate) AddRefreshtokenexpiresin(i int) *TblAuthTokenUpdate {
	tatu.mutation.AddRefreshtokenexpiresin(i)
	return tatu
}

// SetUpdatedat sets the "updatedat" field.
func (tatu *TblAuthTokenUpdate) SetUpdatedat(t time.Time) *TblAuthTokenUpdate {
	tatu.mutation.SetUpdatedat(t)
	return tatu
}

// SetNillableUpdatedat sets the "updatedat" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableUpdatedat(t *time.Time) *TblAuthTokenUpdate {
	if t != nil {
		tatu.SetUpdatedat(*t)
	}
	return tatu
}

// SetDeletedat sets the "deletedat" field.
func (tatu *TblAuthTokenUpdate) SetDeletedat(t time.Time) *TblAuthTokenUpdate {
	tatu.mutation.SetDeletedat(t)
	return tatu
}

// SetNillableDeletedat sets the "deletedat" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableDeletedat(t *time.Time) *TblAuthTokenUpdate {
	if t != nil {
		tatu.SetDeletedat(*t)
	}
	return tatu
}

// ClearDeletedat clears the value of the "deletedat" field.
func (tatu *TblAuthTokenUpdate) ClearDeletedat() *TblAuthTokenUpdate {
	tatu.mutation.ClearDeletedat()
	return tatu
}

// SetIPAddress sets the "ip_address" field.
func (tatu *TblAuthTokenUpdate) SetIPAddress(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetIPAddress(s)
	return tatu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableIPAddress(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetIPAddress(*s)
	}
	return tatu
}

// SetUseragent sets the "useragent" field.
func (tatu *TblAuthTokenUpdate) SetUseragent(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetUseragent(s)
	return tatu
}

// SetNillableUseragent sets the "useragent" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableUseragent(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetUseragent(*s)
	}
	return tatu
}

// SetCreatedby sets the "createdby" field.
func (tatu *TblAuthTokenUpdate) SetCreatedby(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetCreatedby(s)
	return tatu
}

// SetNillableCreatedby sets the "createdby" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableCreatedby(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetCreatedby(*s)
	}
	return tatu
}

// SetUpdatedby sets the "updatedby" field.
func (tatu *TblAuthTokenUpdate) SetUpdatedby(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetUpdatedby(s)
	return tatu
}

// SetNillableUpdatedby sets the "updatedby" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableUpdatedby(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetUpdatedby(*s)
	}
	return tatu
}

// SetDeletedby sets the "deletedby" field.
func (tatu *TblAuthTokenUpdate) SetDeletedby(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetDeletedby(s)
	return tatu
}

// SetNillableDeletedby sets the "deletedby" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableDeletedby(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetDeletedby(*s)
	}
	return tatu
}

// ClearDeletedby clears the value of the "deletedby" field.
func (tatu *TblAuthTokenUpdate) ClearDeletedby() *TblAuthTokenUpdate {
	tatu.mutation.ClearDeletedby()
	return tatu
}

// SetCode sets the "code" field.
func (tatu *TblAuthTokenUpdate) SetCode(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetCode(s)
	return tatu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableCode(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetCode(*s)
	}
	return tatu
}

// SetCodeexpiresin sets the "codeexpiresin" field.
func (tatu *TblAuthTokenUpdate) SetCodeexpiresin(i int) *TblAuthTokenUpdate {
	tatu.mutation.ResetCodeexpiresin()
	tatu.mutation.SetCodeexpiresin(i)
	return tatu
}

// SetNillableCodeexpiresin sets the "codeexpiresin" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableCodeexpiresin(i *int) *TblAuthTokenUpdate {
	if i != nil {
		tatu.SetCodeexpiresin(*i)
	}
	return tatu
}

// AddCodeexpiresin adds i to the "codeexpiresin" field.
func (tatu *TblAuthTokenUpdate) AddCodeexpiresin(i int) *TblAuthTokenUpdate {
	tatu.mutation.AddCodeexpiresin(i)
	return tatu
}

// SetCodechallenge sets the "codechallenge" field.
func (tatu *TblAuthTokenUpdate) SetCodechallenge(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetCodechallenge(s)
	return tatu
}

// SetNillableCodechallenge sets the "codechallenge" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableCodechallenge(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetCodechallenge(*s)
	}
	return tatu
}

// ClearCodechallenge clears the value of the "codechallenge" field.
func (tatu *TblAuthTokenUpdate) ClearCodechallenge() *TblAuthTokenUpdate {
	tatu.mutation.ClearCodechallenge()
	return tatu
}

// SetRedirectURI sets the "redirect_uri" field.
func (tatu *TblAuthTokenUpdate) SetRedirectURI(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetRedirectURI(s)
	return tatu
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableRedirectURI(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetRedirectURI(*s)
	}
	return tatu
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (tatu *TblAuthTokenUpdate) ClearRedirectURI() *TblAuthTokenUpdate {
	tatu.mutation.ClearRedirectURI()
	return tatu
}

// SetScope sets the "scope" field.
func (tatu *TblAuthTokenUpdate) SetScope(s string) *TblAuthTokenUpdate {
	tatu.mutation.SetScope(s)
	return tatu
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableScope(s *string) *TblAuthTokenUpdate {
	if s != nil {
		tatu.SetScope(*s)
	}
	return tatu
}

// SetTokenClientID sets the "TokenClient" edge to the TblAuthClient entity by ID.
func (tatu *TblAuthTokenUpdate) SetTokenClientID(id string) *TblAuthTokenUpdate {
	tatu.mutation.SetTokenClientID(id)
	return tatu
}

// SetNillableTokenClientID sets the "TokenClient" edge to the TblAuthClient entity by ID if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableTokenClientID(id *string) *TblAuthTokenUpdate {
	if id != nil {
		tatu = tatu.SetTokenClientID(*id)
	}
	return tatu
}

// SetTokenClient sets the "TokenClient" edge to the TblAuthClient entity.
func (tatu *TblAuthTokenUpdate) SetTokenClient(t *TblAuthClient) *TblAuthTokenUpdate {
	return tatu.SetTokenClientID(t.ID)
}

// SetTokenUserID sets the "TokenUser" edge to the TblUser entity by ID.
func (tatu *TblAuthTokenUpdate) SetTokenUserID(id string) *TblAuthTokenUpdate {
	tatu.mutation.SetTokenUserID(id)
	return tatu
}

// SetNillableTokenUserID sets the "TokenUser" edge to the TblUser entity by ID if the given value is not nil.
func (tatu *TblAuthTokenUpdate) SetNillableTokenUserID(id *string) *TblAuthTokenUpdate {
	if id != nil {
		tatu = tatu.SetTokenUserID(*id)
	}
	return tatu
}

// SetTokenUser sets the "TokenUser" edge to the TblUser entity.
func (tatu *TblAuthTokenUpdate) SetTokenUser(t *TblUser) *TblAuthTokenUpdate {
	return tatu.SetTokenUserID(t.ID)
}

// Mutation returns the TblAuthTokenMutation object of the builder.
func (tatu *TblAuthTokenUpdate) Mutation() *TblAuthTokenMutation {
	return tatu.mutation
}

// ClearTokenClient clears the "TokenClient" edge to the TblAuthClient entity.
func (tatu *TblAuthTokenUpdate) ClearTokenClient() *TblAuthTokenUpdate {
	tatu.mutation.ClearTokenClient()
	return tatu
}

// ClearTokenUser clears the "TokenUser" edge to the TblUser entity.
func (tatu *TblAuthTokenUpdate) ClearTokenUser() *TblAuthTokenUpdate {
	tatu.mutation.ClearTokenUser()
	return tatu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tatu *TblAuthTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tatu.sqlSave, tatu.mutation, tatu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tatu *TblAuthTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := tatu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tatu *TblAuthTokenUpdate) Exec(ctx context.Context) error {
	_, err := tatu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tatu *TblAuthTokenUpdate) ExecX(ctx context.Context) {
	if err := tatu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tatu *TblAuthTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tblauthtoken.Table, tblauthtoken.Columns, sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString))
	if ps := tatu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tatu.mutation.AuthUUID(); ok {
		_spec.SetField(tblauthtoken.FieldAuthUUID, field.TypeString, value)
	}
	if value, ok := tatu.mutation.AuthXref(); ok {
		_spec.SetField(tblauthtoken.FieldAuthXref, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Accesstoken(); ok {
		_spec.SetField(tblauthtoken.FieldAccesstoken, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Accesstokenexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldAccesstokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatu.mutation.AddedAccesstokenexpiresin(); ok {
		_spec.AddField(tblauthtoken.FieldAccesstokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatu.mutation.Refreshtoken(); ok {
		_spec.SetField(tblauthtoken.FieldRefreshtoken, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Refreshtokenexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldRefreshtokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatu.mutation.AddedRefreshtokenexpiresin(); ok {
		_spec.AddField(tblauthtoken.FieldRefreshtokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatu.mutation.Updatedat(); ok {
		_spec.SetField(tblauthtoken.FieldUpdatedat, field.TypeTime, value)
	}
	if value, ok := tatu.mutation.Deletedat(); ok {
		_spec.SetField(tblauthtoken.FieldDeletedat, field.TypeTime, value)
	}
	if tatu.mutation.DeletedatCleared() {
		_spec.ClearField(tblauthtoken.FieldDeletedat, field.TypeTime)
	}
	if value, ok := tatu.mutation.IPAddress(); ok {
		_spec.SetField(tblauthtoken.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Useragent(); ok {
		_spec.SetField(tblauthtoken.FieldUseragent, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Createdby(); ok {
		_spec.SetField(tblauthtoken.FieldCreatedby, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Updatedby(); ok {
		_spec.SetField(tblauthtoken.FieldUpdatedby, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Deletedby(); ok {
		_spec.SetField(tblauthtoken.FieldDeletedby, field.TypeString, value)
	}
	if tatu.mutation.DeletedbyCleared() {
		_spec.ClearField(tblauthtoken.FieldDeletedby, field.TypeString)
	}
	if value, ok := tatu.mutation.Code(); ok {
		_spec.SetField(tblauthtoken.FieldCode, field.TypeString, value)
	}
	if value, ok := tatu.mutation.Codeexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldCodeexpiresin, field.TypeInt, value)
	}
	if value, ok := tatu.mutation.AddedCodeexpiresin(); ok {
		_spec.AddField(tblauthtoken.FieldCodeexpiresin, field.TypeInt, value)
	}
	if value, ok := tatu.mutation.Codechallenge(); ok {
		_spec.SetField(tblauthtoken.FieldCodechallenge, field.TypeString, value)
	}
	if tatu.mutation.CodechallengeCleared() {
		_spec.ClearField(tblauthtoken.FieldCodechallenge, field.TypeString)
	}
	if value, ok := tatu.mutation.RedirectURI(); ok {
		_spec.SetField(tblauthtoken.FieldRedirectURI, field.TypeString, value)
	}
	if tatu.mutation.RedirectURICleared() {
		_spec.ClearField(tblauthtoken.FieldRedirectURI, field.TypeString)
	}
	if value, ok := tatu.mutation.Scope(); ok {
		_spec.SetField(tblauthtoken.FieldScope, field.TypeString, value)
	}
	if tatu.mutation.TokenClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenClientTable,
			Columns: []string{tblauthtoken.TokenClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatu.mutation.TokenClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenClientTable,
			Columns: []string{tblauthtoken.TokenClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tatu.mutation.TokenUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenUserTable,
			Columns: []string{tblauthtoken.TokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatu.mutation.TokenUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenUserTable,
			Columns: []string{tblauthtoken.TokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tatu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tatu.mutation.done = true
	return n, nil
}

// TblAuthTokenUpdateOne is the builder for updating a single TblAuthToken entity.
type TblAuthTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblAuthTokenMutation
}

// SetAuthUUID sets the "auth_uuid" field.
func (tatuo *TblAuthTokenUpdateOne) SetAuthUUID(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetAuthUUID(s)
	return tatuo
}

// SetNillableAuthUUID sets the "auth_uuid" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableAuthUUID(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetAuthUUID(*s)
	}
	return tatuo
}

// SetAuthXref sets the "auth_xref" field.
func (tatuo *TblAuthTokenUpdateOne) SetAuthXref(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetAuthXref(s)
	return tatuo
}

// SetNillableAuthXref sets the "auth_xref" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableAuthXref(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetAuthXref(*s)
	}
	return tatuo
}

// SetAccesstoken sets the "accesstoken" field.
func (tatuo *TblAuthTokenUpdateOne) SetAccesstoken(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetAccesstoken(s)
	return tatuo
}

// SetNillableAccesstoken sets the "accesstoken" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableAccesstoken(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetAccesstoken(*s)
	}
	return tatuo
}

// SetAccesstokenexpiresin sets the "accesstokenexpiresin" field.
func (tatuo *TblAuthTokenUpdateOne) SetAccesstokenexpiresin(i int) *TblAuthTokenUpdateOne {
	tatuo.mutation.ResetAccesstokenexpiresin()
	tatuo.mutation.SetAccesstokenexpiresin(i)
	return tatuo
}

// SetNillableAccesstokenexpiresin sets the "accesstokenexpiresin" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableAccesstokenexpiresin(i *int) *TblAuthTokenUpdateOne {
	if i != nil {
		tatuo.SetAccesstokenexpiresin(*i)
	}
	return tatuo
}

// AddAccesstokenexpiresin adds i to the "accesstokenexpiresin" field.
func (tatuo *TblAuthTokenUpdateOne) AddAccesstokenexpiresin(i int) *TblAuthTokenUpdateOne {
	tatuo.mutation.AddAccesstokenexpiresin(i)
	return tatuo
}

// SetClientid sets the "clientid" field.
func (tatuo *TblAuthTokenUpdateOne) SetClientid(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetClientid(s)
	return tatuo
}

// SetNillableClientid sets the "clientid" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableClientid(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetClientid(*s)
	}
	return tatuo
}

// ClearClientid clears the value of the "clientid" field.
func (tatuo *TblAuthTokenUpdateOne) ClearClientid() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearClientid()
	return tatuo
}

// SetUserUlid sets the "user_ulid" field.
func (tatuo *TblAuthTokenUpdateOne) SetUserUlid(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetUserUlid(s)
	return tatuo
}

// SetNillableUserUlid sets the "user_ulid" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableUserUlid(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetUserUlid(*s)
	}
	return tatuo
}

// ClearUserUlid clears the value of the "user_ulid" field.
func (tatuo *TblAuthTokenUpdateOne) ClearUserUlid() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearUserUlid()
	return tatuo
}

// SetRefreshtoken sets the "refreshtoken" field.
func (tatuo *TblAuthTokenUpdateOne) SetRefreshtoken(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetRefreshtoken(s)
	return tatuo
}

// SetNillableRefreshtoken sets the "refreshtoken" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableRefreshtoken(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetRefreshtoken(*s)
	}
	return tatuo
}

// SetRefreshtokenexpiresin sets the "refreshtokenexpiresin" field.
func (tatuo *TblAuthTokenUpdateOne) SetRefreshtokenexpiresin(i int) *TblAuthTokenUpdateOne {
	tatuo.mutation.ResetRefreshtokenexpiresin()
	tatuo.mutation.SetRefreshtokenexpiresin(i)
	return tatuo
}

// SetNillableRefreshtokenexpiresin sets the "refreshtokenexpiresin" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableRefreshtokenexpiresin(i *int) *TblAuthTokenUpdateOne {
	if i != nil {
		tatuo.SetRefreshtokenexpiresin(*i)
	}
	return tatuo
}

// AddRefreshtokenexpiresin adds i to the "refreshtokenexpiresin" field.
func (tatuo *TblAuthTokenUpdateOne) AddRefreshtokenexpiresin(i int) *TblAuthTokenUpdateOne {
	tatuo.mutation.AddRefreshtokenexpiresin(i)
	return tatuo
}

// SetUpdatedat sets the "updatedat" field.
func (tatuo *TblAuthTokenUpdateOne) SetUpdatedat(t time.Time) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetUpdatedat(t)
	return tatuo
}

// SetNillableUpdatedat sets the "updatedat" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableUpdatedat(t *time.Time) *TblAuthTokenUpdateOne {
	if t != nil {
		tatuo.SetUpdatedat(*t)
	}
	return tatuo
}

// SetDeletedat sets the "deletedat" field.
func (tatuo *TblAuthTokenUpdateOne) SetDeletedat(t time.Time) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetDeletedat(t)
	return tatuo
}

// SetNillableDeletedat sets the "deletedat" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableDeletedat(t *time.Time) *TblAuthTokenUpdateOne {
	if t != nil {
		tatuo.SetDeletedat(*t)
	}
	return tatuo
}

// ClearDeletedat clears the value of the "deletedat" field.
func (tatuo *TblAuthTokenUpdateOne) ClearDeletedat() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearDeletedat()
	return tatuo
}

// SetIPAddress sets the "ip_address" field.
func (tatuo *TblAuthTokenUpdateOne) SetIPAddress(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetIPAddress(s)
	return tatuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableIPAddress(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetIPAddress(*s)
	}
	return tatuo
}

// SetUseragent sets the "useragent" field.
func (tatuo *TblAuthTokenUpdateOne) SetUseragent(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetUseragent(s)
	return tatuo
}

// SetNillableUseragent sets the "useragent" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableUseragent(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetUseragent(*s)
	}
	return tatuo
}

// SetCreatedby sets the "createdby" field.
func (tatuo *TblAuthTokenUpdateOne) SetCreatedby(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetCreatedby(s)
	return tatuo
}

// SetNillableCreatedby sets the "createdby" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableCreatedby(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetCreatedby(*s)
	}
	return tatuo
}

// SetUpdatedby sets the "updatedby" field.
func (tatuo *TblAuthTokenUpdateOne) SetUpdatedby(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetUpdatedby(s)
	return tatuo
}

// SetNillableUpdatedby sets the "updatedby" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableUpdatedby(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetUpdatedby(*s)
	}
	return tatuo
}

// SetDeletedby sets the "deletedby" field.
func (tatuo *TblAuthTokenUpdateOne) SetDeletedby(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetDeletedby(s)
	return tatuo
}

// SetNillableDeletedby sets the "deletedby" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableDeletedby(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetDeletedby(*s)
	}
	return tatuo
}

// ClearDeletedby clears the value of the "deletedby" field.
func (tatuo *TblAuthTokenUpdateOne) ClearDeletedby() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearDeletedby()
	return tatuo
}

// SetCode sets the "code" field.
func (tatuo *TblAuthTokenUpdateOne) SetCode(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetCode(s)
	return tatuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableCode(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetCode(*s)
	}
	return tatuo
}

// SetCodeexpiresin sets the "codeexpiresin" field.
func (tatuo *TblAuthTokenUpdateOne) SetCodeexpiresin(i int) *TblAuthTokenUpdateOne {
	tatuo.mutation.ResetCodeexpiresin()
	tatuo.mutation.SetCodeexpiresin(i)
	return tatuo
}

// SetNillableCodeexpiresin sets the "codeexpiresin" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableCodeexpiresin(i *int) *TblAuthTokenUpdateOne {
	if i != nil {
		tatuo.SetCodeexpiresin(*i)
	}
	return tatuo
}

// AddCodeexpiresin adds i to the "codeexpiresin" field.
func (tatuo *TblAuthTokenUpdateOne) AddCodeexpiresin(i int) *TblAuthTokenUpdateOne {
	tatuo.mutation.AddCodeexpiresin(i)
	return tatuo
}

// SetCodechallenge sets the "codechallenge" field.
func (tatuo *TblAuthTokenUpdateOne) SetCodechallenge(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetCodechallenge(s)
	return tatuo
}

// SetNillableCodechallenge sets the "codechallenge" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableCodechallenge(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetCodechallenge(*s)
	}
	return tatuo
}

// ClearCodechallenge clears the value of the "codechallenge" field.
func (tatuo *TblAuthTokenUpdateOne) ClearCodechallenge() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearCodechallenge()
	return tatuo
}

// SetRedirectURI sets the "redirect_uri" field.
func (tatuo *TblAuthTokenUpdateOne) SetRedirectURI(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetRedirectURI(s)
	return tatuo
}

// SetNillableRedirectURI sets the "redirect_uri" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableRedirectURI(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetRedirectURI(*s)
	}
	return tatuo
}

// ClearRedirectURI clears the value of the "redirect_uri" field.
func (tatuo *TblAuthTokenUpdateOne) ClearRedirectURI() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearRedirectURI()
	return tatuo
}

// SetScope sets the "scope" field.
func (tatuo *TblAuthTokenUpdateOne) SetScope(s string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetScope(s)
	return tatuo
}

// SetNillableScope sets the "scope" field if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableScope(s *string) *TblAuthTokenUpdateOne {
	if s != nil {
		tatuo.SetScope(*s)
	}
	return tatuo
}

// SetTokenClientID sets the "TokenClient" edge to the TblAuthClient entity by ID.
func (tatuo *TblAuthTokenUpdateOne) SetTokenClientID(id string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetTokenClientID(id)
	return tatuo
}

// SetNillableTokenClientID sets the "TokenClient" edge to the TblAuthClient entity by ID if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableTokenClientID(id *string) *TblAuthTokenUpdateOne {
	if id != nil {
		tatuo = tatuo.SetTokenClientID(*id)
	}
	return tatuo
}

// SetTokenClient sets the "TokenClient" edge to the TblAuthClient entity.
func (tatuo *TblAuthTokenUpdateOne) SetTokenClient(t *TblAuthClient) *TblAuthTokenUpdateOne {
	return tatuo.SetTokenClientID(t.ID)
}

// SetTokenUserID sets the "TokenUser" edge to the TblUser entity by ID.
func (tatuo *TblAuthTokenUpdateOne) SetTokenUserID(id string) *TblAuthTokenUpdateOne {
	tatuo.mutation.SetTokenUserID(id)
	return tatuo
}

// SetNillableTokenUserID sets the "TokenUser" edge to the TblUser entity by ID if the given value is not nil.
func (tatuo *TblAuthTokenUpdateOne) SetNillableTokenUserID(id *string) *TblAuthTokenUpdateOne {
	if id != nil {
		tatuo = tatuo.SetTokenUserID(*id)
	}
	return tatuo
}

// SetTokenUser sets the "TokenUser" edge to the TblUser entity.
func (tatuo *TblAuthTokenUpdateOne) SetTokenUser(t *TblUser) *TblAuthTokenUpdateOne {
	return tatuo.SetTokenUserID(t.ID)
}

// Mutation returns the TblAuthTokenMutation object of the builder.
func (tatuo *TblAuthTokenUpdateOne) Mutation() *TblAuthTokenMutation {
	return tatuo.mutation
}

// ClearTokenClient clears the "TokenClient" edge to the TblAuthClient entity.
func (tatuo *TblAuthTokenUpdateOne) ClearTokenClient() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearTokenClient()
	return tatuo
}

// ClearTokenUser clears the "TokenUser" edge to the TblUser entity.
func (tatuo *TblAuthTokenUpdateOne) ClearTokenUser() *TblAuthTokenUpdateOne {
	tatuo.mutation.ClearTokenUser()
	return tatuo
}

// Where appends a list predicates to the TblAuthTokenUpdate builder.
func (tatuo *TblAuthTokenUpdateOne) Where(ps ...predicate.TblAuthToken) *TblAuthTokenUpdateOne {
	tatuo.mutation.Where(ps...)
	return tatuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tatuo *TblAuthTokenUpdateOne) Select(field string, fields ...string) *TblAuthTokenUpdateOne {
	tatuo.fields = append([]string{field}, fields...)
	return tatuo
}

// Save executes the query and returns the updated TblAuthToken entity.
func (tatuo *TblAuthTokenUpdateOne) Save(ctx context.Context) (*TblAuthToken, error) {
	return withHooks(ctx, tatuo.sqlSave, tatuo.mutation, tatuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tatuo *TblAuthTokenUpdateOne) SaveX(ctx context.Context) *TblAuthToken {
	node, err := tatuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tatuo *TblAuthTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := tatuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tatuo *TblAuthTokenUpdateOne) ExecX(ctx context.Context) {
	if err := tatuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tatuo *TblAuthTokenUpdateOne) sqlSave(ctx context.Context) (_node *TblAuthToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(tblauthtoken.Table, tblauthtoken.Columns, sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString))
	id, ok := tatuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblAuthToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tatuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblauthtoken.FieldID)
		for _, f := range fields {
			if !tblauthtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tblauthtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tatuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tatuo.mutation.AuthUUID(); ok {
		_spec.SetField(tblauthtoken.FieldAuthUUID, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.AuthXref(); ok {
		_spec.SetField(tblauthtoken.FieldAuthXref, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Accesstoken(); ok {
		_spec.SetField(tblauthtoken.FieldAccesstoken, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Accesstokenexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldAccesstokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatuo.mutation.AddedAccesstokenexpiresin(); ok {
		_spec.AddField(tblauthtoken.FieldAccesstokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatuo.mutation.Refreshtoken(); ok {
		_spec.SetField(tblauthtoken.FieldRefreshtoken, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Refreshtokenexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldRefreshtokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatuo.mutation.AddedRefreshtokenexpiresin(); ok {
		_spec.AddField(tblauthtoken.FieldRefreshtokenexpiresin, field.TypeInt, value)
	}
	if value, ok := tatuo.mutation.Updatedat(); ok {
		_spec.SetField(tblauthtoken.FieldUpdatedat, field.TypeTime, value)
	}
	if value, ok := tatuo.mutation.Deletedat(); ok {
		_spec.SetField(tblauthtoken.FieldDeletedat, field.TypeTime, value)
	}
	if tatuo.mutation.DeletedatCleared() {
		_spec.ClearField(tblauthtoken.FieldDeletedat, field.TypeTime)
	}
	if value, ok := tatuo.mutation.IPAddress(); ok {
		_spec.SetField(tblauthtoken.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Useragent(); ok {
		_spec.SetField(tblauthtoken.FieldUseragent, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Createdby(); ok {
		_spec.SetField(tblauthtoken.FieldCreatedby, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Updatedby(); ok {
		_spec.SetField(tblauthtoken.FieldUpdatedby, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Deletedby(); ok {
		_spec.SetField(tblauthtoken.FieldDeletedby, field.TypeString, value)
	}
	if tatuo.mutation.DeletedbyCleared() {
		_spec.ClearField(tblauthtoken.FieldDeletedby, field.TypeString)
	}
	if value, ok := tatuo.mutation.Code(); ok {
		_spec.SetField(tblauthtoken.FieldCode, field.TypeString, value)
	}
	if value, ok := tatuo.mutation.Codeexpiresin(); ok {
		_spec.SetField(tblauthtoken.FieldCodeexpiresin, field.TypeInt, value)
	}
	if value, ok := tatuo.mutation.AddedCodeexpiresin(); ok {
		_spec.AddField(tblauthtoken.FieldCodeexpiresin, field.TypeInt, value)
	}
	if value, ok := tatuo.mutation.Codechallenge(); ok {
		_spec.SetField(tblauthtoken.FieldCodechallenge, field.TypeString, value)
	}
	if tatuo.mutation.CodechallengeCleared() {
		_spec.ClearField(tblauthtoken.FieldCodechallenge, field.TypeString)
	}
	if value, ok := tatuo.mutation.RedirectURI(); ok {
		_spec.SetField(tblauthtoken.FieldRedirectURI, field.TypeString, value)
	}
	if tatuo.mutation.RedirectURICleared() {
		_spec.ClearField(tblauthtoken.FieldRedirectURI, field.TypeString)
	}
	if value, ok := tatuo.mutation.Scope(); ok {
		_spec.SetField(tblauthtoken.FieldScope, field.TypeString, value)
	}
	if tatuo.mutation.TokenClientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenClientTable,
			Columns: []string{tblauthtoken.TokenClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatuo.mutation.TokenClientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenClientTable,
			Columns: []string{tblauthtoken.TokenClientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthclient.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tatuo.mutation.TokenUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenUserTable,
			Columns: []string{tblauthtoken.TokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tatuo.mutation.TokenUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblauthtoken.TokenUserTable,
			Columns: []string{tblauthtoken.TokenUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblAuthToken{config: tatuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tatuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblauthtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tatuo.mutation.done = true
	return _node, nil
}
