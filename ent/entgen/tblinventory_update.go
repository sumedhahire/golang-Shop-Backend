// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblinventorytag"
	"inventory/ent/entgen/tblpayment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblInventoryUpdate is the builder for updating TblInventory entities.
type TblInventoryUpdate struct {
	config
	hooks    []Hook
	mutation *TblInventoryMutation
}

// Where appends a list predicates to the TblInventoryUpdate builder.
func (tiu *TblInventoryUpdate) Where(ps ...predicate.TblInventory) *TblInventoryUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetName sets the "Name" field.
func (tiu *TblInventoryUpdate) SetName(s string) *TblInventoryUpdate {
	tiu.mutation.SetName(s)
	return tiu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillableName(s *string) *TblInventoryUpdate {
	if s != nil {
		tiu.SetName(*s)
	}
	return tiu
}

// SetDescription sets the "Description" field.
func (tiu *TblInventoryUpdate) SetDescription(s string) *TblInventoryUpdate {
	tiu.mutation.SetDescription(s)
	return tiu
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillableDescription(s *string) *TblInventoryUpdate {
	if s != nil {
		tiu.SetDescription(*s)
	}
	return tiu
}

// SetImageLink sets the "ImageLink" field.
func (tiu *TblInventoryUpdate) SetImageLink(s string) *TblInventoryUpdate {
	tiu.mutation.SetImageLink(s)
	return tiu
}

// SetNillableImageLink sets the "ImageLink" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillableImageLink(s *string) *TblInventoryUpdate {
	if s != nil {
		tiu.SetImageLink(*s)
	}
	return tiu
}

// SetPrice sets the "Price" field.
func (tiu *TblInventoryUpdate) SetPrice(f float32) *TblInventoryUpdate {
	tiu.mutation.ResetPrice()
	tiu.mutation.SetPrice(f)
	return tiu
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillablePrice(f *float32) *TblInventoryUpdate {
	if f != nil {
		tiu.SetPrice(*f)
	}
	return tiu
}

// AddPrice adds f to the "Price" field.
func (tiu *TblInventoryUpdate) AddPrice(f float32) *TblInventoryUpdate {
	tiu.mutation.AddPrice(f)
	return tiu
}

// SetIsActive sets the "Is_Active" field.
func (tiu *TblInventoryUpdate) SetIsActive(b bool) *TblInventoryUpdate {
	tiu.mutation.SetIsActive(b)
	return tiu
}

// SetNillableIsActive sets the "Is_Active" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillableIsActive(b *bool) *TblInventoryUpdate {
	if b != nil {
		tiu.SetIsActive(*b)
	}
	return tiu
}

// SetCreatedAt sets the "Created_at" field.
func (tiu *TblInventoryUpdate) SetCreatedAt(t time.Time) *TblInventoryUpdate {
	tiu.mutation.SetCreatedAt(t)
	return tiu
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillableCreatedAt(t *time.Time) *TblInventoryUpdate {
	if t != nil {
		tiu.SetCreatedAt(*t)
	}
	return tiu
}

// SetUpdatedAt sets the "Updated_at" field.
func (tiu *TblInventoryUpdate) SetUpdatedAt(t time.Time) *TblInventoryUpdate {
	tiu.mutation.SetUpdatedAt(t)
	return tiu
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillableUpdatedAt(t *time.Time) *TblInventoryUpdate {
	if t != nil {
		tiu.SetUpdatedAt(*t)
	}
	return tiu
}

// SetDeletedAt sets the "Deleted_at" field.
func (tiu *TblInventoryUpdate) SetDeletedAt(t time.Time) *TblInventoryUpdate {
	tiu.mutation.SetDeletedAt(t)
	return tiu
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tiu *TblInventoryUpdate) SetNillableDeletedAt(t *time.Time) *TblInventoryUpdate {
	if t != nil {
		tiu.SetDeletedAt(*t)
	}
	return tiu
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (tiu *TblInventoryUpdate) ClearDeletedAt() *TblInventoryUpdate {
	tiu.mutation.ClearDeletedAt()
	return tiu
}

// AddInventoryTagIDs adds the "inventoryTag" edge to the TblInventoryTag entity by IDs.
func (tiu *TblInventoryUpdate) AddInventoryTagIDs(ids ...string) *TblInventoryUpdate {
	tiu.mutation.AddInventoryTagIDs(ids...)
	return tiu
}

// AddInventoryTag adds the "inventoryTag" edges to the TblInventoryTag entity.
func (tiu *TblInventoryUpdate) AddInventoryTag(t ...*TblInventoryTag) *TblInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiu.AddInventoryTagIDs(ids...)
}

// AddInventoryCartIDs adds the "InventoryCart" edge to the TblCart entity by IDs.
func (tiu *TblInventoryUpdate) AddInventoryCartIDs(ids ...string) *TblInventoryUpdate {
	tiu.mutation.AddInventoryCartIDs(ids...)
	return tiu
}

// AddInventoryCart adds the "InventoryCart" edges to the TblCart entity.
func (tiu *TblInventoryUpdate) AddInventoryCart(t ...*TblCart) *TblInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiu.AddInventoryCartIDs(ids...)
}

// AddInventoryPaymentIDs adds the "InventoryPayment" edge to the TblPayment entity by IDs.
func (tiu *TblInventoryUpdate) AddInventoryPaymentIDs(ids ...string) *TblInventoryUpdate {
	tiu.mutation.AddInventoryPaymentIDs(ids...)
	return tiu
}

// AddInventoryPayment adds the "InventoryPayment" edges to the TblPayment entity.
func (tiu *TblInventoryUpdate) AddInventoryPayment(t ...*TblPayment) *TblInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiu.AddInventoryPaymentIDs(ids...)
}

// Mutation returns the TblInventoryMutation object of the builder.
func (tiu *TblInventoryUpdate) Mutation() *TblInventoryMutation {
	return tiu.mutation
}

// ClearInventoryTag clears all "inventoryTag" edges to the TblInventoryTag entity.
func (tiu *TblInventoryUpdate) ClearInventoryTag() *TblInventoryUpdate {
	tiu.mutation.ClearInventoryTag()
	return tiu
}

// RemoveInventoryTagIDs removes the "inventoryTag" edge to TblInventoryTag entities by IDs.
func (tiu *TblInventoryUpdate) RemoveInventoryTagIDs(ids ...string) *TblInventoryUpdate {
	tiu.mutation.RemoveInventoryTagIDs(ids...)
	return tiu
}

// RemoveInventoryTag removes "inventoryTag" edges to TblInventoryTag entities.
func (tiu *TblInventoryUpdate) RemoveInventoryTag(t ...*TblInventoryTag) *TblInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiu.RemoveInventoryTagIDs(ids...)
}

// ClearInventoryCart clears all "InventoryCart" edges to the TblCart entity.
func (tiu *TblInventoryUpdate) ClearInventoryCart() *TblInventoryUpdate {
	tiu.mutation.ClearInventoryCart()
	return tiu
}

// RemoveInventoryCartIDs removes the "InventoryCart" edge to TblCart entities by IDs.
func (tiu *TblInventoryUpdate) RemoveInventoryCartIDs(ids ...string) *TblInventoryUpdate {
	tiu.mutation.RemoveInventoryCartIDs(ids...)
	return tiu
}

// RemoveInventoryCart removes "InventoryCart" edges to TblCart entities.
func (tiu *TblInventoryUpdate) RemoveInventoryCart(t ...*TblCart) *TblInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiu.RemoveInventoryCartIDs(ids...)
}

// ClearInventoryPayment clears all "InventoryPayment" edges to the TblPayment entity.
func (tiu *TblInventoryUpdate) ClearInventoryPayment() *TblInventoryUpdate {
	tiu.mutation.ClearInventoryPayment()
	return tiu
}

// RemoveInventoryPaymentIDs removes the "InventoryPayment" edge to TblPayment entities by IDs.
func (tiu *TblInventoryUpdate) RemoveInventoryPaymentIDs(ids ...string) *TblInventoryUpdate {
	tiu.mutation.RemoveInventoryPaymentIDs(ids...)
	return tiu
}

// RemoveInventoryPayment removes "InventoryPayment" edges to TblPayment entities.
func (tiu *TblInventoryUpdate) RemoveInventoryPayment(t ...*TblPayment) *TblInventoryUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiu.RemoveInventoryPaymentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TblInventoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tiu.sqlSave, tiu.mutation, tiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TblInventoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TblInventoryUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TblInventoryUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiu *TblInventoryUpdate) check() error {
	if v, ok := tiu.mutation.Name(); ok {
		if err := tblinventory.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblInventory.Name": %w`, err)}
		}
	}
	if v, ok := tiu.mutation.Description(); ok {
		if err := tblinventory.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`entgen: validator failed for field "TblInventory.Description": %w`, err)}
		}
	}
	return nil
}

func (tiu *TblInventoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblinventory.Table, tblinventory.Columns, sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString))
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.Name(); ok {
		_spec.SetField(tblinventory.FieldName, field.TypeString, value)
	}
	if value, ok := tiu.mutation.Description(); ok {
		_spec.SetField(tblinventory.FieldDescription, field.TypeString, value)
	}
	if value, ok := tiu.mutation.ImageLink(); ok {
		_spec.SetField(tblinventory.FieldImageLink, field.TypeString, value)
	}
	if value, ok := tiu.mutation.Price(); ok {
		_spec.SetField(tblinventory.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := tiu.mutation.AddedPrice(); ok {
		_spec.AddField(tblinventory.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := tiu.mutation.IsActive(); ok {
		_spec.SetField(tblinventory.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tiu.mutation.CreatedAt(); ok {
		_spec.SetField(tblinventory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tiu.mutation.UpdatedAt(); ok {
		_spec.SetField(tblinventory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tiu.mutation.DeletedAt(); ok {
		_spec.SetField(tblinventory.FieldDeletedAt, field.TypeTime, value)
	}
	if tiu.mutation.DeletedAtCleared() {
		_spec.ClearField(tblinventory.FieldDeletedAt, field.TypeTime)
	}
	if tiu.mutation.InventoryTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryTagTable,
			Columns: []string{tblinventory.InventoryTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.RemovedInventoryTagIDs(); len(nodes) > 0 && !tiu.mutation.InventoryTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryTagTable,
			Columns: []string{tblinventory.InventoryTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.InventoryTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryTagTable,
			Columns: []string{tblinventory.InventoryTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiu.mutation.InventoryCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryCartTable,
			Columns: []string{tblinventory.InventoryCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.RemovedInventoryCartIDs(); len(nodes) > 0 && !tiu.mutation.InventoryCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryCartTable,
			Columns: []string{tblinventory.InventoryCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.InventoryCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryCartTable,
			Columns: []string{tblinventory.InventoryCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiu.mutation.InventoryPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryPaymentTable,
			Columns: []string{tblinventory.InventoryPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.RemovedInventoryPaymentIDs(); len(nodes) > 0 && !tiu.mutation.InventoryPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryPaymentTable,
			Columns: []string{tblinventory.InventoryPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiu.mutation.InventoryPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryPaymentTable,
			Columns: []string{tblinventory.InventoryPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblinventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiu.mutation.done = true
	return n, nil
}

// TblInventoryUpdateOne is the builder for updating a single TblInventory entity.
type TblInventoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblInventoryMutation
}

// SetName sets the "Name" field.
func (tiuo *TblInventoryUpdateOne) SetName(s string) *TblInventoryUpdateOne {
	tiuo.mutation.SetName(s)
	return tiuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillableName(s *string) *TblInventoryUpdateOne {
	if s != nil {
		tiuo.SetName(*s)
	}
	return tiuo
}

// SetDescription sets the "Description" field.
func (tiuo *TblInventoryUpdateOne) SetDescription(s string) *TblInventoryUpdateOne {
	tiuo.mutation.SetDescription(s)
	return tiuo
}

// SetNillableDescription sets the "Description" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillableDescription(s *string) *TblInventoryUpdateOne {
	if s != nil {
		tiuo.SetDescription(*s)
	}
	return tiuo
}

// SetImageLink sets the "ImageLink" field.
func (tiuo *TblInventoryUpdateOne) SetImageLink(s string) *TblInventoryUpdateOne {
	tiuo.mutation.SetImageLink(s)
	return tiuo
}

// SetNillableImageLink sets the "ImageLink" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillableImageLink(s *string) *TblInventoryUpdateOne {
	if s != nil {
		tiuo.SetImageLink(*s)
	}
	return tiuo
}

// SetPrice sets the "Price" field.
func (tiuo *TblInventoryUpdateOne) SetPrice(f float32) *TblInventoryUpdateOne {
	tiuo.mutation.ResetPrice()
	tiuo.mutation.SetPrice(f)
	return tiuo
}

// SetNillablePrice sets the "Price" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillablePrice(f *float32) *TblInventoryUpdateOne {
	if f != nil {
		tiuo.SetPrice(*f)
	}
	return tiuo
}

// AddPrice adds f to the "Price" field.
func (tiuo *TblInventoryUpdateOne) AddPrice(f float32) *TblInventoryUpdateOne {
	tiuo.mutation.AddPrice(f)
	return tiuo
}

// SetIsActive sets the "Is_Active" field.
func (tiuo *TblInventoryUpdateOne) SetIsActive(b bool) *TblInventoryUpdateOne {
	tiuo.mutation.SetIsActive(b)
	return tiuo
}

// SetNillableIsActive sets the "Is_Active" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillableIsActive(b *bool) *TblInventoryUpdateOne {
	if b != nil {
		tiuo.SetIsActive(*b)
	}
	return tiuo
}

// SetCreatedAt sets the "Created_at" field.
func (tiuo *TblInventoryUpdateOne) SetCreatedAt(t time.Time) *TblInventoryUpdateOne {
	tiuo.mutation.SetCreatedAt(t)
	return tiuo
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillableCreatedAt(t *time.Time) *TblInventoryUpdateOne {
	if t != nil {
		tiuo.SetCreatedAt(*t)
	}
	return tiuo
}

// SetUpdatedAt sets the "Updated_at" field.
func (tiuo *TblInventoryUpdateOne) SetUpdatedAt(t time.Time) *TblInventoryUpdateOne {
	tiuo.mutation.SetUpdatedAt(t)
	return tiuo
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *TblInventoryUpdateOne {
	if t != nil {
		tiuo.SetUpdatedAt(*t)
	}
	return tiuo
}

// SetDeletedAt sets the "Deleted_at" field.
func (tiuo *TblInventoryUpdateOne) SetDeletedAt(t time.Time) *TblInventoryUpdateOne {
	tiuo.mutation.SetDeletedAt(t)
	return tiuo
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tiuo *TblInventoryUpdateOne) SetNillableDeletedAt(t *time.Time) *TblInventoryUpdateOne {
	if t != nil {
		tiuo.SetDeletedAt(*t)
	}
	return tiuo
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (tiuo *TblInventoryUpdateOne) ClearDeletedAt() *TblInventoryUpdateOne {
	tiuo.mutation.ClearDeletedAt()
	return tiuo
}

// AddInventoryTagIDs adds the "inventoryTag" edge to the TblInventoryTag entity by IDs.
func (tiuo *TblInventoryUpdateOne) AddInventoryTagIDs(ids ...string) *TblInventoryUpdateOne {
	tiuo.mutation.AddInventoryTagIDs(ids...)
	return tiuo
}

// AddInventoryTag adds the "inventoryTag" edges to the TblInventoryTag entity.
func (tiuo *TblInventoryUpdateOne) AddInventoryTag(t ...*TblInventoryTag) *TblInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiuo.AddInventoryTagIDs(ids...)
}

// AddInventoryCartIDs adds the "InventoryCart" edge to the TblCart entity by IDs.
func (tiuo *TblInventoryUpdateOne) AddInventoryCartIDs(ids ...string) *TblInventoryUpdateOne {
	tiuo.mutation.AddInventoryCartIDs(ids...)
	return tiuo
}

// AddInventoryCart adds the "InventoryCart" edges to the TblCart entity.
func (tiuo *TblInventoryUpdateOne) AddInventoryCart(t ...*TblCart) *TblInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiuo.AddInventoryCartIDs(ids...)
}

// AddInventoryPaymentIDs adds the "InventoryPayment" edge to the TblPayment entity by IDs.
func (tiuo *TblInventoryUpdateOne) AddInventoryPaymentIDs(ids ...string) *TblInventoryUpdateOne {
	tiuo.mutation.AddInventoryPaymentIDs(ids...)
	return tiuo
}

// AddInventoryPayment adds the "InventoryPayment" edges to the TblPayment entity.
func (tiuo *TblInventoryUpdateOne) AddInventoryPayment(t ...*TblPayment) *TblInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiuo.AddInventoryPaymentIDs(ids...)
}

// Mutation returns the TblInventoryMutation object of the builder.
func (tiuo *TblInventoryUpdateOne) Mutation() *TblInventoryMutation {
	return tiuo.mutation
}

// ClearInventoryTag clears all "inventoryTag" edges to the TblInventoryTag entity.
func (tiuo *TblInventoryUpdateOne) ClearInventoryTag() *TblInventoryUpdateOne {
	tiuo.mutation.ClearInventoryTag()
	return tiuo
}

// RemoveInventoryTagIDs removes the "inventoryTag" edge to TblInventoryTag entities by IDs.
func (tiuo *TblInventoryUpdateOne) RemoveInventoryTagIDs(ids ...string) *TblInventoryUpdateOne {
	tiuo.mutation.RemoveInventoryTagIDs(ids...)
	return tiuo
}

// RemoveInventoryTag removes "inventoryTag" edges to TblInventoryTag entities.
func (tiuo *TblInventoryUpdateOne) RemoveInventoryTag(t ...*TblInventoryTag) *TblInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiuo.RemoveInventoryTagIDs(ids...)
}

// ClearInventoryCart clears all "InventoryCart" edges to the TblCart entity.
func (tiuo *TblInventoryUpdateOne) ClearInventoryCart() *TblInventoryUpdateOne {
	tiuo.mutation.ClearInventoryCart()
	return tiuo
}

// RemoveInventoryCartIDs removes the "InventoryCart" edge to TblCart entities by IDs.
func (tiuo *TblInventoryUpdateOne) RemoveInventoryCartIDs(ids ...string) *TblInventoryUpdateOne {
	tiuo.mutation.RemoveInventoryCartIDs(ids...)
	return tiuo
}

// RemoveInventoryCart removes "InventoryCart" edges to TblCart entities.
func (tiuo *TblInventoryUpdateOne) RemoveInventoryCart(t ...*TblCart) *TblInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiuo.RemoveInventoryCartIDs(ids...)
}

// ClearInventoryPayment clears all "InventoryPayment" edges to the TblPayment entity.
func (tiuo *TblInventoryUpdateOne) ClearInventoryPayment() *TblInventoryUpdateOne {
	tiuo.mutation.ClearInventoryPayment()
	return tiuo
}

// RemoveInventoryPaymentIDs removes the "InventoryPayment" edge to TblPayment entities by IDs.
func (tiuo *TblInventoryUpdateOne) RemoveInventoryPaymentIDs(ids ...string) *TblInventoryUpdateOne {
	tiuo.mutation.RemoveInventoryPaymentIDs(ids...)
	return tiuo
}

// RemoveInventoryPayment removes "InventoryPayment" edges to TblPayment entities.
func (tiuo *TblInventoryUpdateOne) RemoveInventoryPayment(t ...*TblPayment) *TblInventoryUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tiuo.RemoveInventoryPaymentIDs(ids...)
}

// Where appends a list predicates to the TblInventoryUpdate builder.
func (tiuo *TblInventoryUpdateOne) Where(ps ...predicate.TblInventory) *TblInventoryUpdateOne {
	tiuo.mutation.Where(ps...)
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TblInventoryUpdateOne) Select(field string, fields ...string) *TblInventoryUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TblInventory entity.
func (tiuo *TblInventoryUpdateOne) Save(ctx context.Context) (*TblInventory, error) {
	return withHooks(ctx, tiuo.sqlSave, tiuo.mutation, tiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TblInventoryUpdateOne) SaveX(ctx context.Context) *TblInventory {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TblInventoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TblInventoryUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tiuo *TblInventoryUpdateOne) check() error {
	if v, ok := tiuo.mutation.Name(); ok {
		if err := tblinventory.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`entgen: validator failed for field "TblInventory.Name": %w`, err)}
		}
	}
	if v, ok := tiuo.mutation.Description(); ok {
		if err := tblinventory.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "Description", err: fmt.Errorf(`entgen: validator failed for field "TblInventory.Description": %w`, err)}
		}
	}
	return nil
}

func (tiuo *TblInventoryUpdateOne) sqlSave(ctx context.Context) (_node *TblInventory, err error) {
	if err := tiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblinventory.Table, tblinventory.Columns, sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString))
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblInventory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblinventory.FieldID)
		for _, f := range fields {
			if !tblinventory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tblinventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.Name(); ok {
		_spec.SetField(tblinventory.FieldName, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.Description(); ok {
		_spec.SetField(tblinventory.FieldDescription, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.ImageLink(); ok {
		_spec.SetField(tblinventory.FieldImageLink, field.TypeString, value)
	}
	if value, ok := tiuo.mutation.Price(); ok {
		_spec.SetField(tblinventory.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := tiuo.mutation.AddedPrice(); ok {
		_spec.AddField(tblinventory.FieldPrice, field.TypeFloat32, value)
	}
	if value, ok := tiuo.mutation.IsActive(); ok {
		_spec.SetField(tblinventory.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := tiuo.mutation.CreatedAt(); ok {
		_spec.SetField(tblinventory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tblinventory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tiuo.mutation.DeletedAt(); ok {
		_spec.SetField(tblinventory.FieldDeletedAt, field.TypeTime, value)
	}
	if tiuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tblinventory.FieldDeletedAt, field.TypeTime)
	}
	if tiuo.mutation.InventoryTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryTagTable,
			Columns: []string{tblinventory.InventoryTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.RemovedInventoryTagIDs(); len(nodes) > 0 && !tiuo.mutation.InventoryTagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryTagTable,
			Columns: []string{tblinventory.InventoryTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.InventoryTagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryTagTable,
			Columns: []string{tblinventory.InventoryTagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiuo.mutation.InventoryCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryCartTable,
			Columns: []string{tblinventory.InventoryCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.RemovedInventoryCartIDs(); len(nodes) > 0 && !tiuo.mutation.InventoryCartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryCartTable,
			Columns: []string{tblinventory.InventoryCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.InventoryCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryCartTable,
			Columns: []string{tblinventory.InventoryCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tiuo.mutation.InventoryPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryPaymentTable,
			Columns: []string{tblinventory.InventoryPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.RemovedInventoryPaymentIDs(); len(nodes) > 0 && !tiuo.mutation.InventoryPaymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryPaymentTable,
			Columns: []string{tblinventory.InventoryPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tiuo.mutation.InventoryPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tblinventory.InventoryPaymentTable,
			Columns: []string{tblinventory.InventoryPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblInventory{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblinventory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tiuo.mutation.done = true
	return _node, nil
}
