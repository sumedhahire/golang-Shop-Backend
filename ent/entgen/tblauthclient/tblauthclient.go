// Code generated by ent, DO NOT EDIT.

package tblauthclient

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tblauthclient type in the database.
	Label = "tbl_auth_client"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "client_uuid"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "Client_secret"
	// FieldGrantType holds the string denoting the grant_type field in the database.
	FieldGrantType = "Grant_type"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "CreatedAt"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "UpdatedAt"
	// FieldDeletedAt holds the string denoting the deletedat field in the database.
	FieldDeletedAt = "DeletedAt"
	// FieldDomain holds the string denoting the domain field in the database.
	FieldDomain = "domain"
	// FieldPublic holds the string denoting the public field in the database.
	FieldPublic = "public"
	// FieldUserAgent holds the string denoting the useragent field in the database.
	FieldUserAgent = "UserAgent"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldCreatedBy holds the string denoting the createdby field in the database.
	FieldCreatedBy = "CreatedBy"
	// FieldUpdatedBy holds the string denoting the updatedby field in the database.
	FieldUpdatedBy = "UpdatedBy"
	// FieldDeletedBy holds the string denoting the deletedby field in the database.
	FieldDeletedBy = "DeletedBy"
	// EdgeClientToken holds the string denoting the clienttoken edge name in mutations.
	EdgeClientToken = "ClientToken"
	// TblAuthTokenFieldID holds the string denoting the ID field of the TblAuthToken.
	TblAuthTokenFieldID = "id_uuid"
	// Table holds the table name of the tblauthclient in the database.
	Table = "authclient"
	// ClientTokenTable is the table that holds the ClientToken relation/edge.
	ClientTokenTable = "authtoken"
	// ClientTokenInverseTable is the table name for the TblAuthToken entity.
	// It exists in this package in order to avoid circular dependency with the "tblauthtoken" package.
	ClientTokenInverseTable = "authtoken"
	// ClientTokenColumn is the table column denoting the ClientToken relation/edge.
	ClientTokenColumn = "clientid"
)

// Columns holds all SQL columns for tblauthclient fields.
var Columns = []string{
	FieldID,
	FieldClientSecret,
	FieldGrantType,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldDomain,
	FieldPublic,
	FieldUserAgent,
	FieldRedirectURI,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "CreatedAt" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "UpdatedAt" field.
	DefaultUpdatedAt time.Time
	// DefaultPublic holds the default value on creation for the "public" field.
	DefaultPublic bool
	// DefaultUserAgent holds the default value on creation for the "UserAgent" field.
	DefaultUserAgent string
	// DefaultCreatedBy holds the default value on creation for the "CreatedBy" field.
	DefaultCreatedBy string
	// DefaultUpdatedBy holds the default value on creation for the "UpdatedBy" field.
	DefaultUpdatedBy string
)

// OrderOption defines the ordering options for the TblAuthClient queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClientSecret orders the results by the Client_secret field.
func ByClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientSecret, opts...).ToFunc()
}

// ByGrantType orders the results by the Grant_type field.
func ByGrantType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGrantType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the CreatedAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the UpdatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the DeletedAt field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDomain orders the results by the domain field.
func ByDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomain, opts...).ToFunc()
}

// ByPublic orders the results by the public field.
func ByPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublic, opts...).ToFunc()
}

// ByUserAgent orders the results by the UserAgent field.
func ByUserAgent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserAgent, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}

// ByCreatedBy orders the results by the CreatedBy field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the UpdatedBy field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedBy orders the results by the DeletedBy field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByClientTokenCount orders the results by ClientToken count.
func ByClientTokenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newClientTokenStep(), opts...)
	}
}

// ByClientToken orders the results by ClientToken terms.
func ByClientToken(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientTokenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newClientTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientTokenInverseTable, TblAuthTokenFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ClientTokenTable, ClientTokenColumn),
	)
}
