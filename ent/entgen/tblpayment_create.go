// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblpayment"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblPaymentCreate is the builder for creating a TblPayment entity.
type TblPaymentCreate struct {
	config
	mutation *TblPaymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInventoryId sets the "InventoryId" field.
func (tpc *TblPaymentCreate) SetInventoryId(s string) *TblPaymentCreate {
	tpc.mutation.SetInventoryId(s)
	return tpc
}

// SetNillableInventoryId sets the "InventoryId" field if the given value is not nil.
func (tpc *TblPaymentCreate) SetNillableInventoryId(s *string) *TblPaymentCreate {
	if s != nil {
		tpc.SetInventoryId(*s)
	}
	return tpc
}

// SetUserId sets the "UserId" field.
func (tpc *TblPaymentCreate) SetUserId(s string) *TblPaymentCreate {
	tpc.mutation.SetUserId(s)
	return tpc
}

// SetNillableUserId sets the "UserId" field if the given value is not nil.
func (tpc *TblPaymentCreate) SetNillableUserId(s *string) *TblPaymentCreate {
	if s != nil {
		tpc.SetUserId(*s)
	}
	return tpc
}

// SetStatus sets the "Status" field.
func (tpc *TblPaymentCreate) SetStatus(s string) *TblPaymentCreate {
	tpc.mutation.SetStatus(s)
	return tpc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (tpc *TblPaymentCreate) SetNillableStatus(s *string) *TblPaymentCreate {
	if s != nil {
		tpc.SetStatus(*s)
	}
	return tpc
}

// SetRazorpayOrderId sets the "RazorpayOrderId" field.
func (tpc *TblPaymentCreate) SetRazorpayOrderId(s string) *TblPaymentCreate {
	tpc.mutation.SetRazorpayOrderId(s)
	return tpc
}

// SetAmount sets the "Amount" field.
func (tpc *TblPaymentCreate) SetAmount(f float32) *TblPaymentCreate {
	tpc.mutation.SetAmount(f)
	return tpc
}

// SetCreatedAt sets the "Created_at" field.
func (tpc *TblPaymentCreate) SetCreatedAt(t time.Time) *TblPaymentCreate {
	tpc.mutation.SetCreatedAt(t)
	return tpc
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tpc *TblPaymentCreate) SetNillableCreatedAt(t *time.Time) *TblPaymentCreate {
	if t != nil {
		tpc.SetCreatedAt(*t)
	}
	return tpc
}

// SetUpdatedAt sets the "Updated_at" field.
func (tpc *TblPaymentCreate) SetUpdatedAt(t time.Time) *TblPaymentCreate {
	tpc.mutation.SetUpdatedAt(t)
	return tpc
}

// SetDeletedAt sets the "Deleted_at" field.
func (tpc *TblPaymentCreate) SetDeletedAt(t time.Time) *TblPaymentCreate {
	tpc.mutation.SetDeletedAt(t)
	return tpc
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tpc *TblPaymentCreate) SetNillableDeletedAt(t *time.Time) *TblPaymentCreate {
	if t != nil {
		tpc.SetDeletedAt(*t)
	}
	return tpc
}

// SetID sets the "id" field.
func (tpc *TblPaymentCreate) SetID(s string) *TblPaymentCreate {
	tpc.mutation.SetID(s)
	return tpc
}

// SetInventoryID sets the "Inventory" edge to the TblInventory entity by ID.
func (tpc *TblPaymentCreate) SetInventoryID(id string) *TblPaymentCreate {
	tpc.mutation.SetInventoryID(id)
	return tpc
}

// SetNillableInventoryID sets the "Inventory" edge to the TblInventory entity by ID if the given value is not nil.
func (tpc *TblPaymentCreate) SetNillableInventoryID(id *string) *TblPaymentCreate {
	if id != nil {
		tpc = tpc.SetInventoryID(*id)
	}
	return tpc
}

// SetInventory sets the "Inventory" edge to the TblInventory entity.
func (tpc *TblPaymentCreate) SetInventory(t *TblInventory) *TblPaymentCreate {
	return tpc.SetInventoryID(t.ID)
}

// SetUserID sets the "User" edge to the TblUser entity by ID.
func (tpc *TblPaymentCreate) SetUserID(id string) *TblPaymentCreate {
	tpc.mutation.SetUserID(id)
	return tpc
}

// SetNillableUserID sets the "User" edge to the TblUser entity by ID if the given value is not nil.
func (tpc *TblPaymentCreate) SetNillableUserID(id *string) *TblPaymentCreate {
	if id != nil {
		tpc = tpc.SetUserID(*id)
	}
	return tpc
}

// SetUser sets the "User" edge to the TblUser entity.
func (tpc *TblPaymentCreate) SetUser(t *TblUser) *TblPaymentCreate {
	return tpc.SetUserID(t.ID)
}

// Mutation returns the TblPaymentMutation object of the builder.
func (tpc *TblPaymentCreate) Mutation() *TblPaymentMutation {
	return tpc.mutation
}

// Save creates the TblPayment in the database.
func (tpc *TblPaymentCreate) Save(ctx context.Context) (*TblPayment, error) {
	tpc.defaults()
	return withHooks(ctx, tpc.sqlSave, tpc.mutation, tpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tpc *TblPaymentCreate) SaveX(ctx context.Context) *TblPayment {
	v, err := tpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpc *TblPaymentCreate) Exec(ctx context.Context) error {
	_, err := tpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpc *TblPaymentCreate) ExecX(ctx context.Context) {
	if err := tpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tpc *TblPaymentCreate) defaults() {
	if _, ok := tpc.mutation.Status(); !ok {
		v := tblpayment.DefaultStatus
		tpc.mutation.SetStatus(v)
	}
	if _, ok := tpc.mutation.CreatedAt(); !ok {
		v := tblpayment.DefaultCreatedAt()
		tpc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tpc *TblPaymentCreate) check() error {
	if _, ok := tpc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`entgen: missing required field "TblPayment.Status"`)}
	}
	if _, ok := tpc.mutation.RazorpayOrderId(); !ok {
		return &ValidationError{Name: "RazorpayOrderId", err: errors.New(`entgen: missing required field "TblPayment.RazorpayOrderId"`)}
	}
	if v, ok := tpc.mutation.RazorpayOrderId(); ok {
		if err := tblpayment.RazorpayOrderIdValidator(v); err != nil {
			return &ValidationError{Name: "RazorpayOrderId", err: fmt.Errorf(`entgen: validator failed for field "TblPayment.RazorpayOrderId": %w`, err)}
		}
	}
	if _, ok := tpc.mutation.Amount(); !ok {
		return &ValidationError{Name: "Amount", err: errors.New(`entgen: missing required field "TblPayment.Amount"`)}
	}
	if _, ok := tpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "Created_at", err: errors.New(`entgen: missing required field "TblPayment.Created_at"`)}
	}
	if _, ok := tpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "Updated_at", err: errors.New(`entgen: missing required field "TblPayment.Updated_at"`)}
	}
	return nil
}

func (tpc *TblPaymentCreate) sqlSave(ctx context.Context) (*TblPayment, error) {
	if err := tpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblPayment.ID type: %T", _spec.ID.Value)
		}
	}
	tpc.mutation.id = &_node.ID
	tpc.mutation.done = true
	return _node, nil
}

func (tpc *TblPaymentCreate) createSpec() (*TblPayment, *sqlgraph.CreateSpec) {
	var (
		_node = &TblPayment{config: tpc.config}
		_spec = sqlgraph.NewCreateSpec(tblpayment.Table, sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString))
	)
	_spec.OnConflict = tpc.conflict
	if id, ok := tpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tpc.mutation.Status(); ok {
		_spec.SetField(tblpayment.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := tpc.mutation.RazorpayOrderId(); ok {
		_spec.SetField(tblpayment.FieldRazorpayOrderId, field.TypeString, value)
		_node.RazorpayOrderId = value
	}
	if value, ok := tpc.mutation.Amount(); ok {
		_spec.SetField(tblpayment.FieldAmount, field.TypeFloat32, value)
		_node.Amount = value
	}
	if value, ok := tpc.mutation.CreatedAt(); ok {
		_spec.SetField(tblpayment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tpc.mutation.UpdatedAt(); ok {
		_spec.SetField(tblpayment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tpc.mutation.DeletedAt(); ok {
		_spec.SetField(tblpayment.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := tpc.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.InventoryTable,
			Columns: []string{tblpayment.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InventoryId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblpayment.UserTable,
			Columns: []string{tblpayment.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblPayment.Create().
//		SetInventoryId(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblPaymentUpsert) {
//			SetInventoryId(v+v).
//		}).
//		Exec(ctx)
func (tpc *TblPaymentCreate) OnConflict(opts ...sql.ConflictOption) *TblPaymentUpsertOne {
	tpc.conflict = opts
	return &TblPaymentUpsertOne{
		create: tpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblPayment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpc *TblPaymentCreate) OnConflictColumns(columns ...string) *TblPaymentUpsertOne {
	tpc.conflict = append(tpc.conflict, sql.ConflictColumns(columns...))
	return &TblPaymentUpsertOne{
		create: tpc,
	}
}

type (
	// TblPaymentUpsertOne is the builder for "upsert"-ing
	//  one TblPayment node.
	TblPaymentUpsertOne struct {
		create *TblPaymentCreate
	}

	// TblPaymentUpsert is the "OnConflict" setter.
	TblPaymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetInventoryId sets the "InventoryId" field.
func (u *TblPaymentUpsert) SetInventoryId(v string) *TblPaymentUpsert {
	u.Set(tblpayment.FieldInventoryId, v)
	return u
}

// UpdateInventoryId sets the "InventoryId" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateInventoryId() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldInventoryId)
	return u
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (u *TblPaymentUpsert) ClearInventoryId() *TblPaymentUpsert {
	u.SetNull(tblpayment.FieldInventoryId)
	return u
}

// SetUserId sets the "UserId" field.
func (u *TblPaymentUpsert) SetUserId(v string) *TblPaymentUpsert {
	u.Set(tblpayment.FieldUserId, v)
	return u
}

// UpdateUserId sets the "UserId" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateUserId() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldUserId)
	return u
}

// ClearUserId clears the value of the "UserId" field.
func (u *TblPaymentUpsert) ClearUserId() *TblPaymentUpsert {
	u.SetNull(tblpayment.FieldUserId)
	return u
}

// SetStatus sets the "Status" field.
func (u *TblPaymentUpsert) SetStatus(v string) *TblPaymentUpsert {
	u.Set(tblpayment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateStatus() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldStatus)
	return u
}

// SetRazorpayOrderId sets the "RazorpayOrderId" field.
func (u *TblPaymentUpsert) SetRazorpayOrderId(v string) *TblPaymentUpsert {
	u.Set(tblpayment.FieldRazorpayOrderId, v)
	return u
}

// UpdateRazorpayOrderId sets the "RazorpayOrderId" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateRazorpayOrderId() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldRazorpayOrderId)
	return u
}

// SetAmount sets the "Amount" field.
func (u *TblPaymentUpsert) SetAmount(v float32) *TblPaymentUpsert {
	u.Set(tblpayment.FieldAmount, v)
	return u
}

// UpdateAmount sets the "Amount" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateAmount() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldAmount)
	return u
}

// AddAmount adds v to the "Amount" field.
func (u *TblPaymentUpsert) AddAmount(v float32) *TblPaymentUpsert {
	u.Add(tblpayment.FieldAmount, v)
	return u
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblPaymentUpsert) SetCreatedAt(v time.Time) *TblPaymentUpsert {
	u.Set(tblpayment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateCreatedAt() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblPaymentUpsert) SetUpdatedAt(v time.Time) *TblPaymentUpsert {
	u.Set(tblpayment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateUpdatedAt() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblPaymentUpsert) SetDeletedAt(v time.Time) *TblPaymentUpsert {
	u.Set(tblpayment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblPaymentUpsert) UpdateDeletedAt() *TblPaymentUpsert {
	u.SetExcluded(tblpayment.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblPaymentUpsert) ClearDeletedAt() *TblPaymentUpsert {
	u.SetNull(tblpayment.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblPayment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblpayment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblPaymentUpsertOne) UpdateNewValues() *TblPaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tblpayment.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblPayment.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblPaymentUpsertOne) Ignore() *TblPaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblPaymentUpsertOne) DoNothing() *TblPaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblPaymentCreate.OnConflict
// documentation for more info.
func (u *TblPaymentUpsertOne) Update(set func(*TblPaymentUpsert)) *TblPaymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblPaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetInventoryId sets the "InventoryId" field.
func (u *TblPaymentUpsertOne) SetInventoryId(v string) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetInventoryId(v)
	})
}

// UpdateInventoryId sets the "InventoryId" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateInventoryId() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateInventoryId()
	})
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (u *TblPaymentUpsertOne) ClearInventoryId() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.ClearInventoryId()
	})
}

// SetUserId sets the "UserId" field.
func (u *TblPaymentUpsertOne) SetUserId(v string) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "UserId" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateUserId() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateUserId()
	})
}

// ClearUserId clears the value of the "UserId" field.
func (u *TblPaymentUpsertOne) ClearUserId() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.ClearUserId()
	})
}

// SetStatus sets the "Status" field.
func (u *TblPaymentUpsertOne) SetStatus(v string) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateStatus() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateStatus()
	})
}

// SetRazorpayOrderId sets the "RazorpayOrderId" field.
func (u *TblPaymentUpsertOne) SetRazorpayOrderId(v string) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetRazorpayOrderId(v)
	})
}

// UpdateRazorpayOrderId sets the "RazorpayOrderId" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateRazorpayOrderId() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateRazorpayOrderId()
	})
}

// SetAmount sets the "Amount" field.
func (u *TblPaymentUpsertOne) SetAmount(v float32) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "Amount" field.
func (u *TblPaymentUpsertOne) AddAmount(v float32) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "Amount" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateAmount() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateAmount()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblPaymentUpsertOne) SetCreatedAt(v time.Time) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateCreatedAt() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblPaymentUpsertOne) SetUpdatedAt(v time.Time) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateUpdatedAt() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblPaymentUpsertOne) SetDeletedAt(v time.Time) *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblPaymentUpsertOne) UpdateDeletedAt() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblPaymentUpsertOne) ClearDeletedAt() *TblPaymentUpsertOne {
	return u.Update(func(s *TblPaymentUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblPaymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblPaymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblPaymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblPaymentUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblPaymentUpsertOne.ID is not supported by MySQL driver. Use TblPaymentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblPaymentUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblPaymentCreateBulk is the builder for creating many TblPayment entities in bulk.
type TblPaymentCreateBulk struct {
	config
	err      error
	builders []*TblPaymentCreate
	conflict []sql.ConflictOption
}

// Save creates the TblPayment entities in the database.
func (tpcb *TblPaymentCreateBulk) Save(ctx context.Context) ([]*TblPayment, error) {
	if tpcb.err != nil {
		return nil, tpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tpcb.builders))
	nodes := make([]*TblPayment, len(tpcb.builders))
	mutators := make([]Mutator, len(tpcb.builders))
	for i := range tpcb.builders {
		func(i int, root context.Context) {
			builder := tpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblPaymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tpcb *TblPaymentCreateBulk) SaveX(ctx context.Context) []*TblPayment {
	v, err := tpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tpcb *TblPaymentCreateBulk) Exec(ctx context.Context) error {
	_, err := tpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpcb *TblPaymentCreateBulk) ExecX(ctx context.Context) {
	if err := tpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblPayment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblPaymentUpsert) {
//			SetInventoryId(v+v).
//		}).
//		Exec(ctx)
func (tpcb *TblPaymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblPaymentUpsertBulk {
	tpcb.conflict = opts
	return &TblPaymentUpsertBulk{
		create: tpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblPayment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tpcb *TblPaymentCreateBulk) OnConflictColumns(columns ...string) *TblPaymentUpsertBulk {
	tpcb.conflict = append(tpcb.conflict, sql.ConflictColumns(columns...))
	return &TblPaymentUpsertBulk{
		create: tpcb,
	}
}

// TblPaymentUpsertBulk is the builder for "upsert"-ing
// a bulk of TblPayment nodes.
type TblPaymentUpsertBulk struct {
	create *TblPaymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblPayment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblpayment.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblPaymentUpsertBulk) UpdateNewValues() *TblPaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tblpayment.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblPayment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblPaymentUpsertBulk) Ignore() *TblPaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblPaymentUpsertBulk) DoNothing() *TblPaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblPaymentCreateBulk.OnConflict
// documentation for more info.
func (u *TblPaymentUpsertBulk) Update(set func(*TblPaymentUpsert)) *TblPaymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblPaymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetInventoryId sets the "InventoryId" field.
func (u *TblPaymentUpsertBulk) SetInventoryId(v string) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetInventoryId(v)
	})
}

// UpdateInventoryId sets the "InventoryId" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateInventoryId() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateInventoryId()
	})
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (u *TblPaymentUpsertBulk) ClearInventoryId() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.ClearInventoryId()
	})
}

// SetUserId sets the "UserId" field.
func (u *TblPaymentUpsertBulk) SetUserId(v string) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "UserId" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateUserId() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateUserId()
	})
}

// ClearUserId clears the value of the "UserId" field.
func (u *TblPaymentUpsertBulk) ClearUserId() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.ClearUserId()
	})
}

// SetStatus sets the "Status" field.
func (u *TblPaymentUpsertBulk) SetStatus(v string) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateStatus() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateStatus()
	})
}

// SetRazorpayOrderId sets the "RazorpayOrderId" field.
func (u *TblPaymentUpsertBulk) SetRazorpayOrderId(v string) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetRazorpayOrderId(v)
	})
}

// UpdateRazorpayOrderId sets the "RazorpayOrderId" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateRazorpayOrderId() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateRazorpayOrderId()
	})
}

// SetAmount sets the "Amount" field.
func (u *TblPaymentUpsertBulk) SetAmount(v float32) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetAmount(v)
	})
}

// AddAmount adds v to the "Amount" field.
func (u *TblPaymentUpsertBulk) AddAmount(v float32) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.AddAmount(v)
	})
}

// UpdateAmount sets the "Amount" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateAmount() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateAmount()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblPaymentUpsertBulk) SetCreatedAt(v time.Time) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateCreatedAt() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblPaymentUpsertBulk) SetUpdatedAt(v time.Time) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateUpdatedAt() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblPaymentUpsertBulk) SetDeletedAt(v time.Time) *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblPaymentUpsertBulk) UpdateDeletedAt() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblPaymentUpsertBulk) ClearDeletedAt() *TblPaymentUpsertBulk {
	return u.Update(func(s *TblPaymentUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblPaymentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblPaymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblPaymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblPaymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
