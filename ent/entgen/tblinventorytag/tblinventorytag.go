// Code generated by ent, DO NOT EDIT.

package tblinventorytag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tblinventorytag type in the database.
	Label = "tbl_inventory_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id_uuid"
	// FieldInventoryId holds the string denoting the inventoryid field in the database.
	FieldInventoryId = "InventoryId"
	// FieldTagId holds the string denoting the tagid field in the database.
	FieldTagId = "TagId"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "Created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "Updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "Deleted_at"
	// EdgeInventory holds the string denoting the inventory edge name in mutations.
	EdgeInventory = "inventory"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// Table holds the table name of the tblinventorytag in the database.
	Table = "Tbl_Inventory_Tag"
	// InventoryTable is the table that holds the inventory relation/edge.
	InventoryTable = "Tbl_Inventory_Tag"
	// InventoryInverseTable is the table name for the TblInventory entity.
	// It exists in this package in order to avoid circular dependency with the "tblinventory" package.
	InventoryInverseTable = "Tbl_Inventory"
	// InventoryColumn is the table column denoting the inventory relation/edge.
	InventoryColumn = "InventoryId"
	// TagTable is the table that holds the tag relation/edge.
	TagTable = "Tbl_Inventory_Tag"
	// TagInverseTable is the table name for the TblTag entity.
	// It exists in this package in order to avoid circular dependency with the "tbltag" package.
	TagInverseTable = "Tbl_Tag"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "TagId"
)

// Columns holds all SQL columns for tblinventorytag fields.
var Columns = []string{
	FieldID,
	FieldInventoryId,
	FieldTagId,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "Created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the TblInventoryTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInventoryId orders the results by the InventoryId field.
func ByInventoryId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInventoryId, opts...).ToFunc()
}

// ByTagId orders the results by the TagId field.
func ByTagId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagId, opts...).ToFunc()
}

// ByCreatedAt orders the results by the Created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the Updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the Deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByInventoryField orders the results by inventory field.
func ByInventoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagField orders the results by tag field.
func ByTagField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagStep(), sql.OrderByField(field, opts...))
	}
}
func newInventoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InventoryTable, InventoryColumn),
	)
}
func newTagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TagTable, TagColumn),
	)
}
