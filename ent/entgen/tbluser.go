// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"inventory/ent/entgen/tbluser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblUser is the model entity for the TblUser schema.
type TblUser struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Firstname holds the value of the "firstname" field.
	Firstname string `json:"firstname,omitempty"`
	// Lastname holds the value of the "lastname" field.
	Lastname string `json:"lastname,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate *time.Time `json:"birth_date,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// ZipCode holds the value of the "zip_code" field.
	ZipCode *int `json:"zip_code,omitempty"`
	// Address holds the value of the "address" field.
	Address *string `json:"address,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress *string `json:"ip_address,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Role holds the value of the "role" field.
	Role tbluser.Role `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblUserQuery when eager-loading is set.
	Edges        TblUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblUserEdges holds the relations/edges for other nodes in the graph.
type TblUserEdges struct {
	// UserToken holds the value of the UserToken edge.
	UserToken []*TblAuthToken `json:"UserToken,omitempty"`
	// UserCart holds the value of the UserCart edge.
	UserCart []*TblCart `json:"UserCart,omitempty"`
	// UserPayment holds the value of the UserPayment edge.
	UserPayment []*TblPayment `json:"UserPayment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserTokenOrErr returns the UserToken value or an error if the edge
// was not loaded in eager-loading.
func (e TblUserEdges) UserTokenOrErr() ([]*TblAuthToken, error) {
	if e.loadedTypes[0] {
		return e.UserToken, nil
	}
	return nil, &NotLoadedError{edge: "UserToken"}
}

// UserCartOrErr returns the UserCart value or an error if the edge
// was not loaded in eager-loading.
func (e TblUserEdges) UserCartOrErr() ([]*TblCart, error) {
	if e.loadedTypes[1] {
		return e.UserCart, nil
	}
	return nil, &NotLoadedError{edge: "UserCart"}
}

// UserPaymentOrErr returns the UserPayment value or an error if the edge
// was not loaded in eager-loading.
func (e TblUserEdges) UserPaymentOrErr() ([]*TblPayment, error) {
	if e.loadedTypes[2] {
		return e.UserPayment, nil
	}
	return nil, &NotLoadedError{edge: "UserPayment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tbluser.FieldIsActive:
			values[i] = new(sql.NullBool)
		case tbluser.FieldZipCode:
			values[i] = new(sql.NullInt64)
		case tbluser.FieldID, tbluser.FieldFirstname, tbluser.FieldLastname, tbluser.FieldEmail, tbluser.FieldPassword, tbluser.FieldAddress, tbluser.FieldIPAddress, tbluser.FieldRole:
			values[i] = new(sql.NullString)
		case tbluser.FieldBirthDate, tbluser.FieldCreatedAt, tbluser.FieldUpdatedAt, tbluser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblUser fields.
func (tu *TblUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tbluser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tu.ID = value.String
			}
		case tbluser.FieldFirstname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstname", values[i])
			} else if value.Valid {
				tu.Firstname = value.String
			}
		case tbluser.FieldLastname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastname", values[i])
			} else if value.Valid {
				tu.Lastname = value.String
			}
		case tbluser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				tu.Email = value.String
			}
		case tbluser.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				tu.BirthDate = new(time.Time)
				*tu.BirthDate = value.Time
			}
		case tbluser.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				tu.Password = value.String
			}
		case tbluser.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				tu.IsActive = value.Bool
			}
		case tbluser.FieldZipCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field zip_code", values[i])
			} else if value.Valid {
				tu.ZipCode = new(int)
				*tu.ZipCode = int(value.Int64)
			}
		case tbluser.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				tu.Address = new(string)
				*tu.Address = value.String
			}
		case tbluser.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				tu.IPAddress = new(string)
				*tu.IPAddress = value.String
			}
		case tbluser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tu.CreatedAt = value.Time
			}
		case tbluser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tu.UpdatedAt = value.Time
			}
		case tbluser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tu.DeletedAt = new(time.Time)
				*tu.DeletedAt = value.Time
			}
		case tbluser.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				tu.Role = tbluser.Role(value.String)
			}
		default:
			tu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblUser.
// This includes values selected through modifiers, order, etc.
func (tu *TblUser) Value(name string) (ent.Value, error) {
	return tu.selectValues.Get(name)
}

// QueryUserToken queries the "UserToken" edge of the TblUser entity.
func (tu *TblUser) QueryUserToken() *TblAuthTokenQuery {
	return NewTblUserClient(tu.config).QueryUserToken(tu)
}

// QueryUserCart queries the "UserCart" edge of the TblUser entity.
func (tu *TblUser) QueryUserCart() *TblCartQuery {
	return NewTblUserClient(tu.config).QueryUserCart(tu)
}

// QueryUserPayment queries the "UserPayment" edge of the TblUser entity.
func (tu *TblUser) QueryUserPayment() *TblPaymentQuery {
	return NewTblUserClient(tu.config).QueryUserPayment(tu)
}

// Update returns a builder for updating this TblUser.
// Note that you need to call TblUser.Unwrap() before calling this method if this TblUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (tu *TblUser) Update() *TblUserUpdateOne {
	return NewTblUserClient(tu.config).UpdateOne(tu)
}

// Unwrap unwraps the TblUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tu *TblUser) Unwrap() *TblUser {
	_tx, ok := tu.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblUser is not a transactional entity")
	}
	tu.config.driver = _tx.drv
	return tu
}

// String implements the fmt.Stringer.
func (tu *TblUser) String() string {
	var builder strings.Builder
	builder.WriteString("TblUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tu.ID))
	builder.WriteString("firstname=")
	builder.WriteString(tu.Firstname)
	builder.WriteString(", ")
	builder.WriteString("lastname=")
	builder.WriteString(tu.Lastname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(tu.Email)
	builder.WriteString(", ")
	if v := tu.BirthDate; v != nil {
		builder.WriteString("birth_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(tu.Password)
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", tu.IsActive))
	builder.WriteString(", ")
	if v := tu.ZipCode; v != nil {
		builder.WriteString("zip_code=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := tu.Address; v != nil {
		builder.WriteString("address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tu.IPAddress; v != nil {
		builder.WriteString("ip_address=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tu.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", tu.Role))
	builder.WriteByte(')')
	return builder.String()
}

// TblUsers is a parsable slice of TblUser.
type TblUsers []*TblUser
