// Code generated by ent, DO NOT EDIT.

package tbluser

import (
	"inventory/ent/entgen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContainsFold(FieldID, id))
}

// Firstname applies equality check predicate on the "firstname" field. It's identical to FirstnameEQ.
func Firstname(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldFirstname, v))
}

// Lastname applies equality check predicate on the "lastname" field. It's identical to LastnameEQ.
func Lastname(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldLastname, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldEmail, v))
}

// BirthDate applies equality check predicate on the "birth_date" field. It's identical to BirthDateEQ.
func BirthDate(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldBirthDate, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldPassword, v))
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldIsActive, v))
}

// ZipCode applies equality check predicate on the "zip_code" field. It's identical to ZipCodeEQ.
func ZipCode(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldZipCode, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldAddress, v))
}

// IPAddress applies equality check predicate on the "ip_address" field. It's identical to IPAddressEQ.
func IPAddress(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldIPAddress, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldDeletedAt, v))
}

// FirstnameEQ applies the EQ predicate on the "firstname" field.
func FirstnameEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldFirstname, v))
}

// FirstnameNEQ applies the NEQ predicate on the "firstname" field.
func FirstnameNEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldFirstname, v))
}

// FirstnameIn applies the In predicate on the "firstname" field.
func FirstnameIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldFirstname, vs...))
}

// FirstnameNotIn applies the NotIn predicate on the "firstname" field.
func FirstnameNotIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldFirstname, vs...))
}

// FirstnameGT applies the GT predicate on the "firstname" field.
func FirstnameGT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldFirstname, v))
}

// FirstnameGTE applies the GTE predicate on the "firstname" field.
func FirstnameGTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldFirstname, v))
}

// FirstnameLT applies the LT predicate on the "firstname" field.
func FirstnameLT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldFirstname, v))
}

// FirstnameLTE applies the LTE predicate on the "firstname" field.
func FirstnameLTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldFirstname, v))
}

// FirstnameContains applies the Contains predicate on the "firstname" field.
func FirstnameContains(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContains(FieldFirstname, v))
}

// FirstnameHasPrefix applies the HasPrefix predicate on the "firstname" field.
func FirstnameHasPrefix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasPrefix(FieldFirstname, v))
}

// FirstnameHasSuffix applies the HasSuffix predicate on the "firstname" field.
func FirstnameHasSuffix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasSuffix(FieldFirstname, v))
}

// FirstnameEqualFold applies the EqualFold predicate on the "firstname" field.
func FirstnameEqualFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEqualFold(FieldFirstname, v))
}

// FirstnameContainsFold applies the ContainsFold predicate on the "firstname" field.
func FirstnameContainsFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContainsFold(FieldFirstname, v))
}

// LastnameEQ applies the EQ predicate on the "lastname" field.
func LastnameEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldLastname, v))
}

// LastnameNEQ applies the NEQ predicate on the "lastname" field.
func LastnameNEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldLastname, v))
}

// LastnameIn applies the In predicate on the "lastname" field.
func LastnameIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldLastname, vs...))
}

// LastnameNotIn applies the NotIn predicate on the "lastname" field.
func LastnameNotIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldLastname, vs...))
}

// LastnameGT applies the GT predicate on the "lastname" field.
func LastnameGT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldLastname, v))
}

// LastnameGTE applies the GTE predicate on the "lastname" field.
func LastnameGTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldLastname, v))
}

// LastnameLT applies the LT predicate on the "lastname" field.
func LastnameLT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldLastname, v))
}

// LastnameLTE applies the LTE predicate on the "lastname" field.
func LastnameLTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldLastname, v))
}

// LastnameContains applies the Contains predicate on the "lastname" field.
func LastnameContains(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContains(FieldLastname, v))
}

// LastnameHasPrefix applies the HasPrefix predicate on the "lastname" field.
func LastnameHasPrefix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasPrefix(FieldLastname, v))
}

// LastnameHasSuffix applies the HasSuffix predicate on the "lastname" field.
func LastnameHasSuffix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasSuffix(FieldLastname, v))
}

// LastnameEqualFold applies the EqualFold predicate on the "lastname" field.
func LastnameEqualFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEqualFold(FieldLastname, v))
}

// LastnameContainsFold applies the ContainsFold predicate on the "lastname" field.
func LastnameContainsFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContainsFold(FieldLastname, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContainsFold(FieldEmail, v))
}

// BirthDateEQ applies the EQ predicate on the "birth_date" field.
func BirthDateEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldBirthDate, v))
}

// BirthDateNEQ applies the NEQ predicate on the "birth_date" field.
func BirthDateNEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldBirthDate, v))
}

// BirthDateIn applies the In predicate on the "birth_date" field.
func BirthDateIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldBirthDate, vs...))
}

// BirthDateNotIn applies the NotIn predicate on the "birth_date" field.
func BirthDateNotIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldBirthDate, vs...))
}

// BirthDateGT applies the GT predicate on the "birth_date" field.
func BirthDateGT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldBirthDate, v))
}

// BirthDateGTE applies the GTE predicate on the "birth_date" field.
func BirthDateGTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldBirthDate, v))
}

// BirthDateLT applies the LT predicate on the "birth_date" field.
func BirthDateLT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldBirthDate, v))
}

// BirthDateLTE applies the LTE predicate on the "birth_date" field.
func BirthDateLTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldBirthDate, v))
}

// BirthDateIsNil applies the IsNil predicate on the "birth_date" field.
func BirthDateIsNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldIsNull(FieldBirthDate))
}

// BirthDateNotNil applies the NotNil predicate on the "birth_date" field.
func BirthDateNotNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldNotNull(FieldBirthDate))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContainsFold(FieldPassword, v))
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldIsActive, v))
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldIsActive, v))
}

// IsActiveIn applies the In predicate on the "is_active" field.
func IsActiveIn(vs ...int) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldIsActive, vs...))
}

// IsActiveNotIn applies the NotIn predicate on the "is_active" field.
func IsActiveNotIn(vs ...int) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldIsActive, vs...))
}

// IsActiveGT applies the GT predicate on the "is_active" field.
func IsActiveGT(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldIsActive, v))
}

// IsActiveGTE applies the GTE predicate on the "is_active" field.
func IsActiveGTE(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldIsActive, v))
}

// IsActiveLT applies the LT predicate on the "is_active" field.
func IsActiveLT(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldIsActive, v))
}

// IsActiveLTE applies the LTE predicate on the "is_active" field.
func IsActiveLTE(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldIsActive, v))
}

// ZipCodeEQ applies the EQ predicate on the "zip_code" field.
func ZipCodeEQ(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldZipCode, v))
}

// ZipCodeNEQ applies the NEQ predicate on the "zip_code" field.
func ZipCodeNEQ(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldZipCode, v))
}

// ZipCodeIn applies the In predicate on the "zip_code" field.
func ZipCodeIn(vs ...int) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldZipCode, vs...))
}

// ZipCodeNotIn applies the NotIn predicate on the "zip_code" field.
func ZipCodeNotIn(vs ...int) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldZipCode, vs...))
}

// ZipCodeGT applies the GT predicate on the "zip_code" field.
func ZipCodeGT(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldZipCode, v))
}

// ZipCodeGTE applies the GTE predicate on the "zip_code" field.
func ZipCodeGTE(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldZipCode, v))
}

// ZipCodeLT applies the LT predicate on the "zip_code" field.
func ZipCodeLT(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldZipCode, v))
}

// ZipCodeLTE applies the LTE predicate on the "zip_code" field.
func ZipCodeLTE(v int) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldZipCode, v))
}

// ZipCodeIsNil applies the IsNil predicate on the "zip_code" field.
func ZipCodeIsNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldIsNull(FieldZipCode))
}

// ZipCodeNotNil applies the NotNil predicate on the "zip_code" field.
func ZipCodeNotNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldNotNull(FieldZipCode))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContainsFold(FieldAddress, v))
}

// IPAddressEQ applies the EQ predicate on the "ip_address" field.
func IPAddressEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldIPAddress, v))
}

// IPAddressNEQ applies the NEQ predicate on the "ip_address" field.
func IPAddressNEQ(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldIPAddress, v))
}

// IPAddressIn applies the In predicate on the "ip_address" field.
func IPAddressIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldIPAddress, vs...))
}

// IPAddressNotIn applies the NotIn predicate on the "ip_address" field.
func IPAddressNotIn(vs ...string) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldIPAddress, vs...))
}

// IPAddressGT applies the GT predicate on the "ip_address" field.
func IPAddressGT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldIPAddress, v))
}

// IPAddressGTE applies the GTE predicate on the "ip_address" field.
func IPAddressGTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldIPAddress, v))
}

// IPAddressLT applies the LT predicate on the "ip_address" field.
func IPAddressLT(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldIPAddress, v))
}

// IPAddressLTE applies the LTE predicate on the "ip_address" field.
func IPAddressLTE(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldIPAddress, v))
}

// IPAddressContains applies the Contains predicate on the "ip_address" field.
func IPAddressContains(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContains(FieldIPAddress, v))
}

// IPAddressHasPrefix applies the HasPrefix predicate on the "ip_address" field.
func IPAddressHasPrefix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasPrefix(FieldIPAddress, v))
}

// IPAddressHasSuffix applies the HasSuffix predicate on the "ip_address" field.
func IPAddressHasSuffix(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldHasSuffix(FieldIPAddress, v))
}

// IPAddressIsNil applies the IsNil predicate on the "ip_address" field.
func IPAddressIsNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldIsNull(FieldIPAddress))
}

// IPAddressNotNil applies the NotNil predicate on the "ip_address" field.
func IPAddressNotNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldNotNull(FieldIPAddress))
}

// IPAddressEqualFold applies the EqualFold predicate on the "ip_address" field.
func IPAddressEqualFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldEqualFold(FieldIPAddress, v))
}

// IPAddressContainsFold applies the ContainsFold predicate on the "ip_address" field.
func IPAddressContainsFold(v string) predicate.TblUser {
	return predicate.TblUser(sql.FieldContainsFold(FieldIPAddress, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TblUser {
	return predicate.TblUser(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TblUser {
	return predicate.TblUser(sql.FieldNotNull(FieldDeletedAt))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.TblUser {
	return predicate.TblUser(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.TblUser {
	return predicate.TblUser(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.TblUser {
	return predicate.TblUser(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.TblUser {
	return predicate.TblUser(sql.FieldNotIn(FieldRole, vs...))
}

// HasUserToken applies the HasEdge predicate on the "UserToken" edge.
func HasUserToken() predicate.TblUser {
	return predicate.TblUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserTokenTable, UserTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserTokenWith applies the HasEdge predicate on the "UserToken" edge with a given conditions (other predicates).
func HasUserTokenWith(preds ...predicate.TblAuthToken) predicate.TblUser {
	return predicate.TblUser(func(s *sql.Selector) {
		step := newUserTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserCart applies the HasEdge predicate on the "UserCart" edge.
func HasUserCart() predicate.TblUser {
	return predicate.TblUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserCartTable, UserCartColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserCartWith applies the HasEdge predicate on the "UserCart" edge with a given conditions (other predicates).
func HasUserCartWith(preds ...predicate.TblCart) predicate.TblUser {
	return predicate.TblUser(func(s *sql.Selector) {
		step := newUserCartStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserPayment applies the HasEdge predicate on the "UserPayment" edge.
func HasUserPayment() predicate.TblUser {
	return predicate.TblUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserPaymentTable, UserPaymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserPaymentWith applies the HasEdge predicate on the "UserPayment" edge with a given conditions (other predicates).
func HasUserPaymentWith(preds ...predicate.TblPayment) predicate.TblUser {
	return predicate.TblUser(func(s *sql.Selector) {
		step := newUserPaymentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TblUser) predicate.TblUser {
	return predicate.TblUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TblUser) predicate.TblUser {
	return predicate.TblUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TblUser) predicate.TblUser {
	return predicate.TblUser(sql.NotPredicates(p))
}
