// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblinventorytag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblInventoryTagDelete is the builder for deleting a TblInventoryTag entity.
type TblInventoryTagDelete struct {
	config
	hooks    []Hook
	mutation *TblInventoryTagMutation
}

// Where appends a list predicates to the TblInventoryTagDelete builder.
func (titd *TblInventoryTagDelete) Where(ps ...predicate.TblInventoryTag) *TblInventoryTagDelete {
	titd.mutation.Where(ps...)
	return titd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (titd *TblInventoryTagDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, titd.sqlExec, titd.mutation, titd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (titd *TblInventoryTagDelete) ExecX(ctx context.Context) int {
	n, err := titd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (titd *TblInventoryTagDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tblinventorytag.Table, sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString))
	if ps := titd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, titd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	titd.mutation.done = true
	return affected, err
}

// TblInventoryTagDeleteOne is the builder for deleting a single TblInventoryTag entity.
type TblInventoryTagDeleteOne struct {
	titd *TblInventoryTagDelete
}

// Where appends a list predicates to the TblInventoryTagDelete builder.
func (titdo *TblInventoryTagDeleteOne) Where(ps ...predicate.TblInventoryTag) *TblInventoryTagDeleteOne {
	titdo.titd.mutation.Where(ps...)
	return titdo
}

// Exec executes the deletion query.
func (titdo *TblInventoryTagDeleteOne) Exec(ctx context.Context) error {
	n, err := titdo.titd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tblinventorytag.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (titdo *TblInventoryTagDeleteOne) ExecX(ctx context.Context) {
	if err := titdo.Exec(ctx); err != nil {
		panic(err)
	}
}
