// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblauthtoken"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblpayment"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblUserCreate is the builder for creating a TblUser entity.
type TblUserCreate struct {
	config
	mutation *TblUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFirstname sets the "firstname" field.
func (tuc *TblUserCreate) SetFirstname(s string) *TblUserCreate {
	tuc.mutation.SetFirstname(s)
	return tuc
}

// SetLastname sets the "lastname" field.
func (tuc *TblUserCreate) SetLastname(s string) *TblUserCreate {
	tuc.mutation.SetLastname(s)
	return tuc
}

// SetEmail sets the "email" field.
func (tuc *TblUserCreate) SetEmail(s string) *TblUserCreate {
	tuc.mutation.SetEmail(s)
	return tuc
}

// SetBirthDate sets the "birth_date" field.
func (tuc *TblUserCreate) SetBirthDate(t time.Time) *TblUserCreate {
	tuc.mutation.SetBirthDate(t)
	return tuc
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableBirthDate(t *time.Time) *TblUserCreate {
	if t != nil {
		tuc.SetBirthDate(*t)
	}
	return tuc
}

// SetPassword sets the "password" field.
func (tuc *TblUserCreate) SetPassword(s string) *TblUserCreate {
	tuc.mutation.SetPassword(s)
	return tuc
}

// SetIsActive sets the "is_active" field.
func (tuc *TblUserCreate) SetIsActive(b bool) *TblUserCreate {
	tuc.mutation.SetIsActive(b)
	return tuc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableIsActive(b *bool) *TblUserCreate {
	if b != nil {
		tuc.SetIsActive(*b)
	}
	return tuc
}

// SetZipCode sets the "zip_code" field.
func (tuc *TblUserCreate) SetZipCode(i int) *TblUserCreate {
	tuc.mutation.SetZipCode(i)
	return tuc
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableZipCode(i *int) *TblUserCreate {
	if i != nil {
		tuc.SetZipCode(*i)
	}
	return tuc
}

// SetAddress sets the "address" field.
func (tuc *TblUserCreate) SetAddress(s string) *TblUserCreate {
	tuc.mutation.SetAddress(s)
	return tuc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableAddress(s *string) *TblUserCreate {
	if s != nil {
		tuc.SetAddress(*s)
	}
	return tuc
}

// SetIPAddress sets the "ip_address" field.
func (tuc *TblUserCreate) SetIPAddress(s string) *TblUserCreate {
	tuc.mutation.SetIPAddress(s)
	return tuc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableIPAddress(s *string) *TblUserCreate {
	if s != nil {
		tuc.SetIPAddress(*s)
	}
	return tuc
}

// SetCreatedAt sets the "created_at" field.
func (tuc *TblUserCreate) SetCreatedAt(t time.Time) *TblUserCreate {
	tuc.mutation.SetCreatedAt(t)
	return tuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableCreatedAt(t *time.Time) *TblUserCreate {
	if t != nil {
		tuc.SetCreatedAt(*t)
	}
	return tuc
}

// SetUpdatedAt sets the "updated_at" field.
func (tuc *TblUserCreate) SetUpdatedAt(t time.Time) *TblUserCreate {
	tuc.mutation.SetUpdatedAt(t)
	return tuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableUpdatedAt(t *time.Time) *TblUserCreate {
	if t != nil {
		tuc.SetUpdatedAt(*t)
	}
	return tuc
}

// SetDeletedAt sets the "deleted_at" field.
func (tuc *TblUserCreate) SetDeletedAt(t time.Time) *TblUserCreate {
	tuc.mutation.SetDeletedAt(t)
	return tuc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableDeletedAt(t *time.Time) *TblUserCreate {
	if t != nil {
		tuc.SetDeletedAt(*t)
	}
	return tuc
}

// SetRole sets the "role" field.
func (tuc *TblUserCreate) SetRole(t tbluser.Role) *TblUserCreate {
	tuc.mutation.SetRole(t)
	return tuc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (tuc *TblUserCreate) SetNillableRole(t *tbluser.Role) *TblUserCreate {
	if t != nil {
		tuc.SetRole(*t)
	}
	return tuc
}

// SetID sets the "id" field.
func (tuc *TblUserCreate) SetID(s string) *TblUserCreate {
	tuc.mutation.SetID(s)
	return tuc
}

// AddUserTokenIDs adds the "UserToken" edge to the TblAuthToken entity by IDs.
func (tuc *TblUserCreate) AddUserTokenIDs(ids ...string) *TblUserCreate {
	tuc.mutation.AddUserTokenIDs(ids...)
	return tuc
}

// AddUserToken adds the "UserToken" edges to the TblAuthToken entity.
func (tuc *TblUserCreate) AddUserToken(t ...*TblAuthToken) *TblUserCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuc.AddUserTokenIDs(ids...)
}

// AddUserCartIDs adds the "UserCart" edge to the TblCart entity by IDs.
func (tuc *TblUserCreate) AddUserCartIDs(ids ...string) *TblUserCreate {
	tuc.mutation.AddUserCartIDs(ids...)
	return tuc
}

// AddUserCart adds the "UserCart" edges to the TblCart entity.
func (tuc *TblUserCreate) AddUserCart(t ...*TblCart) *TblUserCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuc.AddUserCartIDs(ids...)
}

// AddUserPaymentIDs adds the "UserPayment" edge to the TblPayment entity by IDs.
func (tuc *TblUserCreate) AddUserPaymentIDs(ids ...string) *TblUserCreate {
	tuc.mutation.AddUserPaymentIDs(ids...)
	return tuc
}

// AddUserPayment adds the "UserPayment" edges to the TblPayment entity.
func (tuc *TblUserCreate) AddUserPayment(t ...*TblPayment) *TblUserCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuc.AddUserPaymentIDs(ids...)
}

// Mutation returns the TblUserMutation object of the builder.
func (tuc *TblUserCreate) Mutation() *TblUserMutation {
	return tuc.mutation
}

// Save creates the TblUser in the database.
func (tuc *TblUserCreate) Save(ctx context.Context) (*TblUser, error) {
	tuc.defaults()
	return withHooks(ctx, tuc.sqlSave, tuc.mutation, tuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tuc *TblUserCreate) SaveX(ctx context.Context) *TblUser {
	v, err := tuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tuc *TblUserCreate) Exec(ctx context.Context) error {
	_, err := tuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuc *TblUserCreate) ExecX(ctx context.Context) {
	if err := tuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuc *TblUserCreate) defaults() {
	if _, ok := tuc.mutation.IsActive(); !ok {
		v := tbluser.DefaultIsActive
		tuc.mutation.SetIsActive(v)
	}
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		v := tbluser.DefaultCreatedAt()
		tuc.mutation.SetCreatedAt(v)
	}
	if _, ok := tuc.mutation.UpdatedAt(); !ok {
		v := tbluser.DefaultUpdatedAt()
		tuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tuc.mutation.Role(); !ok {
		v := tbluser.DefaultRole
		tuc.mutation.SetRole(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuc *TblUserCreate) check() error {
	if _, ok := tuc.mutation.Firstname(); !ok {
		return &ValidationError{Name: "firstname", err: errors.New(`entgen: missing required field "TblUser.firstname"`)}
	}
	if v, ok := tuc.mutation.Firstname(); ok {
		if err := tbluser.FirstnameValidator(v); err != nil {
			return &ValidationError{Name: "firstname", err: fmt.Errorf(`entgen: validator failed for field "TblUser.firstname": %w`, err)}
		}
	}
	if _, ok := tuc.mutation.Lastname(); !ok {
		return &ValidationError{Name: "lastname", err: errors.New(`entgen: missing required field "TblUser.lastname"`)}
	}
	if v, ok := tuc.mutation.Lastname(); ok {
		if err := tbluser.LastnameValidator(v); err != nil {
			return &ValidationError{Name: "lastname", err: fmt.Errorf(`entgen: validator failed for field "TblUser.lastname": %w`, err)}
		}
	}
	if _, ok := tuc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`entgen: missing required field "TblUser.email"`)}
	}
	if v, ok := tuc.mutation.Email(); ok {
		if err := tbluser.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`entgen: validator failed for field "TblUser.email": %w`, err)}
		}
	}
	if _, ok := tuc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`entgen: missing required field "TblUser.password"`)}
	}
	if v, ok := tuc.mutation.Password(); ok {
		if err := tbluser.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`entgen: validator failed for field "TblUser.password": %w`, err)}
		}
	}
	if _, ok := tuc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`entgen: missing required field "TblUser.is_active"`)}
	}
	if v, ok := tuc.mutation.IPAddress(); ok {
		if err := tbluser.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`entgen: validator failed for field "TblUser.ip_address": %w`, err)}
		}
	}
	if _, ok := tuc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`entgen: missing required field "TblUser.created_at"`)}
	}
	if _, ok := tuc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`entgen: missing required field "TblUser.updated_at"`)}
	}
	if _, ok := tuc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`entgen: missing required field "TblUser.role"`)}
	}
	if v, ok := tuc.mutation.Role(); ok {
		if err := tbluser.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`entgen: validator failed for field "TblUser.role": %w`, err)}
		}
	}
	if v, ok := tuc.mutation.ID(); ok {
		if err := tbluser.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entgen: validator failed for field "TblUser.id": %w`, err)}
		}
	}
	return nil
}

func (tuc *TblUserCreate) sqlSave(ctx context.Context) (*TblUser, error) {
	if err := tuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblUser.ID type: %T", _spec.ID.Value)
		}
	}
	tuc.mutation.id = &_node.ID
	tuc.mutation.done = true
	return _node, nil
}

func (tuc *TblUserCreate) createSpec() (*TblUser, *sqlgraph.CreateSpec) {
	var (
		_node = &TblUser{config: tuc.config}
		_spec = sqlgraph.NewCreateSpec(tbluser.Table, sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString))
	)
	_spec.OnConflict = tuc.conflict
	if id, ok := tuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tuc.mutation.Firstname(); ok {
		_spec.SetField(tbluser.FieldFirstname, field.TypeString, value)
		_node.Firstname = value
	}
	if value, ok := tuc.mutation.Lastname(); ok {
		_spec.SetField(tbluser.FieldLastname, field.TypeString, value)
		_node.Lastname = value
	}
	if value, ok := tuc.mutation.Email(); ok {
		_spec.SetField(tbluser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := tuc.mutation.BirthDate(); ok {
		_spec.SetField(tbluser.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = &value
	}
	if value, ok := tuc.mutation.Password(); ok {
		_spec.SetField(tbluser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := tuc.mutation.IsActive(); ok {
		_spec.SetField(tbluser.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := tuc.mutation.ZipCode(); ok {
		_spec.SetField(tbluser.FieldZipCode, field.TypeInt, value)
		_node.ZipCode = &value
	}
	if value, ok := tuc.mutation.Address(); ok {
		_spec.SetField(tbluser.FieldAddress, field.TypeString, value)
		_node.Address = &value
	}
	if value, ok := tuc.mutation.IPAddress(); ok {
		_spec.SetField(tbluser.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = &value
	}
	if value, ok := tuc.mutation.CreatedAt(); ok {
		_spec.SetField(tbluser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tuc.mutation.UpdatedAt(); ok {
		_spec.SetField(tbluser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tuc.mutation.DeletedAt(); ok {
		_spec.SetField(tbluser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := tuc.mutation.Role(); ok {
		_spec.SetField(tbluser.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if nodes := tuc.mutation.UserTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserTokenTable,
			Columns: []string{tbluser.UserTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuc.mutation.UserCartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserCartTable,
			Columns: []string{tbluser.UserCartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tuc.mutation.UserPaymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tbluser.UserPaymentTable,
			Columns: []string{tbluser.UserPaymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblpayment.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblUser.Create().
//		SetFirstname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblUserUpsert) {
//			SetFirstname(v+v).
//		}).
//		Exec(ctx)
func (tuc *TblUserCreate) OnConflict(opts ...sql.ConflictOption) *TblUserUpsertOne {
	tuc.conflict = opts
	return &TblUserUpsertOne{
		create: tuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tuc *TblUserCreate) OnConflictColumns(columns ...string) *TblUserUpsertOne {
	tuc.conflict = append(tuc.conflict, sql.ConflictColumns(columns...))
	return &TblUserUpsertOne{
		create: tuc,
	}
}

type (
	// TblUserUpsertOne is the builder for "upsert"-ing
	//  one TblUser node.
	TblUserUpsertOne struct {
		create *TblUserCreate
	}

	// TblUserUpsert is the "OnConflict" setter.
	TblUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetFirstname sets the "firstname" field.
func (u *TblUserUpsert) SetFirstname(v string) *TblUserUpsert {
	u.Set(tbluser.FieldFirstname, v)
	return u
}

// UpdateFirstname sets the "firstname" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateFirstname() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldFirstname)
	return u
}

// SetLastname sets the "lastname" field.
func (u *TblUserUpsert) SetLastname(v string) *TblUserUpsert {
	u.Set(tbluser.FieldLastname, v)
	return u
}

// UpdateLastname sets the "lastname" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateLastname() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldLastname)
	return u
}

// SetEmail sets the "email" field.
func (u *TblUserUpsert) SetEmail(v string) *TblUserUpsert {
	u.Set(tbluser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateEmail() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldEmail)
	return u
}

// SetBirthDate sets the "birth_date" field.
func (u *TblUserUpsert) SetBirthDate(v time.Time) *TblUserUpsert {
	u.Set(tbluser.FieldBirthDate, v)
	return u
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateBirthDate() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldBirthDate)
	return u
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *TblUserUpsert) ClearBirthDate() *TblUserUpsert {
	u.SetNull(tbluser.FieldBirthDate)
	return u
}

// SetPassword sets the "password" field.
func (u *TblUserUpsert) SetPassword(v string) *TblUserUpsert {
	u.Set(tbluser.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *TblUserUpsert) UpdatePassword() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldPassword)
	return u
}

// SetIsActive sets the "is_active" field.
func (u *TblUserUpsert) SetIsActive(v bool) *TblUserUpsert {
	u.Set(tbluser.FieldIsActive, v)
	return u
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateIsActive() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldIsActive)
	return u
}

// SetZipCode sets the "zip_code" field.
func (u *TblUserUpsert) SetZipCode(v int) *TblUserUpsert {
	u.Set(tbluser.FieldZipCode, v)
	return u
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateZipCode() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldZipCode)
	return u
}

// AddZipCode adds v to the "zip_code" field.
func (u *TblUserUpsert) AddZipCode(v int) *TblUserUpsert {
	u.Add(tbluser.FieldZipCode, v)
	return u
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *TblUserUpsert) ClearZipCode() *TblUserUpsert {
	u.SetNull(tbluser.FieldZipCode)
	return u
}

// SetAddress sets the "address" field.
func (u *TblUserUpsert) SetAddress(v string) *TblUserUpsert {
	u.Set(tbluser.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateAddress() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *TblUserUpsert) ClearAddress() *TblUserUpsert {
	u.SetNull(tbluser.FieldAddress)
	return u
}

// SetIPAddress sets the "ip_address" field.
func (u *TblUserUpsert) SetIPAddress(v string) *TblUserUpsert {
	u.Set(tbluser.FieldIPAddress, v)
	return u
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateIPAddress() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldIPAddress)
	return u
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *TblUserUpsert) ClearIPAddress() *TblUserUpsert {
	u.SetNull(tbluser.FieldIPAddress)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TblUserUpsert) SetCreatedAt(v time.Time) *TblUserUpsert {
	u.Set(tbluser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateCreatedAt() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TblUserUpsert) SetUpdatedAt(v time.Time) *TblUserUpsert {
	u.Set(tbluser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateUpdatedAt() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TblUserUpsert) SetDeletedAt(v time.Time) *TblUserUpsert {
	u.Set(tbluser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateDeletedAt() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TblUserUpsert) ClearDeletedAt() *TblUserUpsert {
	u.SetNull(tbluser.FieldDeletedAt)
	return u
}

// SetRole sets the "role" field.
func (u *TblUserUpsert) SetRole(v tbluser.Role) *TblUserUpsert {
	u.Set(tbluser.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *TblUserUpsert) UpdateRole() *TblUserUpsert {
	u.SetExcluded(tbluser.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tbluser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblUserUpsertOne) UpdateNewValues() *TblUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tbluser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblUserUpsertOne) Ignore() *TblUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblUserUpsertOne) DoNothing() *TblUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblUserCreate.OnConflict
// documentation for more info.
func (u *TblUserUpsertOne) Update(set func(*TblUserUpsert)) *TblUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstname sets the "firstname" field.
func (u *TblUserUpsertOne) SetFirstname(v string) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetFirstname(v)
	})
}

// UpdateFirstname sets the "firstname" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateFirstname() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateFirstname()
	})
}

// SetLastname sets the "lastname" field.
func (u *TblUserUpsertOne) SetLastname(v string) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetLastname(v)
	})
}

// UpdateLastname sets the "lastname" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateLastname() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateLastname()
	})
}

// SetEmail sets the "email" field.
func (u *TblUserUpsertOne) SetEmail(v string) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateEmail() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateEmail()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *TblUserUpsertOne) SetBirthDate(v time.Time) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateBirthDate() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *TblUserUpsertOne) ClearBirthDate() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearBirthDate()
	})
}

// SetPassword sets the "password" field.
func (u *TblUserUpsertOne) SetPassword(v string) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdatePassword() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdatePassword()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TblUserUpsertOne) SetIsActive(v bool) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateIsActive() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *TblUserUpsertOne) SetZipCode(v int) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetZipCode(v)
	})
}

// AddZipCode adds v to the "zip_code" field.
func (u *TblUserUpsertOne) AddZipCode(v int) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.AddZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateZipCode() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *TblUserUpsertOne) ClearZipCode() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearZipCode()
	})
}

// SetAddress sets the "address" field.
func (u *TblUserUpsertOne) SetAddress(v string) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateAddress() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *TblUserUpsertOne) ClearAddress() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearAddress()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *TblUserUpsertOne) SetIPAddress(v string) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateIPAddress() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *TblUserUpsertOne) ClearIPAddress() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearIPAddress()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TblUserUpsertOne) SetCreatedAt(v time.Time) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateCreatedAt() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TblUserUpsertOne) SetUpdatedAt(v time.Time) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateUpdatedAt() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TblUserUpsertOne) SetDeletedAt(v time.Time) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateDeletedAt() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TblUserUpsertOne) ClearDeletedAt() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetRole sets the "role" field.
func (u *TblUserUpsertOne) SetRole(v tbluser.Role) *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *TblUserUpsertOne) UpdateRole() *TblUserUpsertOne {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *TblUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblUserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblUserUpsertOne.ID is not supported by MySQL driver. Use TblUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblUserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblUserCreateBulk is the builder for creating many TblUser entities in bulk.
type TblUserCreateBulk struct {
	config
	err      error
	builders []*TblUserCreate
	conflict []sql.ConflictOption
}

// Save creates the TblUser entities in the database.
func (tucb *TblUserCreateBulk) Save(ctx context.Context) ([]*TblUser, error) {
	if tucb.err != nil {
		return nil, tucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tucb.builders))
	nodes := make([]*TblUser, len(tucb.builders))
	mutators := make([]Mutator, len(tucb.builders))
	for i := range tucb.builders {
		func(i int, root context.Context) {
			builder := tucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tucb *TblUserCreateBulk) SaveX(ctx context.Context) []*TblUser {
	v, err := tucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tucb *TblUserCreateBulk) Exec(ctx context.Context) error {
	_, err := tucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tucb *TblUserCreateBulk) ExecX(ctx context.Context) {
	if err := tucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblUserUpsert) {
//			SetFirstname(v+v).
//		}).
//		Exec(ctx)
func (tucb *TblUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblUserUpsertBulk {
	tucb.conflict = opts
	return &TblUserUpsertBulk{
		create: tucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tucb *TblUserCreateBulk) OnConflictColumns(columns ...string) *TblUserUpsertBulk {
	tucb.conflict = append(tucb.conflict, sql.ConflictColumns(columns...))
	return &TblUserUpsertBulk{
		create: tucb,
	}
}

// TblUserUpsertBulk is the builder for "upsert"-ing
// a bulk of TblUser nodes.
type TblUserUpsertBulk struct {
	create *TblUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tbluser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblUserUpsertBulk) UpdateNewValues() *TblUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tbluser.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblUserUpsertBulk) Ignore() *TblUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblUserUpsertBulk) DoNothing() *TblUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblUserCreateBulk.OnConflict
// documentation for more info.
func (u *TblUserUpsertBulk) Update(set func(*TblUserUpsert)) *TblUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetFirstname sets the "firstname" field.
func (u *TblUserUpsertBulk) SetFirstname(v string) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetFirstname(v)
	})
}

// UpdateFirstname sets the "firstname" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateFirstname() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateFirstname()
	})
}

// SetLastname sets the "lastname" field.
func (u *TblUserUpsertBulk) SetLastname(v string) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetLastname(v)
	})
}

// UpdateLastname sets the "lastname" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateLastname() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateLastname()
	})
}

// SetEmail sets the "email" field.
func (u *TblUserUpsertBulk) SetEmail(v string) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateEmail() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateEmail()
	})
}

// SetBirthDate sets the "birth_date" field.
func (u *TblUserUpsertBulk) SetBirthDate(v time.Time) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetBirthDate(v)
	})
}

// UpdateBirthDate sets the "birth_date" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateBirthDate() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateBirthDate()
	})
}

// ClearBirthDate clears the value of the "birth_date" field.
func (u *TblUserUpsertBulk) ClearBirthDate() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearBirthDate()
	})
}

// SetPassword sets the "password" field.
func (u *TblUserUpsertBulk) SetPassword(v string) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdatePassword() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdatePassword()
	})
}

// SetIsActive sets the "is_active" field.
func (u *TblUserUpsertBulk) SetIsActive(v bool) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetIsActive(v)
	})
}

// UpdateIsActive sets the "is_active" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateIsActive() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateIsActive()
	})
}

// SetZipCode sets the "zip_code" field.
func (u *TblUserUpsertBulk) SetZipCode(v int) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetZipCode(v)
	})
}

// AddZipCode adds v to the "zip_code" field.
func (u *TblUserUpsertBulk) AddZipCode(v int) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.AddZipCode(v)
	})
}

// UpdateZipCode sets the "zip_code" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateZipCode() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateZipCode()
	})
}

// ClearZipCode clears the value of the "zip_code" field.
func (u *TblUserUpsertBulk) ClearZipCode() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearZipCode()
	})
}

// SetAddress sets the "address" field.
func (u *TblUserUpsertBulk) SetAddress(v string) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateAddress() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *TblUserUpsertBulk) ClearAddress() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearAddress()
	})
}

// SetIPAddress sets the "ip_address" field.
func (u *TblUserUpsertBulk) SetIPAddress(v string) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetIPAddress(v)
	})
}

// UpdateIPAddress sets the "ip_address" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateIPAddress() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateIPAddress()
	})
}

// ClearIPAddress clears the value of the "ip_address" field.
func (u *TblUserUpsertBulk) ClearIPAddress() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearIPAddress()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TblUserUpsertBulk) SetCreatedAt(v time.Time) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateCreatedAt() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TblUserUpsertBulk) SetUpdatedAt(v time.Time) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateUpdatedAt() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *TblUserUpsertBulk) SetDeletedAt(v time.Time) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateDeletedAt() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *TblUserUpsertBulk) ClearDeletedAt() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.ClearDeletedAt()
	})
}

// SetRole sets the "role" field.
func (u *TblUserUpsertBulk) SetRole(v tbluser.Role) *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *TblUserUpsertBulk) UpdateRole() *TblUserUpsertBulk {
	return u.Update(func(s *TblUserUpsert) {
		s.UpdateRole()
	})
}

// Exec executes the query.
func (u *TblUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
