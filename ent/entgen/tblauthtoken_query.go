// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthclient"
	"inventory/ent/entgen/tblauthtoken"
	"inventory/ent/entgen/tbluser"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthTokenQuery is the builder for querying TblAuthToken entities.
type TblAuthTokenQuery struct {
	config
	ctx             *QueryContext
	order           []tblauthtoken.OrderOption
	inters          []Interceptor
	predicates      []predicate.TblAuthToken
	withTokenClient *TblAuthClientQuery
	withTokenUser   *TblUserQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TblAuthTokenQuery builder.
func (tatq *TblAuthTokenQuery) Where(ps ...predicate.TblAuthToken) *TblAuthTokenQuery {
	tatq.predicates = append(tatq.predicates, ps...)
	return tatq
}

// Limit the number of records to be returned by this query.
func (tatq *TblAuthTokenQuery) Limit(limit int) *TblAuthTokenQuery {
	tatq.ctx.Limit = &limit
	return tatq
}

// Offset to start from.
func (tatq *TblAuthTokenQuery) Offset(offset int) *TblAuthTokenQuery {
	tatq.ctx.Offset = &offset
	return tatq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tatq *TblAuthTokenQuery) Unique(unique bool) *TblAuthTokenQuery {
	tatq.ctx.Unique = &unique
	return tatq
}

// Order specifies how the records should be ordered.
func (tatq *TblAuthTokenQuery) Order(o ...tblauthtoken.OrderOption) *TblAuthTokenQuery {
	tatq.order = append(tatq.order, o...)
	return tatq
}

// QueryTokenClient chains the current query on the "TokenClient" edge.
func (tatq *TblAuthTokenQuery) QueryTokenClient() *TblAuthClientQuery {
	query := (&TblAuthClientClient{config: tatq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tatq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tblauthtoken.Table, tblauthtoken.FieldID, selector),
			sqlgraph.To(tblauthclient.Table, tblauthclient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tblauthtoken.TokenClientTable, tblauthtoken.TokenClientColumn),
		)
		fromU = sqlgraph.SetNeighbors(tatq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTokenUser chains the current query on the "TokenUser" edge.
func (tatq *TblAuthTokenQuery) QueryTokenUser() *TblUserQuery {
	query := (&TblUserClient{config: tatq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tatq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tatq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tblauthtoken.Table, tblauthtoken.FieldID, selector),
			sqlgraph.To(tbluser.Table, tbluser.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, tblauthtoken.TokenUserTable, tblauthtoken.TokenUserColumn),
		)
		fromU = sqlgraph.SetNeighbors(tatq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TblAuthToken entity from the query.
// Returns a *NotFoundError when no TblAuthToken was found.
func (tatq *TblAuthTokenQuery) First(ctx context.Context) (*TblAuthToken, error) {
	nodes, err := tatq.Limit(1).All(setContextOp(ctx, tatq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tblauthtoken.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) FirstX(ctx context.Context) *TblAuthToken {
	node, err := tatq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TblAuthToken ID from the query.
// Returns a *NotFoundError when no TblAuthToken ID was found.
func (tatq *TblAuthTokenQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tatq.Limit(1).IDs(setContextOp(ctx, tatq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tblauthtoken.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) FirstIDX(ctx context.Context) string {
	id, err := tatq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TblAuthToken entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TblAuthToken entity is found.
// Returns a *NotFoundError when no TblAuthToken entities are found.
func (tatq *TblAuthTokenQuery) Only(ctx context.Context) (*TblAuthToken, error) {
	nodes, err := tatq.Limit(2).All(setContextOp(ctx, tatq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tblauthtoken.Label}
	default:
		return nil, &NotSingularError{tblauthtoken.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) OnlyX(ctx context.Context) *TblAuthToken {
	node, err := tatq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TblAuthToken ID in the query.
// Returns a *NotSingularError when more than one TblAuthToken ID is found.
// Returns a *NotFoundError when no entities are found.
func (tatq *TblAuthTokenQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tatq.Limit(2).IDs(setContextOp(ctx, tatq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tblauthtoken.Label}
	default:
		err = &NotSingularError{tblauthtoken.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) OnlyIDX(ctx context.Context) string {
	id, err := tatq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TblAuthTokens.
func (tatq *TblAuthTokenQuery) All(ctx context.Context) ([]*TblAuthToken, error) {
	ctx = setContextOp(ctx, tatq.ctx, ent.OpQueryAll)
	if err := tatq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TblAuthToken, *TblAuthTokenQuery]()
	return withInterceptors[[]*TblAuthToken](ctx, tatq, qr, tatq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) AllX(ctx context.Context) []*TblAuthToken {
	nodes, err := tatq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TblAuthToken IDs.
func (tatq *TblAuthTokenQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tatq.ctx.Unique == nil && tatq.path != nil {
		tatq.Unique(true)
	}
	ctx = setContextOp(ctx, tatq.ctx, ent.OpQueryIDs)
	if err = tatq.Select(tblauthtoken.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) IDsX(ctx context.Context) []string {
	ids, err := tatq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tatq *TblAuthTokenQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tatq.ctx, ent.OpQueryCount)
	if err := tatq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tatq, querierCount[*TblAuthTokenQuery](), tatq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) CountX(ctx context.Context) int {
	count, err := tatq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tatq *TblAuthTokenQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tatq.ctx, ent.OpQueryExist)
	switch _, err := tatq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entgen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tatq *TblAuthTokenQuery) ExistX(ctx context.Context) bool {
	exist, err := tatq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TblAuthTokenQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tatq *TblAuthTokenQuery) Clone() *TblAuthTokenQuery {
	if tatq == nil {
		return nil
	}
	return &TblAuthTokenQuery{
		config:          tatq.config,
		ctx:             tatq.ctx.Clone(),
		order:           append([]tblauthtoken.OrderOption{}, tatq.order...),
		inters:          append([]Interceptor{}, tatq.inters...),
		predicates:      append([]predicate.TblAuthToken{}, tatq.predicates...),
		withTokenClient: tatq.withTokenClient.Clone(),
		withTokenUser:   tatq.withTokenUser.Clone(),
		// clone intermediate query.
		sql:  tatq.sql.Clone(),
		path: tatq.path,
	}
}

// WithTokenClient tells the query-builder to eager-load the nodes that are connected to
// the "TokenClient" edge. The optional arguments are used to configure the query builder of the edge.
func (tatq *TblAuthTokenQuery) WithTokenClient(opts ...func(*TblAuthClientQuery)) *TblAuthTokenQuery {
	query := (&TblAuthClientClient{config: tatq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tatq.withTokenClient = query
	return tatq
}

// WithTokenUser tells the query-builder to eager-load the nodes that are connected to
// the "TokenUser" edge. The optional arguments are used to configure the query builder of the edge.
func (tatq *TblAuthTokenQuery) WithTokenUser(opts ...func(*TblUserQuery)) *TblAuthTokenQuery {
	query := (&TblUserClient{config: tatq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tatq.withTokenUser = query
	return tatq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AuthUUID string `json:"auth_uuid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TblAuthToken.Query().
//		GroupBy(tblauthtoken.FieldAuthUUID).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
func (tatq *TblAuthTokenQuery) GroupBy(field string, fields ...string) *TblAuthTokenGroupBy {
	tatq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TblAuthTokenGroupBy{build: tatq}
	grbuild.flds = &tatq.ctx.Fields
	grbuild.label = tblauthtoken.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AuthUUID string `json:"auth_uuid,omitempty"`
//	}
//
//	client.TblAuthToken.Query().
//		Select(tblauthtoken.FieldAuthUUID).
//		Scan(ctx, &v)
func (tatq *TblAuthTokenQuery) Select(fields ...string) *TblAuthTokenSelect {
	tatq.ctx.Fields = append(tatq.ctx.Fields, fields...)
	sbuild := &TblAuthTokenSelect{TblAuthTokenQuery: tatq}
	sbuild.label = tblauthtoken.Label
	sbuild.flds, sbuild.scan = &tatq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TblAuthTokenSelect configured with the given aggregations.
func (tatq *TblAuthTokenQuery) Aggregate(fns ...AggregateFunc) *TblAuthTokenSelect {
	return tatq.Select().Aggregate(fns...)
}

func (tatq *TblAuthTokenQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tatq.inters {
		if inter == nil {
			return fmt.Errorf("entgen: uninitialized interceptor (forgotten import entgen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tatq); err != nil {
				return err
			}
		}
	}
	for _, f := range tatq.ctx.Fields {
		if !tblauthtoken.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if tatq.path != nil {
		prev, err := tatq.path(ctx)
		if err != nil {
			return err
		}
		tatq.sql = prev
	}
	return nil
}

func (tatq *TblAuthTokenQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TblAuthToken, error) {
	var (
		nodes       = []*TblAuthToken{}
		_spec       = tatq.querySpec()
		loadedTypes = [2]bool{
			tatq.withTokenClient != nil,
			tatq.withTokenUser != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TblAuthToken).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TblAuthToken{config: tatq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tatq.modifiers) > 0 {
		_spec.Modifiers = tatq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tatq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tatq.withTokenClient; query != nil {
		if err := tatq.loadTokenClient(ctx, query, nodes, nil,
			func(n *TblAuthToken, e *TblAuthClient) { n.Edges.TokenClient = e }); err != nil {
			return nil, err
		}
	}
	if query := tatq.withTokenUser; query != nil {
		if err := tatq.loadTokenUser(ctx, query, nodes, nil,
			func(n *TblAuthToken, e *TblUser) { n.Edges.TokenUser = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tatq *TblAuthTokenQuery) loadTokenClient(ctx context.Context, query *TblAuthClientQuery, nodes []*TblAuthToken, init func(*TblAuthToken), assign func(*TblAuthToken, *TblAuthClient)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TblAuthToken)
	for i := range nodes {
		fk := nodes[i].Clientid
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tblauthclient.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "clientid" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tatq *TblAuthTokenQuery) loadTokenUser(ctx context.Context, query *TblUserQuery, nodes []*TblAuthToken, init func(*TblAuthToken), assign func(*TblAuthToken, *TblUser)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TblAuthToken)
	for i := range nodes {
		fk := nodes[i].UserUlid
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(tbluser.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_ulid" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tatq *TblAuthTokenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tatq.querySpec()
	if len(tatq.modifiers) > 0 {
		_spec.Modifiers = tatq.modifiers
	}
	_spec.Node.Columns = tatq.ctx.Fields
	if len(tatq.ctx.Fields) > 0 {
		_spec.Unique = tatq.ctx.Unique != nil && *tatq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tatq.driver, _spec)
}

func (tatq *TblAuthTokenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tblauthtoken.Table, tblauthtoken.Columns, sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString))
	_spec.From = tatq.sql
	if unique := tatq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tatq.path != nil {
		_spec.Unique = true
	}
	if fields := tatq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblauthtoken.FieldID)
		for i := range fields {
			if fields[i] != tblauthtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tatq.withTokenClient != nil {
			_spec.Node.AddColumnOnce(tblauthtoken.FieldClientid)
		}
		if tatq.withTokenUser != nil {
			_spec.Node.AddColumnOnce(tblauthtoken.FieldUserUlid)
		}
	}
	if ps := tatq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tatq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tatq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tatq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tatq *TblAuthTokenQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tatq.driver.Dialect())
	t1 := builder.Table(tblauthtoken.Table)
	columns := tatq.ctx.Fields
	if len(columns) == 0 {
		columns = tblauthtoken.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tatq.sql != nil {
		selector = tatq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tatq.ctx.Unique != nil && *tatq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tatq.modifiers {
		m(selector)
	}
	for _, p := range tatq.predicates {
		p(selector)
	}
	for _, p := range tatq.order {
		p(selector)
	}
	if offset := tatq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tatq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (tatq *TblAuthTokenQuery) ForUpdate(opts ...sql.LockOption) *TblAuthTokenQuery {
	if tatq.driver.Dialect() == dialect.Postgres {
		tatq.Unique(false)
	}
	tatq.modifiers = append(tatq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return tatq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (tatq *TblAuthTokenQuery) ForShare(opts ...sql.LockOption) *TblAuthTokenQuery {
	if tatq.driver.Dialect() == dialect.Postgres {
		tatq.Unique(false)
	}
	tatq.modifiers = append(tatq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return tatq
}

// TblAuthTokenGroupBy is the group-by builder for TblAuthToken entities.
type TblAuthTokenGroupBy struct {
	selector
	build *TblAuthTokenQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tatgb *TblAuthTokenGroupBy) Aggregate(fns ...AggregateFunc) *TblAuthTokenGroupBy {
	tatgb.fns = append(tatgb.fns, fns...)
	return tatgb
}

// Scan applies the selector query and scans the result into the given value.
func (tatgb *TblAuthTokenGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tatgb.build.ctx, ent.OpQueryGroupBy)
	if err := tatgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblAuthTokenQuery, *TblAuthTokenGroupBy](ctx, tatgb.build, tatgb, tatgb.build.inters, v)
}

func (tatgb *TblAuthTokenGroupBy) sqlScan(ctx context.Context, root *TblAuthTokenQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tatgb.fns))
	for _, fn := range tatgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tatgb.flds)+len(tatgb.fns))
		for _, f := range *tatgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tatgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tatgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TblAuthTokenSelect is the builder for selecting fields of TblAuthToken entities.
type TblAuthTokenSelect struct {
	*TblAuthTokenQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tats *TblAuthTokenSelect) Aggregate(fns ...AggregateFunc) *TblAuthTokenSelect {
	tats.fns = append(tats.fns, fns...)
	return tats
}

// Scan applies the selector query and scans the result into the given value.
func (tats *TblAuthTokenSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tats.ctx, ent.OpQuerySelect)
	if err := tats.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblAuthTokenQuery, *TblAuthTokenSelect](ctx, tats.TblAuthTokenQuery, tats, tats.inters, v)
}

func (tats *TblAuthTokenSelect) sqlScan(ctx context.Context, root *TblAuthTokenQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tats.fns))
	for _, fn := range tats.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tats.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tats.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
