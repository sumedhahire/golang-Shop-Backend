// Code generated by ent, DO NOT EDIT.

package tblauthtoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tblauthtoken type in the database.
	Label = "tbl_auth_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id_uuid"
	// FieldAuthUUID holds the string denoting the auth_uuid field in the database.
	FieldAuthUUID = "auth_uuid"
	// FieldAuthXref holds the string denoting the auth_xref field in the database.
	FieldAuthXref = "auth_xref"
	// FieldAccesstoken holds the string denoting the accesstoken field in the database.
	FieldAccesstoken = "accesstoken"
	// FieldAccesstokencreatedat holds the string denoting the accesstokencreatedat field in the database.
	FieldAccesstokencreatedat = "accesstokencreatedat"
	// FieldAccesstokenexpiresin holds the string denoting the accesstokenexpiresin field in the database.
	FieldAccesstokenexpiresin = "accesstokenexpiresin"
	// FieldClientid holds the string denoting the clientid field in the database.
	FieldClientid = "clientid"
	// FieldUserUlid holds the string denoting the user_ulid field in the database.
	FieldUserUlid = "user_ulid"
	// FieldRefreshtoken holds the string denoting the refreshtoken field in the database.
	FieldRefreshtoken = "refreshtoken"
	// FieldRefreshtokencreatedat holds the string denoting the refreshtokencreatedat field in the database.
	FieldRefreshtokencreatedat = "refreshtokencreatedat"
	// FieldRefreshtokenexpiresin holds the string denoting the refreshtokenexpiresin field in the database.
	FieldRefreshtokenexpiresin = "refreshtokenexpiresin"
	// FieldCreatedat holds the string denoting the createdat field in the database.
	FieldCreatedat = "createdat"
	// FieldUpdatedat holds the string denoting the updatedat field in the database.
	FieldUpdatedat = "updatedat"
	// FieldDeletedat holds the string denoting the deletedat field in the database.
	FieldDeletedat = "deletedat"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldUseragent holds the string denoting the useragent field in the database.
	FieldUseragent = "useragent"
	// FieldCreatedby holds the string denoting the createdby field in the database.
	FieldCreatedby = "createdby"
	// FieldUpdatedby holds the string denoting the updatedby field in the database.
	FieldUpdatedby = "updatedby"
	// FieldDeletedby holds the string denoting the deletedby field in the database.
	FieldDeletedby = "deletedby"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldCodecreatedat holds the string denoting the codecreatedat field in the database.
	FieldCodecreatedat = "codecreatedat"
	// FieldCodeexpiresin holds the string denoting the codeexpiresin field in the database.
	FieldCodeexpiresin = "codeexpiresin"
	// FieldCodechallenge holds the string denoting the codechallenge field in the database.
	FieldCodechallenge = "codechallenge"
	// FieldRedirectURI holds the string denoting the redirect_uri field in the database.
	FieldRedirectURI = "redirect_uri"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"
	// EdgeTokenClient holds the string denoting the tokenclient edge name in mutations.
	EdgeTokenClient = "TokenClient"
	// EdgeTokenUser holds the string denoting the tokenuser edge name in mutations.
	EdgeTokenUser = "TokenUser"
	// TblAuthClientFieldID holds the string denoting the ID field of the TblAuthClient.
	TblAuthClientFieldID = "client_uuid"
	// Table holds the table name of the tblauthtoken in the database.
	Table = "authtoken"
	// TokenClientTable is the table that holds the TokenClient relation/edge.
	TokenClientTable = "authtoken"
	// TokenClientInverseTable is the table name for the TblAuthClient entity.
	// It exists in this package in order to avoid circular dependency with the "tblauthclient" package.
	TokenClientInverseTable = "authclient"
	// TokenClientColumn is the table column denoting the TokenClient relation/edge.
	TokenClientColumn = "clientid"
	// TokenUserTable is the table that holds the TokenUser relation/edge.
	TokenUserTable = "authtoken"
	// TokenUserInverseTable is the table name for the TblUser entity.
	// It exists in this package in order to avoid circular dependency with the "tbluser" package.
	TokenUserInverseTable = "tbl_users"
	// TokenUserColumn is the table column denoting the TokenUser relation/edge.
	TokenUserColumn = "user_ulid"
)

// Columns holds all SQL columns for tblauthtoken fields.
var Columns = []string{
	FieldID,
	FieldAuthUUID,
	FieldAuthXref,
	FieldAccesstoken,
	FieldAccesstokencreatedat,
	FieldAccesstokenexpiresin,
	FieldClientid,
	FieldUserUlid,
	FieldRefreshtoken,
	FieldRefreshtokencreatedat,
	FieldRefreshtokenexpiresin,
	FieldCreatedat,
	FieldUpdatedat,
	FieldDeletedat,
	FieldIPAddress,
	FieldUseragent,
	FieldCreatedby,
	FieldUpdatedby,
	FieldDeletedby,
	FieldCode,
	FieldCodecreatedat,
	FieldCodeexpiresin,
	FieldCodechallenge,
	FieldRedirectURI,
	FieldScope,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAccesstokencreatedat holds the default value on creation for the "accesstokencreatedat" field.
	DefaultAccesstokencreatedat time.Time
	// DefaultRefreshtokencreatedat holds the default value on creation for the "refreshtokencreatedat" field.
	DefaultRefreshtokencreatedat time.Time
	// DefaultCreatedat holds the default value on creation for the "createdat" field.
	DefaultCreatedat time.Time
	// DefaultUpdatedat holds the default value on creation for the "updatedat" field.
	DefaultUpdatedat time.Time
	// DefaultIPAddress holds the default value on creation for the "ip_address" field.
	DefaultIPAddress string
	// DefaultUseragent holds the default value on creation for the "useragent" field.
	DefaultUseragent string
	// DefaultCreatedby holds the default value on creation for the "createdby" field.
	DefaultCreatedby string
	// DefaultUpdatedby holds the default value on creation for the "updatedby" field.
	DefaultUpdatedby string
	// DefaultCodecreatedat holds the default value on creation for the "codecreatedat" field.
	DefaultCodecreatedat time.Time
	// DefaultScope holds the default value on creation for the "scope" field.
	DefaultScope string
)

// OrderOption defines the ordering options for the TblAuthToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthUUID orders the results by the auth_uuid field.
func ByAuthUUID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthUUID, opts...).ToFunc()
}

// ByAuthXref orders the results by the auth_xref field.
func ByAuthXref(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthXref, opts...).ToFunc()
}

// ByAccesstoken orders the results by the accesstoken field.
func ByAccesstoken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccesstoken, opts...).ToFunc()
}

// ByAccesstokencreatedat orders the results by the accesstokencreatedat field.
func ByAccesstokencreatedat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccesstokencreatedat, opts...).ToFunc()
}

// ByAccesstokenexpiresin orders the results by the accesstokenexpiresin field.
func ByAccesstokenexpiresin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccesstokenexpiresin, opts...).ToFunc()
}

// ByClientid orders the results by the clientid field.
func ByClientid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientid, opts...).ToFunc()
}

// ByUserUlid orders the results by the user_ulid field.
func ByUserUlid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserUlid, opts...).ToFunc()
}

// ByRefreshtoken orders the results by the refreshtoken field.
func ByRefreshtoken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshtoken, opts...).ToFunc()
}

// ByRefreshtokencreatedat orders the results by the refreshtokencreatedat field.
func ByRefreshtokencreatedat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshtokencreatedat, opts...).ToFunc()
}

// ByRefreshtokenexpiresin orders the results by the refreshtokenexpiresin field.
func ByRefreshtokenexpiresin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefreshtokenexpiresin, opts...).ToFunc()
}

// ByCreatedat orders the results by the createdat field.
func ByCreatedat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedat, opts...).ToFunc()
}

// ByUpdatedat orders the results by the updatedat field.
func ByUpdatedat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedat, opts...).ToFunc()
}

// ByDeletedat orders the results by the deletedat field.
func ByDeletedat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedat, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByUseragent orders the results by the useragent field.
func ByUseragent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseragent, opts...).ToFunc()
}

// ByCreatedby orders the results by the createdby field.
func ByCreatedby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedby, opts...).ToFunc()
}

// ByUpdatedby orders the results by the updatedby field.
func ByUpdatedby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedby, opts...).ToFunc()
}

// ByDeletedby orders the results by the deletedby field.
func ByDeletedby(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedby, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByCodecreatedat orders the results by the codecreatedat field.
func ByCodecreatedat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodecreatedat, opts...).ToFunc()
}

// ByCodeexpiresin orders the results by the codeexpiresin field.
func ByCodeexpiresin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodeexpiresin, opts...).ToFunc()
}

// ByCodechallenge orders the results by the codechallenge field.
func ByCodechallenge(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCodechallenge, opts...).ToFunc()
}

// ByRedirectURI orders the results by the redirect_uri field.
func ByRedirectURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRedirectURI, opts...).ToFunc()
}

// ByScope orders the results by the scope field.
func ByScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScope, opts...).ToFunc()
}

// ByTokenClientField orders the results by TokenClient field.
func ByTokenClientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokenClientStep(), sql.OrderByField(field, opts...))
	}
}

// ByTokenUserField orders the results by TokenUser field.
func ByTokenUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTokenUserStep(), sql.OrderByField(field, opts...))
	}
}
func newTokenClientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokenClientInverseTable, TblAuthClientFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TokenClientTable, TokenClientColumn),
	)
}
func newTokenUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TokenUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TokenUserTable, TokenUserColumn),
	)
}
