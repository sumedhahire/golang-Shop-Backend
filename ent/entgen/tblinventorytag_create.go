// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblinventorytag"
	"inventory/ent/entgen/tbltag"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblInventoryTagCreate is the builder for creating a TblInventoryTag entity.
type TblInventoryTagCreate struct {
	config
	mutation *TblInventoryTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetInventoryId sets the "InventoryId" field.
func (titc *TblInventoryTagCreate) SetInventoryId(s string) *TblInventoryTagCreate {
	titc.mutation.SetInventoryId(s)
	return titc
}

// SetNillableInventoryId sets the "InventoryId" field if the given value is not nil.
func (titc *TblInventoryTagCreate) SetNillableInventoryId(s *string) *TblInventoryTagCreate {
	if s != nil {
		titc.SetInventoryId(*s)
	}
	return titc
}

// SetTagId sets the "TagId" field.
func (titc *TblInventoryTagCreate) SetTagId(s string) *TblInventoryTagCreate {
	titc.mutation.SetTagId(s)
	return titc
}

// SetNillableTagId sets the "TagId" field if the given value is not nil.
func (titc *TblInventoryTagCreate) SetNillableTagId(s *string) *TblInventoryTagCreate {
	if s != nil {
		titc.SetTagId(*s)
	}
	return titc
}

// SetCreatedAt sets the "Created_at" field.
func (titc *TblInventoryTagCreate) SetCreatedAt(t time.Time) *TblInventoryTagCreate {
	titc.mutation.SetCreatedAt(t)
	return titc
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (titc *TblInventoryTagCreate) SetNillableCreatedAt(t *time.Time) *TblInventoryTagCreate {
	if t != nil {
		titc.SetCreatedAt(*t)
	}
	return titc
}

// SetUpdatedAt sets the "Updated_at" field.
func (titc *TblInventoryTagCreate) SetUpdatedAt(t time.Time) *TblInventoryTagCreate {
	titc.mutation.SetUpdatedAt(t)
	return titc
}

// SetDeletedAt sets the "Deleted_at" field.
func (titc *TblInventoryTagCreate) SetDeletedAt(t time.Time) *TblInventoryTagCreate {
	titc.mutation.SetDeletedAt(t)
	return titc
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (titc *TblInventoryTagCreate) SetNillableDeletedAt(t *time.Time) *TblInventoryTagCreate {
	if t != nil {
		titc.SetDeletedAt(*t)
	}
	return titc
}

// SetID sets the "id" field.
func (titc *TblInventoryTagCreate) SetID(s string) *TblInventoryTagCreate {
	titc.mutation.SetID(s)
	return titc
}

// SetInventoryID sets the "inventory" edge to the TblInventory entity by ID.
func (titc *TblInventoryTagCreate) SetInventoryID(id string) *TblInventoryTagCreate {
	titc.mutation.SetInventoryID(id)
	return titc
}

// SetNillableInventoryID sets the "inventory" edge to the TblInventory entity by ID if the given value is not nil.
func (titc *TblInventoryTagCreate) SetNillableInventoryID(id *string) *TblInventoryTagCreate {
	if id != nil {
		titc = titc.SetInventoryID(*id)
	}
	return titc
}

// SetInventory sets the "inventory" edge to the TblInventory entity.
func (titc *TblInventoryTagCreate) SetInventory(t *TblInventory) *TblInventoryTagCreate {
	return titc.SetInventoryID(t.ID)
}

// SetTagID sets the "tag" edge to the TblTag entity by ID.
func (titc *TblInventoryTagCreate) SetTagID(id string) *TblInventoryTagCreate {
	titc.mutation.SetTagID(id)
	return titc
}

// SetNillableTagID sets the "tag" edge to the TblTag entity by ID if the given value is not nil.
func (titc *TblInventoryTagCreate) SetNillableTagID(id *string) *TblInventoryTagCreate {
	if id != nil {
		titc = titc.SetTagID(*id)
	}
	return titc
}

// SetTag sets the "tag" edge to the TblTag entity.
func (titc *TblInventoryTagCreate) SetTag(t *TblTag) *TblInventoryTagCreate {
	return titc.SetTagID(t.ID)
}

// Mutation returns the TblInventoryTagMutation object of the builder.
func (titc *TblInventoryTagCreate) Mutation() *TblInventoryTagMutation {
	return titc.mutation
}

// Save creates the TblInventoryTag in the database.
func (titc *TblInventoryTagCreate) Save(ctx context.Context) (*TblInventoryTag, error) {
	titc.defaults()
	return withHooks(ctx, titc.sqlSave, titc.mutation, titc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (titc *TblInventoryTagCreate) SaveX(ctx context.Context) *TblInventoryTag {
	v, err := titc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (titc *TblInventoryTagCreate) Exec(ctx context.Context) error {
	_, err := titc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (titc *TblInventoryTagCreate) ExecX(ctx context.Context) {
	if err := titc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (titc *TblInventoryTagCreate) defaults() {
	if _, ok := titc.mutation.CreatedAt(); !ok {
		v := tblinventorytag.DefaultCreatedAt()
		titc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (titc *TblInventoryTagCreate) check() error {
	if _, ok := titc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "Created_at", err: errors.New(`entgen: missing required field "TblInventoryTag.Created_at"`)}
	}
	if _, ok := titc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "Updated_at", err: errors.New(`entgen: missing required field "TblInventoryTag.Updated_at"`)}
	}
	return nil
}

func (titc *TblInventoryTagCreate) sqlSave(ctx context.Context) (*TblInventoryTag, error) {
	if err := titc.check(); err != nil {
		return nil, err
	}
	_node, _spec := titc.createSpec()
	if err := sqlgraph.CreateNode(ctx, titc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblInventoryTag.ID type: %T", _spec.ID.Value)
		}
	}
	titc.mutation.id = &_node.ID
	titc.mutation.done = true
	return _node, nil
}

func (titc *TblInventoryTagCreate) createSpec() (*TblInventoryTag, *sqlgraph.CreateSpec) {
	var (
		_node = &TblInventoryTag{config: titc.config}
		_spec = sqlgraph.NewCreateSpec(tblinventorytag.Table, sqlgraph.NewFieldSpec(tblinventorytag.FieldID, field.TypeString))
	)
	_spec.OnConflict = titc.conflict
	if id, ok := titc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := titc.mutation.CreatedAt(); ok {
		_spec.SetField(tblinventorytag.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := titc.mutation.UpdatedAt(); ok {
		_spec.SetField(tblinventorytag.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := titc.mutation.DeletedAt(); ok {
		_spec.SetField(tblinventorytag.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := titc.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblinventorytag.InventoryTable,
			Columns: []string{tblinventorytag.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InventoryId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := titc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblinventorytag.TagTable,
			Columns: []string{tblinventorytag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbltag.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblInventoryTag.Create().
//		SetInventoryId(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblInventoryTagUpsert) {
//			SetInventoryId(v+v).
//		}).
//		Exec(ctx)
func (titc *TblInventoryTagCreate) OnConflict(opts ...sql.ConflictOption) *TblInventoryTagUpsertOne {
	titc.conflict = opts
	return &TblInventoryTagUpsertOne{
		create: titc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblInventoryTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (titc *TblInventoryTagCreate) OnConflictColumns(columns ...string) *TblInventoryTagUpsertOne {
	titc.conflict = append(titc.conflict, sql.ConflictColumns(columns...))
	return &TblInventoryTagUpsertOne{
		create: titc,
	}
}

type (
	// TblInventoryTagUpsertOne is the builder for "upsert"-ing
	//  one TblInventoryTag node.
	TblInventoryTagUpsertOne struct {
		create *TblInventoryTagCreate
	}

	// TblInventoryTagUpsert is the "OnConflict" setter.
	TblInventoryTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetInventoryId sets the "InventoryId" field.
func (u *TblInventoryTagUpsert) SetInventoryId(v string) *TblInventoryTagUpsert {
	u.Set(tblinventorytag.FieldInventoryId, v)
	return u
}

// UpdateInventoryId sets the "InventoryId" field to the value that was provided on create.
func (u *TblInventoryTagUpsert) UpdateInventoryId() *TblInventoryTagUpsert {
	u.SetExcluded(tblinventorytag.FieldInventoryId)
	return u
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (u *TblInventoryTagUpsert) ClearInventoryId() *TblInventoryTagUpsert {
	u.SetNull(tblinventorytag.FieldInventoryId)
	return u
}

// SetTagId sets the "TagId" field.
func (u *TblInventoryTagUpsert) SetTagId(v string) *TblInventoryTagUpsert {
	u.Set(tblinventorytag.FieldTagId, v)
	return u
}

// UpdateTagId sets the "TagId" field to the value that was provided on create.
func (u *TblInventoryTagUpsert) UpdateTagId() *TblInventoryTagUpsert {
	u.SetExcluded(tblinventorytag.FieldTagId)
	return u
}

// ClearTagId clears the value of the "TagId" field.
func (u *TblInventoryTagUpsert) ClearTagId() *TblInventoryTagUpsert {
	u.SetNull(tblinventorytag.FieldTagId)
	return u
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblInventoryTagUpsert) SetCreatedAt(v time.Time) *TblInventoryTagUpsert {
	u.Set(tblinventorytag.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsert) UpdateCreatedAt() *TblInventoryTagUpsert {
	u.SetExcluded(tblinventorytag.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblInventoryTagUpsert) SetUpdatedAt(v time.Time) *TblInventoryTagUpsert {
	u.Set(tblinventorytag.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsert) UpdateUpdatedAt() *TblInventoryTagUpsert {
	u.SetExcluded(tblinventorytag.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblInventoryTagUpsert) SetDeletedAt(v time.Time) *TblInventoryTagUpsert {
	u.Set(tblinventorytag.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsert) UpdateDeletedAt() *TblInventoryTagUpsert {
	u.SetExcluded(tblinventorytag.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblInventoryTagUpsert) ClearDeletedAt() *TblInventoryTagUpsert {
	u.SetNull(tblinventorytag.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblInventoryTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblinventorytag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblInventoryTagUpsertOne) UpdateNewValues() *TblInventoryTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tblinventorytag.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblInventoryTag.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblInventoryTagUpsertOne) Ignore() *TblInventoryTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblInventoryTagUpsertOne) DoNothing() *TblInventoryTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblInventoryTagCreate.OnConflict
// documentation for more info.
func (u *TblInventoryTagUpsertOne) Update(set func(*TblInventoryTagUpsert)) *TblInventoryTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblInventoryTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetInventoryId sets the "InventoryId" field.
func (u *TblInventoryTagUpsertOne) SetInventoryId(v string) *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetInventoryId(v)
	})
}

// UpdateInventoryId sets the "InventoryId" field to the value that was provided on create.
func (u *TblInventoryTagUpsertOne) UpdateInventoryId() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateInventoryId()
	})
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (u *TblInventoryTagUpsertOne) ClearInventoryId() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.ClearInventoryId()
	})
}

// SetTagId sets the "TagId" field.
func (u *TblInventoryTagUpsertOne) SetTagId(v string) *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetTagId(v)
	})
}

// UpdateTagId sets the "TagId" field to the value that was provided on create.
func (u *TblInventoryTagUpsertOne) UpdateTagId() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateTagId()
	})
}

// ClearTagId clears the value of the "TagId" field.
func (u *TblInventoryTagUpsertOne) ClearTagId() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.ClearTagId()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblInventoryTagUpsertOne) SetCreatedAt(v time.Time) *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsertOne) UpdateCreatedAt() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblInventoryTagUpsertOne) SetUpdatedAt(v time.Time) *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsertOne) UpdateUpdatedAt() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblInventoryTagUpsertOne) SetDeletedAt(v time.Time) *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsertOne) UpdateDeletedAt() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblInventoryTagUpsertOne) ClearDeletedAt() *TblInventoryTagUpsertOne {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblInventoryTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblInventoryTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblInventoryTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblInventoryTagUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblInventoryTagUpsertOne.ID is not supported by MySQL driver. Use TblInventoryTagUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblInventoryTagUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblInventoryTagCreateBulk is the builder for creating many TblInventoryTag entities in bulk.
type TblInventoryTagCreateBulk struct {
	config
	err      error
	builders []*TblInventoryTagCreate
	conflict []sql.ConflictOption
}

// Save creates the TblInventoryTag entities in the database.
func (titcb *TblInventoryTagCreateBulk) Save(ctx context.Context) ([]*TblInventoryTag, error) {
	if titcb.err != nil {
		return nil, titcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(titcb.builders))
	nodes := make([]*TblInventoryTag, len(titcb.builders))
	mutators := make([]Mutator, len(titcb.builders))
	for i := range titcb.builders {
		func(i int, root context.Context) {
			builder := titcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblInventoryTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, titcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = titcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, titcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, titcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (titcb *TblInventoryTagCreateBulk) SaveX(ctx context.Context) []*TblInventoryTag {
	v, err := titcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (titcb *TblInventoryTagCreateBulk) Exec(ctx context.Context) error {
	_, err := titcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (titcb *TblInventoryTagCreateBulk) ExecX(ctx context.Context) {
	if err := titcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblInventoryTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblInventoryTagUpsert) {
//			SetInventoryId(v+v).
//		}).
//		Exec(ctx)
func (titcb *TblInventoryTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblInventoryTagUpsertBulk {
	titcb.conflict = opts
	return &TblInventoryTagUpsertBulk{
		create: titcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblInventoryTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (titcb *TblInventoryTagCreateBulk) OnConflictColumns(columns ...string) *TblInventoryTagUpsertBulk {
	titcb.conflict = append(titcb.conflict, sql.ConflictColumns(columns...))
	return &TblInventoryTagUpsertBulk{
		create: titcb,
	}
}

// TblInventoryTagUpsertBulk is the builder for "upsert"-ing
// a bulk of TblInventoryTag nodes.
type TblInventoryTagUpsertBulk struct {
	create *TblInventoryTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblInventoryTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblinventorytag.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblInventoryTagUpsertBulk) UpdateNewValues() *TblInventoryTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tblinventorytag.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblInventoryTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblInventoryTagUpsertBulk) Ignore() *TblInventoryTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblInventoryTagUpsertBulk) DoNothing() *TblInventoryTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblInventoryTagCreateBulk.OnConflict
// documentation for more info.
func (u *TblInventoryTagUpsertBulk) Update(set func(*TblInventoryTagUpsert)) *TblInventoryTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblInventoryTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetInventoryId sets the "InventoryId" field.
func (u *TblInventoryTagUpsertBulk) SetInventoryId(v string) *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetInventoryId(v)
	})
}

// UpdateInventoryId sets the "InventoryId" field to the value that was provided on create.
func (u *TblInventoryTagUpsertBulk) UpdateInventoryId() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateInventoryId()
	})
}

// ClearInventoryId clears the value of the "InventoryId" field.
func (u *TblInventoryTagUpsertBulk) ClearInventoryId() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.ClearInventoryId()
	})
}

// SetTagId sets the "TagId" field.
func (u *TblInventoryTagUpsertBulk) SetTagId(v string) *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetTagId(v)
	})
}

// UpdateTagId sets the "TagId" field to the value that was provided on create.
func (u *TblInventoryTagUpsertBulk) UpdateTagId() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateTagId()
	})
}

// ClearTagId clears the value of the "TagId" field.
func (u *TblInventoryTagUpsertBulk) ClearTagId() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.ClearTagId()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblInventoryTagUpsertBulk) SetCreatedAt(v time.Time) *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsertBulk) UpdateCreatedAt() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblInventoryTagUpsertBulk) SetUpdatedAt(v time.Time) *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsertBulk) UpdateUpdatedAt() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblInventoryTagUpsertBulk) SetDeletedAt(v time.Time) *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblInventoryTagUpsertBulk) UpdateDeletedAt() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblInventoryTagUpsertBulk) ClearDeletedAt() *TblInventoryTagUpsertBulk {
	return u.Update(func(s *TblInventoryTagUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblInventoryTagUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblInventoryTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblInventoryTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblInventoryTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
