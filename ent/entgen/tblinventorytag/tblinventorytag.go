// Code generated by ent, DO NOT EDIT.

package tblinventorytag

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tblinventorytag type in the database.
	Label = "tbl_inventory_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "Id_uuid"
	// FieldInventoryId holds the string denoting the inventoryid field in the database.
	FieldInventoryId = "InventoryId"
	// FieldTagId holds the string denoting the tagid field in the database.
	FieldTagId = "TagId"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "Created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "Updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "Deleted_at"
	// EdgeTagID holds the string denoting the tag_id edge name in mutations.
	EdgeTagID = "tag_Id"
	// EdgeInventoryID holds the string denoting the inventory_id edge name in mutations.
	EdgeInventoryID = "inventory_Id"
	// Table holds the table name of the tblinventorytag in the database.
	Table = "Tbl_Inventory_Tag"
	// TagIDTable is the table that holds the tag_Id relation/edge.
	TagIDTable = "Tbl_Inventory_Tag"
	// TagIDInverseTable is the table name for the TblTag entity.
	// It exists in this package in order to avoid circular dependency with the "tbltag" package.
	TagIDInverseTable = "Tbl_Tag"
	// TagIDColumn is the table column denoting the tag_Id relation/edge.
	TagIDColumn = "tbl_tag_tag"
	// InventoryIDTable is the table that holds the inventory_Id relation/edge.
	InventoryIDTable = "Tbl_Inventory_Tag"
	// InventoryIDInverseTable is the table name for the TblInventory entity.
	// It exists in this package in order to avoid circular dependency with the "tblinventory" package.
	InventoryIDInverseTable = "Tbl_Inventory"
	// InventoryIDColumn is the table column denoting the inventory_Id relation/edge.
	InventoryIDColumn = "tbl_inventory_inventory"
)

// Columns holds all SQL columns for tblinventorytag fields.
var Columns = []string{
	FieldID,
	FieldInventoryId,
	FieldTagId,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "Tbl_Inventory_Tag"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"tbl_inventory_inventory",
	"tbl_tag_tag",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "Created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the TblInventoryTag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInventoryId orders the results by the InventoryId field.
func ByInventoryId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInventoryId, opts...).ToFunc()
}

// ByTagId orders the results by the TagId field.
func ByTagId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagId, opts...).ToFunc()
}

// ByCreatedAt orders the results by the Created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the Updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the Deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTagIDField orders the results by tag_Id field.
func ByTagIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByInventoryIDField orders the results by inventory_Id field.
func ByInventoryIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInventoryIDStep(), sql.OrderByField(field, opts...))
	}
}
func newTagIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TagIDTable, TagIDColumn),
	)
}
func newInventoryIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InventoryIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, InventoryIDTable, InventoryIDColumn),
	)
}
