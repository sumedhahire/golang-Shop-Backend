// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblCartUpdate is the builder for updating TblCart entities.
type TblCartUpdate struct {
	config
	hooks    []Hook
	mutation *TblCartMutation
}

// Where appends a list predicates to the TblCartUpdate builder.
func (tcu *TblCartUpdate) Where(ps ...predicate.TblCart) *TblCartUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetProductId sets the "ProductId" field.
func (tcu *TblCartUpdate) SetProductId(s string) *TblCartUpdate {
	tcu.mutation.SetProductId(s)
	return tcu
}

// SetNillableProductId sets the "ProductId" field if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableProductId(s *string) *TblCartUpdate {
	if s != nil {
		tcu.SetProductId(*s)
	}
	return tcu
}

// ClearProductId clears the value of the "ProductId" field.
func (tcu *TblCartUpdate) ClearProductId() *TblCartUpdate {
	tcu.mutation.ClearProductId()
	return tcu
}

// SetUserId sets the "UserId" field.
func (tcu *TblCartUpdate) SetUserId(s string) *TblCartUpdate {
	tcu.mutation.SetUserId(s)
	return tcu
}

// SetNillableUserId sets the "UserId" field if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableUserId(s *string) *TblCartUpdate {
	if s != nil {
		tcu.SetUserId(*s)
	}
	return tcu
}

// ClearUserId clears the value of the "UserId" field.
func (tcu *TblCartUpdate) ClearUserId() *TblCartUpdate {
	tcu.mutation.ClearUserId()
	return tcu
}

// SetStatus sets the "Status" field.
func (tcu *TblCartUpdate) SetStatus(t tblcart.Status) *TblCartUpdate {
	tcu.mutation.SetStatus(t)
	return tcu
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableStatus(t *tblcart.Status) *TblCartUpdate {
	if t != nil {
		tcu.SetStatus(*t)
	}
	return tcu
}

// SetCreatedAt sets the "Created_at" field.
func (tcu *TblCartUpdate) SetCreatedAt(t time.Time) *TblCartUpdate {
	tcu.mutation.SetCreatedAt(t)
	return tcu
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableCreatedAt(t *time.Time) *TblCartUpdate {
	if t != nil {
		tcu.SetCreatedAt(*t)
	}
	return tcu
}

// SetUpdatedAt sets the "Updated_at" field.
func (tcu *TblCartUpdate) SetUpdatedAt(t time.Time) *TblCartUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableUpdatedAt(t *time.Time) *TblCartUpdate {
	if t != nil {
		tcu.SetUpdatedAt(*t)
	}
	return tcu
}

// SetDeletedAt sets the "Deleted_at" field.
func (tcu *TblCartUpdate) SetDeletedAt(t time.Time) *TblCartUpdate {
	tcu.mutation.SetDeletedAt(t)
	return tcu
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableDeletedAt(t *time.Time) *TblCartUpdate {
	if t != nil {
		tcu.SetDeletedAt(*t)
	}
	return tcu
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (tcu *TblCartUpdate) ClearDeletedAt() *TblCartUpdate {
	tcu.mutation.ClearDeletedAt()
	return tcu
}

// SetInventoryID sets the "Inventory" edge to the TblInventory entity by ID.
func (tcu *TblCartUpdate) SetInventoryID(id string) *TblCartUpdate {
	tcu.mutation.SetInventoryID(id)
	return tcu
}

// SetNillableInventoryID sets the "Inventory" edge to the TblInventory entity by ID if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableInventoryID(id *string) *TblCartUpdate {
	if id != nil {
		tcu = tcu.SetInventoryID(*id)
	}
	return tcu
}

// SetInventory sets the "Inventory" edge to the TblInventory entity.
func (tcu *TblCartUpdate) SetInventory(t *TblInventory) *TblCartUpdate {
	return tcu.SetInventoryID(t.ID)
}

// SetUserID sets the "User" edge to the TblUser entity by ID.
func (tcu *TblCartUpdate) SetUserID(id string) *TblCartUpdate {
	tcu.mutation.SetUserID(id)
	return tcu
}

// SetNillableUserID sets the "User" edge to the TblUser entity by ID if the given value is not nil.
func (tcu *TblCartUpdate) SetNillableUserID(id *string) *TblCartUpdate {
	if id != nil {
		tcu = tcu.SetUserID(*id)
	}
	return tcu
}

// SetUser sets the "User" edge to the TblUser entity.
func (tcu *TblCartUpdate) SetUser(t *TblUser) *TblCartUpdate {
	return tcu.SetUserID(t.ID)
}

// Mutation returns the TblCartMutation object of the builder.
func (tcu *TblCartUpdate) Mutation() *TblCartMutation {
	return tcu.mutation
}

// ClearInventory clears the "Inventory" edge to the TblInventory entity.
func (tcu *TblCartUpdate) ClearInventory() *TblCartUpdate {
	tcu.mutation.ClearInventory()
	return tcu
}

// ClearUser clears the "User" edge to the TblUser entity.
func (tcu *TblCartUpdate) ClearUser() *TblCartUpdate {
	tcu.mutation.ClearUser()
	return tcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *TblCartUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *TblCartUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *TblCartUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *TblCartUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *TblCartUpdate) check() error {
	if v, ok := tcu.mutation.Status(); ok {
		if err := tblcart.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`entgen: validator failed for field "TblCart.Status": %w`, err)}
		}
	}
	return nil
}

func (tcu *TblCartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblcart.Table, tblcart.Columns, sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.Status(); ok {
		_spec.SetField(tblcart.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tcu.mutation.CreatedAt(); ok {
		_spec.SetField(tblcart.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.SetField(tblcart.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcu.mutation.DeletedAt(); ok {
		_spec.SetField(tblcart.FieldDeletedAt, field.TypeTime, value)
	}
	if tcu.mutation.DeletedAtCleared() {
		_spec.ClearField(tblcart.FieldDeletedAt, field.TypeTime)
	}
	if tcu.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.InventoryTable,
			Columns: []string{tblcart.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.InventoryTable,
			Columns: []string{tblcart.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.UserTable,
			Columns: []string{tblcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.UserTable,
			Columns: []string{tblcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// TblCartUpdateOne is the builder for updating a single TblCart entity.
type TblCartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TblCartMutation
}

// SetProductId sets the "ProductId" field.
func (tcuo *TblCartUpdateOne) SetProductId(s string) *TblCartUpdateOne {
	tcuo.mutation.SetProductId(s)
	return tcuo
}

// SetNillableProductId sets the "ProductId" field if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableProductId(s *string) *TblCartUpdateOne {
	if s != nil {
		tcuo.SetProductId(*s)
	}
	return tcuo
}

// ClearProductId clears the value of the "ProductId" field.
func (tcuo *TblCartUpdateOne) ClearProductId() *TblCartUpdateOne {
	tcuo.mutation.ClearProductId()
	return tcuo
}

// SetUserId sets the "UserId" field.
func (tcuo *TblCartUpdateOne) SetUserId(s string) *TblCartUpdateOne {
	tcuo.mutation.SetUserId(s)
	return tcuo
}

// SetNillableUserId sets the "UserId" field if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableUserId(s *string) *TblCartUpdateOne {
	if s != nil {
		tcuo.SetUserId(*s)
	}
	return tcuo
}

// ClearUserId clears the value of the "UserId" field.
func (tcuo *TblCartUpdateOne) ClearUserId() *TblCartUpdateOne {
	tcuo.mutation.ClearUserId()
	return tcuo
}

// SetStatus sets the "Status" field.
func (tcuo *TblCartUpdateOne) SetStatus(t tblcart.Status) *TblCartUpdateOne {
	tcuo.mutation.SetStatus(t)
	return tcuo
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableStatus(t *tblcart.Status) *TblCartUpdateOne {
	if t != nil {
		tcuo.SetStatus(*t)
	}
	return tcuo
}

// SetCreatedAt sets the "Created_at" field.
func (tcuo *TblCartUpdateOne) SetCreatedAt(t time.Time) *TblCartUpdateOne {
	tcuo.mutation.SetCreatedAt(t)
	return tcuo
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableCreatedAt(t *time.Time) *TblCartUpdateOne {
	if t != nil {
		tcuo.SetCreatedAt(*t)
	}
	return tcuo
}

// SetUpdatedAt sets the "Updated_at" field.
func (tcuo *TblCartUpdateOne) SetUpdatedAt(t time.Time) *TblCartUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// SetNillableUpdatedAt sets the "Updated_at" field if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableUpdatedAt(t *time.Time) *TblCartUpdateOne {
	if t != nil {
		tcuo.SetUpdatedAt(*t)
	}
	return tcuo
}

// SetDeletedAt sets the "Deleted_at" field.
func (tcuo *TblCartUpdateOne) SetDeletedAt(t time.Time) *TblCartUpdateOne {
	tcuo.mutation.SetDeletedAt(t)
	return tcuo
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableDeletedAt(t *time.Time) *TblCartUpdateOne {
	if t != nil {
		tcuo.SetDeletedAt(*t)
	}
	return tcuo
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (tcuo *TblCartUpdateOne) ClearDeletedAt() *TblCartUpdateOne {
	tcuo.mutation.ClearDeletedAt()
	return tcuo
}

// SetInventoryID sets the "Inventory" edge to the TblInventory entity by ID.
func (tcuo *TblCartUpdateOne) SetInventoryID(id string) *TblCartUpdateOne {
	tcuo.mutation.SetInventoryID(id)
	return tcuo
}

// SetNillableInventoryID sets the "Inventory" edge to the TblInventory entity by ID if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableInventoryID(id *string) *TblCartUpdateOne {
	if id != nil {
		tcuo = tcuo.SetInventoryID(*id)
	}
	return tcuo
}

// SetInventory sets the "Inventory" edge to the TblInventory entity.
func (tcuo *TblCartUpdateOne) SetInventory(t *TblInventory) *TblCartUpdateOne {
	return tcuo.SetInventoryID(t.ID)
}

// SetUserID sets the "User" edge to the TblUser entity by ID.
func (tcuo *TblCartUpdateOne) SetUserID(id string) *TblCartUpdateOne {
	tcuo.mutation.SetUserID(id)
	return tcuo
}

// SetNillableUserID sets the "User" edge to the TblUser entity by ID if the given value is not nil.
func (tcuo *TblCartUpdateOne) SetNillableUserID(id *string) *TblCartUpdateOne {
	if id != nil {
		tcuo = tcuo.SetUserID(*id)
	}
	return tcuo
}

// SetUser sets the "User" edge to the TblUser entity.
func (tcuo *TblCartUpdateOne) SetUser(t *TblUser) *TblCartUpdateOne {
	return tcuo.SetUserID(t.ID)
}

// Mutation returns the TblCartMutation object of the builder.
func (tcuo *TblCartUpdateOne) Mutation() *TblCartMutation {
	return tcuo.mutation
}

// ClearInventory clears the "Inventory" edge to the TblInventory entity.
func (tcuo *TblCartUpdateOne) ClearInventory() *TblCartUpdateOne {
	tcuo.mutation.ClearInventory()
	return tcuo
}

// ClearUser clears the "User" edge to the TblUser entity.
func (tcuo *TblCartUpdateOne) ClearUser() *TblCartUpdateOne {
	tcuo.mutation.ClearUser()
	return tcuo
}

// Where appends a list predicates to the TblCartUpdate builder.
func (tcuo *TblCartUpdateOne) Where(ps ...predicate.TblCart) *TblCartUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *TblCartUpdateOne) Select(field string, fields ...string) *TblCartUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated TblCart entity.
func (tcuo *TblCartUpdateOne) Save(ctx context.Context) (*TblCart, error) {
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *TblCartUpdateOne) SaveX(ctx context.Context) *TblCart {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *TblCartUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *TblCartUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *TblCartUpdateOne) check() error {
	if v, ok := tcuo.mutation.Status(); ok {
		if err := tblcart.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`entgen: validator failed for field "TblCart.Status": %w`, err)}
		}
	}
	return nil
}

func (tcuo *TblCartUpdateOne) sqlSave(ctx context.Context) (_node *TblCart, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tblcart.Table, tblcart.Columns, sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "TblCart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblcart.FieldID)
		for _, f := range fields {
			if !tblcart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tblcart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.Status(); ok {
		_spec.SetField(tblcart.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := tcuo.mutation.CreatedAt(); ok {
		_spec.SetField(tblcart.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tblcart.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tcuo.mutation.DeletedAt(); ok {
		_spec.SetField(tblcart.FieldDeletedAt, field.TypeTime, value)
	}
	if tcuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tblcart.FieldDeletedAt, field.TypeTime)
	}
	if tcuo.mutation.InventoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.InventoryTable,
			Columns: []string{tblcart.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.InventoryTable,
			Columns: []string{tblcart.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.UserTable,
			Columns: []string{tblcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.UserTable,
			Columns: []string{tblcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TblCart{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tblcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
