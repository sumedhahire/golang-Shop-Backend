// Code generated by ent, DO NOT EDIT.

package tblcart

import (
	"inventory/ent/entgen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TblCart {
	return predicate.TblCart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TblCart {
	return predicate.TblCart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TblCart {
	return predicate.TblCart(sql.FieldContainsFold(FieldID, id))
}

// ProductId applies equality check predicate on the "ProductId" field. It's identical to ProductIdEQ.
func ProductId(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldProductId, v))
}

// UserId applies equality check predicate on the "UserId" field. It's identical to UserIdEQ.
func UserId(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldUserId, v))
}

// CreatedAt applies equality check predicate on the "Created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "Updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "Deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldDeletedAt, v))
}

// ProductIdEQ applies the EQ predicate on the "ProductId" field.
func ProductIdEQ(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldProductId, v))
}

// ProductIdNEQ applies the NEQ predicate on the "ProductId" field.
func ProductIdNEQ(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldNEQ(FieldProductId, v))
}

// ProductIdIn applies the In predicate on the "ProductId" field.
func ProductIdIn(vs ...string) predicate.TblCart {
	return predicate.TblCart(sql.FieldIn(FieldProductId, vs...))
}

// ProductIdNotIn applies the NotIn predicate on the "ProductId" field.
func ProductIdNotIn(vs ...string) predicate.TblCart {
	return predicate.TblCart(sql.FieldNotIn(FieldProductId, vs...))
}

// ProductIdGT applies the GT predicate on the "ProductId" field.
func ProductIdGT(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldGT(FieldProductId, v))
}

// ProductIdGTE applies the GTE predicate on the "ProductId" field.
func ProductIdGTE(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldGTE(FieldProductId, v))
}

// ProductIdLT applies the LT predicate on the "ProductId" field.
func ProductIdLT(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldLT(FieldProductId, v))
}

// ProductIdLTE applies the LTE predicate on the "ProductId" field.
func ProductIdLTE(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldLTE(FieldProductId, v))
}

// ProductIdContains applies the Contains predicate on the "ProductId" field.
func ProductIdContains(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldContains(FieldProductId, v))
}

// ProductIdHasPrefix applies the HasPrefix predicate on the "ProductId" field.
func ProductIdHasPrefix(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldHasPrefix(FieldProductId, v))
}

// ProductIdHasSuffix applies the HasSuffix predicate on the "ProductId" field.
func ProductIdHasSuffix(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldHasSuffix(FieldProductId, v))
}

// ProductIdIsNil applies the IsNil predicate on the "ProductId" field.
func ProductIdIsNil() predicate.TblCart {
	return predicate.TblCart(sql.FieldIsNull(FieldProductId))
}

// ProductIdNotNil applies the NotNil predicate on the "ProductId" field.
func ProductIdNotNil() predicate.TblCart {
	return predicate.TblCart(sql.FieldNotNull(FieldProductId))
}

// ProductIdEqualFold applies the EqualFold predicate on the "ProductId" field.
func ProductIdEqualFold(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEqualFold(FieldProductId, v))
}

// ProductIdContainsFold applies the ContainsFold predicate on the "ProductId" field.
func ProductIdContainsFold(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldContainsFold(FieldProductId, v))
}

// UserIdEQ applies the EQ predicate on the "UserId" field.
func UserIdEQ(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "UserId" field.
func UserIdNEQ(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "UserId" field.
func UserIdIn(vs ...string) predicate.TblCart {
	return predicate.TblCart(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "UserId" field.
func UserIdNotIn(vs ...string) predicate.TblCart {
	return predicate.TblCart(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "UserId" field.
func UserIdGT(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "UserId" field.
func UserIdGTE(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "UserId" field.
func UserIdLT(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "UserId" field.
func UserIdLTE(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldLTE(FieldUserId, v))
}

// UserIdContains applies the Contains predicate on the "UserId" field.
func UserIdContains(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldContains(FieldUserId, v))
}

// UserIdHasPrefix applies the HasPrefix predicate on the "UserId" field.
func UserIdHasPrefix(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldHasPrefix(FieldUserId, v))
}

// UserIdHasSuffix applies the HasSuffix predicate on the "UserId" field.
func UserIdHasSuffix(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldHasSuffix(FieldUserId, v))
}

// UserIdIsNil applies the IsNil predicate on the "UserId" field.
func UserIdIsNil() predicate.TblCart {
	return predicate.TblCart(sql.FieldIsNull(FieldUserId))
}

// UserIdNotNil applies the NotNil predicate on the "UserId" field.
func UserIdNotNil() predicate.TblCart {
	return predicate.TblCart(sql.FieldNotNull(FieldUserId))
}

// UserIdEqualFold applies the EqualFold predicate on the "UserId" field.
func UserIdEqualFold(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldEqualFold(FieldUserId, v))
}

// UserIdContainsFold applies the ContainsFold predicate on the "UserId" field.
func UserIdContainsFold(v string) predicate.TblCart {
	return predicate.TblCart(sql.FieldContainsFold(FieldUserId, v))
}

// StatusEQ applies the EQ predicate on the "Status" field.
func StatusEQ(v Status) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "Status" field.
func StatusNEQ(v Status) predicate.TblCart {
	return predicate.TblCart(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "Status" field.
func StatusIn(vs ...Status) predicate.TblCart {
	return predicate.TblCart(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "Status" field.
func StatusNotIn(vs ...Status) predicate.TblCart {
	return predicate.TblCart(sql.FieldNotIn(FieldStatus, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "Created_at" field.
func CreatedAtEQ(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "Created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "Created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "Created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "Created_at" field.
func CreatedAtGT(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "Created_at" field.
func CreatedAtGTE(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "Created_at" field.
func CreatedAtLT(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "Created_at" field.
func CreatedAtLTE(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "Updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "Updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "Updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "Updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "Updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "Updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "Updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "Updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "Deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "Deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "Deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "Deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "Deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "Deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "Deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "Deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TblCart {
	return predicate.TblCart(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "Deleted_at" field.
func DeletedAtIsNil() predicate.TblCart {
	return predicate.TblCart(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "Deleted_at" field.
func DeletedAtNotNil() predicate.TblCart {
	return predicate.TblCart(sql.FieldNotNull(FieldDeletedAt))
}

// HasInventory applies the HasEdge predicate on the "Inventory" edge.
func HasInventory() predicate.TblCart {
	return predicate.TblCart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, InventoryTable, InventoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInventoryWith applies the HasEdge predicate on the "Inventory" edge with a given conditions (other predicates).
func HasInventoryWith(preds ...predicate.TblInventory) predicate.TblCart {
	return predicate.TblCart(func(s *sql.Selector) {
		step := newInventoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "User" edge.
func HasUser() predicate.TblCart {
	return predicate.TblCart(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "User" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.TblUser) predicate.TblCart {
	return predicate.TblCart(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TblCart) predicate.TblCart {
	return predicate.TblCart(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TblCart) predicate.TblCart {
	return predicate.TblCart(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TblCart) predicate.TblCart {
	return predicate.TblCart(sql.NotPredicates(p))
}
