// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tbluser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblCartCreate is the builder for creating a TblCart entity.
type TblCartCreate struct {
	config
	mutation *TblCartMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProductId sets the "ProductId" field.
func (tcc *TblCartCreate) SetProductId(s string) *TblCartCreate {
	tcc.mutation.SetProductId(s)
	return tcc
}

// SetNillableProductId sets the "ProductId" field if the given value is not nil.
func (tcc *TblCartCreate) SetNillableProductId(s *string) *TblCartCreate {
	if s != nil {
		tcc.SetProductId(*s)
	}
	return tcc
}

// SetUserId sets the "UserId" field.
func (tcc *TblCartCreate) SetUserId(s string) *TblCartCreate {
	tcc.mutation.SetUserId(s)
	return tcc
}

// SetNillableUserId sets the "UserId" field if the given value is not nil.
func (tcc *TblCartCreate) SetNillableUserId(s *string) *TblCartCreate {
	if s != nil {
		tcc.SetUserId(*s)
	}
	return tcc
}

// SetStatus sets the "Status" field.
func (tcc *TblCartCreate) SetStatus(t tblcart.Status) *TblCartCreate {
	tcc.mutation.SetStatus(t)
	return tcc
}

// SetNillableStatus sets the "Status" field if the given value is not nil.
func (tcc *TblCartCreate) SetNillableStatus(t *tblcart.Status) *TblCartCreate {
	if t != nil {
		tcc.SetStatus(*t)
	}
	return tcc
}

// SetCreatedAt sets the "Created_at" field.
func (tcc *TblCartCreate) SetCreatedAt(t time.Time) *TblCartCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "Created_at" field if the given value is not nil.
func (tcc *TblCartCreate) SetNillableCreatedAt(t *time.Time) *TblCartCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "Updated_at" field.
func (tcc *TblCartCreate) SetUpdatedAt(t time.Time) *TblCartCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetDeletedAt sets the "Deleted_at" field.
func (tcc *TblCartCreate) SetDeletedAt(t time.Time) *TblCartCreate {
	tcc.mutation.SetDeletedAt(t)
	return tcc
}

// SetNillableDeletedAt sets the "Deleted_at" field if the given value is not nil.
func (tcc *TblCartCreate) SetNillableDeletedAt(t *time.Time) *TblCartCreate {
	if t != nil {
		tcc.SetDeletedAt(*t)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TblCartCreate) SetID(s string) *TblCartCreate {
	tcc.mutation.SetID(s)
	return tcc
}

// SetInventoryID sets the "Inventory" edge to the TblInventory entity by ID.
func (tcc *TblCartCreate) SetInventoryID(id string) *TblCartCreate {
	tcc.mutation.SetInventoryID(id)
	return tcc
}

// SetNillableInventoryID sets the "Inventory" edge to the TblInventory entity by ID if the given value is not nil.
func (tcc *TblCartCreate) SetNillableInventoryID(id *string) *TblCartCreate {
	if id != nil {
		tcc = tcc.SetInventoryID(*id)
	}
	return tcc
}

// SetInventory sets the "Inventory" edge to the TblInventory entity.
func (tcc *TblCartCreate) SetInventory(t *TblInventory) *TblCartCreate {
	return tcc.SetInventoryID(t.ID)
}

// SetUserID sets the "User" edge to the TblUser entity by ID.
func (tcc *TblCartCreate) SetUserID(id string) *TblCartCreate {
	tcc.mutation.SetUserID(id)
	return tcc
}

// SetNillableUserID sets the "User" edge to the TblUser entity by ID if the given value is not nil.
func (tcc *TblCartCreate) SetNillableUserID(id *string) *TblCartCreate {
	if id != nil {
		tcc = tcc.SetUserID(*id)
	}
	return tcc
}

// SetUser sets the "User" edge to the TblUser entity.
func (tcc *TblCartCreate) SetUser(t *TblUser) *TblCartCreate {
	return tcc.SetUserID(t.ID)
}

// Mutation returns the TblCartMutation object of the builder.
func (tcc *TblCartCreate) Mutation() *TblCartMutation {
	return tcc.mutation
}

// Save creates the TblCart in the database.
func (tcc *TblCartCreate) Save(ctx context.Context) (*TblCart, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TblCartCreate) SaveX(ctx context.Context) *TblCart {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TblCartCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TblCartCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TblCartCreate) defaults() {
	if _, ok := tcc.mutation.Status(); !ok {
		v := tblcart.DefaultStatus
		tcc.mutation.SetStatus(v)
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := tblcart.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TblCartCreate) check() error {
	if _, ok := tcc.mutation.Status(); !ok {
		return &ValidationError{Name: "Status", err: errors.New(`entgen: missing required field "TblCart.Status"`)}
	}
	if v, ok := tcc.mutation.Status(); ok {
		if err := tblcart.StatusValidator(v); err != nil {
			return &ValidationError{Name: "Status", err: fmt.Errorf(`entgen: validator failed for field "TblCart.Status": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "Created_at", err: errors.New(`entgen: missing required field "TblCart.Created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "Updated_at", err: errors.New(`entgen: missing required field "TblCart.Updated_at"`)}
	}
	return nil
}

func (tcc *TblCartCreate) sqlSave(ctx context.Context) (*TblCart, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TblCart.ID type: %T", _spec.ID.Value)
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TblCartCreate) createSpec() (*TblCart, *sqlgraph.CreateSpec) {
	var (
		_node = &TblCart{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(tblcart.Table, sqlgraph.NewFieldSpec(tblcart.FieldID, field.TypeString))
	)
	_spec.OnConflict = tcc.conflict
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.Status(); ok {
		_spec.SetField(tblcart.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(tblcart.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(tblcart.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.DeletedAt(); ok {
		_spec.SetField(tblcart.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if nodes := tcc.mutation.InventoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.InventoryTable,
			Columns: []string{tblcart.InventoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProductId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tblcart.UserTable,
			Columns: []string{tblcart.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserId = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblCart.Create().
//		SetProductId(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblCartUpsert) {
//			SetProductId(v+v).
//		}).
//		Exec(ctx)
func (tcc *TblCartCreate) OnConflict(opts ...sql.ConflictOption) *TblCartUpsertOne {
	tcc.conflict = opts
	return &TblCartUpsertOne{
		create: tcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblCart.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcc *TblCartCreate) OnConflictColumns(columns ...string) *TblCartUpsertOne {
	tcc.conflict = append(tcc.conflict, sql.ConflictColumns(columns...))
	return &TblCartUpsertOne{
		create: tcc,
	}
}

type (
	// TblCartUpsertOne is the builder for "upsert"-ing
	//  one TblCart node.
	TblCartUpsertOne struct {
		create *TblCartCreate
	}

	// TblCartUpsert is the "OnConflict" setter.
	TblCartUpsert struct {
		*sql.UpdateSet
	}
)

// SetProductId sets the "ProductId" field.
func (u *TblCartUpsert) SetProductId(v string) *TblCartUpsert {
	u.Set(tblcart.FieldProductId, v)
	return u
}

// UpdateProductId sets the "ProductId" field to the value that was provided on create.
func (u *TblCartUpsert) UpdateProductId() *TblCartUpsert {
	u.SetExcluded(tblcart.FieldProductId)
	return u
}

// ClearProductId clears the value of the "ProductId" field.
func (u *TblCartUpsert) ClearProductId() *TblCartUpsert {
	u.SetNull(tblcart.FieldProductId)
	return u
}

// SetUserId sets the "UserId" field.
func (u *TblCartUpsert) SetUserId(v string) *TblCartUpsert {
	u.Set(tblcart.FieldUserId, v)
	return u
}

// UpdateUserId sets the "UserId" field to the value that was provided on create.
func (u *TblCartUpsert) UpdateUserId() *TblCartUpsert {
	u.SetExcluded(tblcart.FieldUserId)
	return u
}

// ClearUserId clears the value of the "UserId" field.
func (u *TblCartUpsert) ClearUserId() *TblCartUpsert {
	u.SetNull(tblcart.FieldUserId)
	return u
}

// SetStatus sets the "Status" field.
func (u *TblCartUpsert) SetStatus(v tblcart.Status) *TblCartUpsert {
	u.Set(tblcart.FieldStatus, v)
	return u
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *TblCartUpsert) UpdateStatus() *TblCartUpsert {
	u.SetExcluded(tblcart.FieldStatus)
	return u
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblCartUpsert) SetCreatedAt(v time.Time) *TblCartUpsert {
	u.Set(tblcart.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblCartUpsert) UpdateCreatedAt() *TblCartUpsert {
	u.SetExcluded(tblcart.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblCartUpsert) SetUpdatedAt(v time.Time) *TblCartUpsert {
	u.Set(tblcart.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblCartUpsert) UpdateUpdatedAt() *TblCartUpsert {
	u.SetExcluded(tblcart.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblCartUpsert) SetDeletedAt(v time.Time) *TblCartUpsert {
	u.Set(tblcart.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblCartUpsert) UpdateDeletedAt() *TblCartUpsert {
	u.SetExcluded(tblcart.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblCartUpsert) ClearDeletedAt() *TblCartUpsert {
	u.SetNull(tblcart.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.TblCart.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblcart.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblCartUpsertOne) UpdateNewValues() *TblCartUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(tblcart.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblCart.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TblCartUpsertOne) Ignore() *TblCartUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblCartUpsertOne) DoNothing() *TblCartUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblCartCreate.OnConflict
// documentation for more info.
func (u *TblCartUpsertOne) Update(set func(*TblCartUpsert)) *TblCartUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblCartUpsert{UpdateSet: update})
	}))
	return u
}

// SetProductId sets the "ProductId" field.
func (u *TblCartUpsertOne) SetProductId(v string) *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.SetProductId(v)
	})
}

// UpdateProductId sets the "ProductId" field to the value that was provided on create.
func (u *TblCartUpsertOne) UpdateProductId() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateProductId()
	})
}

// ClearProductId clears the value of the "ProductId" field.
func (u *TblCartUpsertOne) ClearProductId() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.ClearProductId()
	})
}

// SetUserId sets the "UserId" field.
func (u *TblCartUpsertOne) SetUserId(v string) *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "UserId" field to the value that was provided on create.
func (u *TblCartUpsertOne) UpdateUserId() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateUserId()
	})
}

// ClearUserId clears the value of the "UserId" field.
func (u *TblCartUpsertOne) ClearUserId() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.ClearUserId()
	})
}

// SetStatus sets the "Status" field.
func (u *TblCartUpsertOne) SetStatus(v tblcart.Status) *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *TblCartUpsertOne) UpdateStatus() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblCartUpsertOne) SetCreatedAt(v time.Time) *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblCartUpsertOne) UpdateCreatedAt() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblCartUpsertOne) SetUpdatedAt(v time.Time) *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblCartUpsertOne) UpdateUpdatedAt() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblCartUpsertOne) SetDeletedAt(v time.Time) *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblCartUpsertOne) UpdateDeletedAt() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblCartUpsertOne) ClearDeletedAt() *TblCartUpsertOne {
	return u.Update(func(s *TblCartUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblCartUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblCartCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblCartUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TblCartUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("entgen: TblCartUpsertOne.ID is not supported by MySQL driver. Use TblCartUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TblCartUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TblCartCreateBulk is the builder for creating many TblCart entities in bulk.
type TblCartCreateBulk struct {
	config
	err      error
	builders []*TblCartCreate
	conflict []sql.ConflictOption
}

// Save creates the TblCart entities in the database.
func (tccb *TblCartCreateBulk) Save(ctx context.Context) ([]*TblCart, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TblCart, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TblCartMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TblCartCreateBulk) SaveX(ctx context.Context) []*TblCart {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TblCartCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TblCartCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.TblCart.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TblCartUpsert) {
//			SetProductId(v+v).
//		}).
//		Exec(ctx)
func (tccb *TblCartCreateBulk) OnConflict(opts ...sql.ConflictOption) *TblCartUpsertBulk {
	tccb.conflict = opts
	return &TblCartUpsertBulk{
		create: tccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.TblCart.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tccb *TblCartCreateBulk) OnConflictColumns(columns ...string) *TblCartUpsertBulk {
	tccb.conflict = append(tccb.conflict, sql.ConflictColumns(columns...))
	return &TblCartUpsertBulk{
		create: tccb,
	}
}

// TblCartUpsertBulk is the builder for "upsert"-ing
// a bulk of TblCart nodes.
type TblCartUpsertBulk struct {
	create *TblCartCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.TblCart.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(tblcart.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TblCartUpsertBulk) UpdateNewValues() *TblCartUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(tblcart.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.TblCart.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TblCartUpsertBulk) Ignore() *TblCartUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TblCartUpsertBulk) DoNothing() *TblCartUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TblCartCreateBulk.OnConflict
// documentation for more info.
func (u *TblCartUpsertBulk) Update(set func(*TblCartUpsert)) *TblCartUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TblCartUpsert{UpdateSet: update})
	}))
	return u
}

// SetProductId sets the "ProductId" field.
func (u *TblCartUpsertBulk) SetProductId(v string) *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.SetProductId(v)
	})
}

// UpdateProductId sets the "ProductId" field to the value that was provided on create.
func (u *TblCartUpsertBulk) UpdateProductId() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateProductId()
	})
}

// ClearProductId clears the value of the "ProductId" field.
func (u *TblCartUpsertBulk) ClearProductId() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.ClearProductId()
	})
}

// SetUserId sets the "UserId" field.
func (u *TblCartUpsertBulk) SetUserId(v string) *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.SetUserId(v)
	})
}

// UpdateUserId sets the "UserId" field to the value that was provided on create.
func (u *TblCartUpsertBulk) UpdateUserId() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateUserId()
	})
}

// ClearUserId clears the value of the "UserId" field.
func (u *TblCartUpsertBulk) ClearUserId() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.ClearUserId()
	})
}

// SetStatus sets the "Status" field.
func (u *TblCartUpsertBulk) SetStatus(v tblcart.Status) *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "Status" field to the value that was provided on create.
func (u *TblCartUpsertBulk) UpdateStatus() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateStatus()
	})
}

// SetCreatedAt sets the "Created_at" field.
func (u *TblCartUpsertBulk) SetCreatedAt(v time.Time) *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "Created_at" field to the value that was provided on create.
func (u *TblCartUpsertBulk) UpdateCreatedAt() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "Updated_at" field.
func (u *TblCartUpsertBulk) SetUpdatedAt(v time.Time) *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "Updated_at" field to the value that was provided on create.
func (u *TblCartUpsertBulk) UpdateUpdatedAt() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "Deleted_at" field.
func (u *TblCartUpsertBulk) SetDeletedAt(v time.Time) *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "Deleted_at" field to the value that was provided on create.
func (u *TblCartUpsertBulk) UpdateDeletedAt() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "Deleted_at" field.
func (u *TblCartUpsertBulk) ClearDeletedAt() *TblCartUpsertBulk {
	return u.Update(func(s *TblCartUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *TblCartUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entgen: OnConflict was set for builder %d. Set it on the TblCartCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entgen: missing options for TblCartCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TblCartUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
