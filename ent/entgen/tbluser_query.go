// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"database/sql/driver"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthtoken"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblpayment"
	"inventory/ent/entgen/tbluser"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblUserQuery is the builder for querying TblUser entities.
type TblUserQuery struct {
	config
	ctx             *QueryContext
	order           []tbluser.OrderOption
	inters          []Interceptor
	predicates      []predicate.TblUser
	withUserToken   *TblAuthTokenQuery
	withUserCart    *TblCartQuery
	withUserPayment *TblPaymentQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TblUserQuery builder.
func (tuq *TblUserQuery) Where(ps ...predicate.TblUser) *TblUserQuery {
	tuq.predicates = append(tuq.predicates, ps...)
	return tuq
}

// Limit the number of records to be returned by this query.
func (tuq *TblUserQuery) Limit(limit int) *TblUserQuery {
	tuq.ctx.Limit = &limit
	return tuq
}

// Offset to start from.
func (tuq *TblUserQuery) Offset(offset int) *TblUserQuery {
	tuq.ctx.Offset = &offset
	return tuq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tuq *TblUserQuery) Unique(unique bool) *TblUserQuery {
	tuq.ctx.Unique = &unique
	return tuq
}

// Order specifies how the records should be ordered.
func (tuq *TblUserQuery) Order(o ...tbluser.OrderOption) *TblUserQuery {
	tuq.order = append(tuq.order, o...)
	return tuq
}

// QueryUserToken chains the current query on the "UserToken" edge.
func (tuq *TblUserQuery) QueryUserToken() *TblAuthTokenQuery {
	query := (&TblAuthTokenClient{config: tuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tbluser.Table, tbluser.FieldID, selector),
			sqlgraph.To(tblauthtoken.Table, tblauthtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tbluser.UserTokenTable, tbluser.UserTokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserCart chains the current query on the "UserCart" edge.
func (tuq *TblUserQuery) QueryUserCart() *TblCartQuery {
	query := (&TblCartClient{config: tuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tbluser.Table, tbluser.FieldID, selector),
			sqlgraph.To(tblcart.Table, tblcart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tbluser.UserCartTable, tbluser.UserCartColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserPayment chains the current query on the "UserPayment" edge.
func (tuq *TblUserQuery) QueryUserPayment() *TblPaymentQuery {
	query := (&TblPaymentClient{config: tuq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tuq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tuq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tbluser.Table, tbluser.FieldID, selector),
			sqlgraph.To(tblpayment.Table, tblpayment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tbluser.UserPaymentTable, tbluser.UserPaymentColumn),
		)
		fromU = sqlgraph.SetNeighbors(tuq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TblUser entity from the query.
// Returns a *NotFoundError when no TblUser was found.
func (tuq *TblUserQuery) First(ctx context.Context) (*TblUser, error) {
	nodes, err := tuq.Limit(1).All(setContextOp(ctx, tuq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tbluser.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tuq *TblUserQuery) FirstX(ctx context.Context) *TblUser {
	node, err := tuq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TblUser ID from the query.
// Returns a *NotFoundError when no TblUser ID was found.
func (tuq *TblUserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tuq.Limit(1).IDs(setContextOp(ctx, tuq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tbluser.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tuq *TblUserQuery) FirstIDX(ctx context.Context) string {
	id, err := tuq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TblUser entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TblUser entity is found.
// Returns a *NotFoundError when no TblUser entities are found.
func (tuq *TblUserQuery) Only(ctx context.Context) (*TblUser, error) {
	nodes, err := tuq.Limit(2).All(setContextOp(ctx, tuq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tbluser.Label}
	default:
		return nil, &NotSingularError{tbluser.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tuq *TblUserQuery) OnlyX(ctx context.Context) *TblUser {
	node, err := tuq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TblUser ID in the query.
// Returns a *NotSingularError when more than one TblUser ID is found.
// Returns a *NotFoundError when no entities are found.
func (tuq *TblUserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tuq.Limit(2).IDs(setContextOp(ctx, tuq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tbluser.Label}
	default:
		err = &NotSingularError{tbluser.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tuq *TblUserQuery) OnlyIDX(ctx context.Context) string {
	id, err := tuq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TblUsers.
func (tuq *TblUserQuery) All(ctx context.Context) ([]*TblUser, error) {
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryAll)
	if err := tuq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TblUser, *TblUserQuery]()
	return withInterceptors[[]*TblUser](ctx, tuq, qr, tuq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tuq *TblUserQuery) AllX(ctx context.Context) []*TblUser {
	nodes, err := tuq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TblUser IDs.
func (tuq *TblUserQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tuq.ctx.Unique == nil && tuq.path != nil {
		tuq.Unique(true)
	}
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryIDs)
	if err = tuq.Select(tbluser.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tuq *TblUserQuery) IDsX(ctx context.Context) []string {
	ids, err := tuq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tuq *TblUserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryCount)
	if err := tuq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tuq, querierCount[*TblUserQuery](), tuq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tuq *TblUserQuery) CountX(ctx context.Context) int {
	count, err := tuq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tuq *TblUserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tuq.ctx, ent.OpQueryExist)
	switch _, err := tuq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entgen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tuq *TblUserQuery) ExistX(ctx context.Context) bool {
	exist, err := tuq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TblUserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tuq *TblUserQuery) Clone() *TblUserQuery {
	if tuq == nil {
		return nil
	}
	return &TblUserQuery{
		config:          tuq.config,
		ctx:             tuq.ctx.Clone(),
		order:           append([]tbluser.OrderOption{}, tuq.order...),
		inters:          append([]Interceptor{}, tuq.inters...),
		predicates:      append([]predicate.TblUser{}, tuq.predicates...),
		withUserToken:   tuq.withUserToken.Clone(),
		withUserCart:    tuq.withUserCart.Clone(),
		withUserPayment: tuq.withUserPayment.Clone(),
		// clone intermediate query.
		sql:  tuq.sql.Clone(),
		path: tuq.path,
	}
}

// WithUserToken tells the query-builder to eager-load the nodes that are connected to
// the "UserToken" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TblUserQuery) WithUserToken(opts ...func(*TblAuthTokenQuery)) *TblUserQuery {
	query := (&TblAuthTokenClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tuq.withUserToken = query
	return tuq
}

// WithUserCart tells the query-builder to eager-load the nodes that are connected to
// the "UserCart" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TblUserQuery) WithUserCart(opts ...func(*TblCartQuery)) *TblUserQuery {
	query := (&TblCartClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tuq.withUserCart = query
	return tuq
}

// WithUserPayment tells the query-builder to eager-load the nodes that are connected to
// the "UserPayment" edge. The optional arguments are used to configure the query builder of the edge.
func (tuq *TblUserQuery) WithUserPayment(opts ...func(*TblPaymentQuery)) *TblUserQuery {
	query := (&TblPaymentClient{config: tuq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tuq.withUserPayment = query
	return tuq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Firstname string `json:"firstname,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TblUser.Query().
//		GroupBy(tbluser.FieldFirstname).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
func (tuq *TblUserQuery) GroupBy(field string, fields ...string) *TblUserGroupBy {
	tuq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TblUserGroupBy{build: tuq}
	grbuild.flds = &tuq.ctx.Fields
	grbuild.label = tbluser.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Firstname string `json:"firstname,omitempty"`
//	}
//
//	client.TblUser.Query().
//		Select(tbluser.FieldFirstname).
//		Scan(ctx, &v)
func (tuq *TblUserQuery) Select(fields ...string) *TblUserSelect {
	tuq.ctx.Fields = append(tuq.ctx.Fields, fields...)
	sbuild := &TblUserSelect{TblUserQuery: tuq}
	sbuild.label = tbluser.Label
	sbuild.flds, sbuild.scan = &tuq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TblUserSelect configured with the given aggregations.
func (tuq *TblUserQuery) Aggregate(fns ...AggregateFunc) *TblUserSelect {
	return tuq.Select().Aggregate(fns...)
}

func (tuq *TblUserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tuq.inters {
		if inter == nil {
			return fmt.Errorf("entgen: uninitialized interceptor (forgotten import entgen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tuq); err != nil {
				return err
			}
		}
	}
	for _, f := range tuq.ctx.Fields {
		if !tbluser.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if tuq.path != nil {
		prev, err := tuq.path(ctx)
		if err != nil {
			return err
		}
		tuq.sql = prev
	}
	return nil
}

func (tuq *TblUserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TblUser, error) {
	var (
		nodes       = []*TblUser{}
		_spec       = tuq.querySpec()
		loadedTypes = [3]bool{
			tuq.withUserToken != nil,
			tuq.withUserCart != nil,
			tuq.withUserPayment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TblUser).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TblUser{config: tuq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tuq.modifiers) > 0 {
		_spec.Modifiers = tuq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tuq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tuq.withUserToken; query != nil {
		if err := tuq.loadUserToken(ctx, query, nodes,
			func(n *TblUser) { n.Edges.UserToken = []*TblAuthToken{} },
			func(n *TblUser, e *TblAuthToken) { n.Edges.UserToken = append(n.Edges.UserToken, e) }); err != nil {
			return nil, err
		}
	}
	if query := tuq.withUserCart; query != nil {
		if err := tuq.loadUserCart(ctx, query, nodes,
			func(n *TblUser) { n.Edges.UserCart = []*TblCart{} },
			func(n *TblUser, e *TblCart) { n.Edges.UserCart = append(n.Edges.UserCart, e) }); err != nil {
			return nil, err
		}
	}
	if query := tuq.withUserPayment; query != nil {
		if err := tuq.loadUserPayment(ctx, query, nodes,
			func(n *TblUser) { n.Edges.UserPayment = []*TblPayment{} },
			func(n *TblUser, e *TblPayment) { n.Edges.UserPayment = append(n.Edges.UserPayment, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tuq *TblUserQuery) loadUserToken(ctx context.Context, query *TblAuthTokenQuery, nodes []*TblUser, init func(*TblUser), assign func(*TblUser, *TblAuthToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tblauthtoken.FieldUserUlid)
	}
	query.Where(predicate.TblAuthToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tbluser.UserTokenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserUlid
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_ulid" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tuq *TblUserQuery) loadUserCart(ctx context.Context, query *TblCartQuery, nodes []*TblUser, init func(*TblUser), assign func(*TblUser, *TblCart)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tblcart.FieldUserId)
	}
	query.Where(predicate.TblCart(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tbluser.UserCartColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "UserId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tuq *TblUserQuery) loadUserPayment(ctx context.Context, query *TblPaymentQuery, nodes []*TblUser, init func(*TblUser), assign func(*TblUser, *TblPayment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblUser)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tblpayment.FieldUserId)
	}
	query.Where(predicate.TblPayment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tbluser.UserPaymentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "UserId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tuq *TblUserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tuq.querySpec()
	if len(tuq.modifiers) > 0 {
		_spec.Modifiers = tuq.modifiers
	}
	_spec.Node.Columns = tuq.ctx.Fields
	if len(tuq.ctx.Fields) > 0 {
		_spec.Unique = tuq.ctx.Unique != nil && *tuq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tuq.driver, _spec)
}

func (tuq *TblUserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tbluser.Table, tbluser.Columns, sqlgraph.NewFieldSpec(tbluser.FieldID, field.TypeString))
	_spec.From = tuq.sql
	if unique := tuq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tuq.path != nil {
		_spec.Unique = true
	}
	if fields := tuq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tbluser.FieldID)
		for i := range fields {
			if fields[i] != tbluser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tuq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tuq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tuq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tuq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tuq *TblUserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tuq.driver.Dialect())
	t1 := builder.Table(tbluser.Table)
	columns := tuq.ctx.Fields
	if len(columns) == 0 {
		columns = tbluser.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tuq.sql != nil {
		selector = tuq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tuq.ctx.Unique != nil && *tuq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tuq.modifiers {
		m(selector)
	}
	for _, p := range tuq.predicates {
		p(selector)
	}
	for _, p := range tuq.order {
		p(selector)
	}
	if offset := tuq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tuq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (tuq *TblUserQuery) ForUpdate(opts ...sql.LockOption) *TblUserQuery {
	if tuq.driver.Dialect() == dialect.Postgres {
		tuq.Unique(false)
	}
	tuq.modifiers = append(tuq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return tuq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (tuq *TblUserQuery) ForShare(opts ...sql.LockOption) *TblUserQuery {
	if tuq.driver.Dialect() == dialect.Postgres {
		tuq.Unique(false)
	}
	tuq.modifiers = append(tuq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return tuq
}

// TblUserGroupBy is the group-by builder for TblUser entities.
type TblUserGroupBy struct {
	selector
	build *TblUserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tugb *TblUserGroupBy) Aggregate(fns ...AggregateFunc) *TblUserGroupBy {
	tugb.fns = append(tugb.fns, fns...)
	return tugb
}

// Scan applies the selector query and scans the result into the given value.
func (tugb *TblUserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tugb.build.ctx, ent.OpQueryGroupBy)
	if err := tugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblUserQuery, *TblUserGroupBy](ctx, tugb.build, tugb, tugb.build.inters, v)
}

func (tugb *TblUserGroupBy) sqlScan(ctx context.Context, root *TblUserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tugb.fns))
	for _, fn := range tugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tugb.flds)+len(tugb.fns))
		for _, f := range *tugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TblUserSelect is the builder for selecting fields of TblUser entities.
type TblUserSelect struct {
	*TblUserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tus *TblUserSelect) Aggregate(fns ...AggregateFunc) *TblUserSelect {
	tus.fns = append(tus.fns, fns...)
	return tus
}

// Scan applies the selector query and scans the result into the given value.
func (tus *TblUserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tus.ctx, ent.OpQuerySelect)
	if err := tus.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblUserQuery, *TblUserSelect](ctx, tus.TblUserQuery, tus, tus.inters, v)
}

func (tus *TblUserSelect) sqlScan(ctx context.Context, root *TblUserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tus.fns))
	for _, fn := range tus.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tus.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tus.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
