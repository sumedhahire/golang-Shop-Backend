// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"database/sql/driver"
	"fmt"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblcart"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblinventorytag"
	"inventory/ent/entgen/tblpayment"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblInventoryQuery is the builder for querying TblInventory entities.
type TblInventoryQuery struct {
	config
	ctx                  *QueryContext
	order                []tblinventory.OrderOption
	inters               []Interceptor
	predicates           []predicate.TblInventory
	withInventory        *TblInventoryTagQuery
	withInventoryCart    *TblCartQuery
	withInventoryPayment *TblPaymentQuery
	modifiers            []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TblInventoryQuery builder.
func (tiq *TblInventoryQuery) Where(ps ...predicate.TblInventory) *TblInventoryQuery {
	tiq.predicates = append(tiq.predicates, ps...)
	return tiq
}

// Limit the number of records to be returned by this query.
func (tiq *TblInventoryQuery) Limit(limit int) *TblInventoryQuery {
	tiq.ctx.Limit = &limit
	return tiq
}

// Offset to start from.
func (tiq *TblInventoryQuery) Offset(offset int) *TblInventoryQuery {
	tiq.ctx.Offset = &offset
	return tiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tiq *TblInventoryQuery) Unique(unique bool) *TblInventoryQuery {
	tiq.ctx.Unique = &unique
	return tiq
}

// Order specifies how the records should be ordered.
func (tiq *TblInventoryQuery) Order(o ...tblinventory.OrderOption) *TblInventoryQuery {
	tiq.order = append(tiq.order, o...)
	return tiq
}

// QueryInventory chains the current query on the "inventory" edge.
func (tiq *TblInventoryQuery) QueryInventory() *TblInventoryTagQuery {
	query := (&TblInventoryTagClient{config: tiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tblinventory.Table, tblinventory.FieldID, selector),
			sqlgraph.To(tblinventorytag.Table, tblinventorytag.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tblinventory.InventoryTable, tblinventory.InventoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(tiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventoryCart chains the current query on the "InventoryCart" edge.
func (tiq *TblInventoryQuery) QueryInventoryCart() *TblCartQuery {
	query := (&TblCartClient{config: tiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tblinventory.Table, tblinventory.FieldID, selector),
			sqlgraph.To(tblcart.Table, tblcart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tblinventory.InventoryCartTable, tblinventory.InventoryCartColumn),
		)
		fromU = sqlgraph.SetNeighbors(tiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInventoryPayment chains the current query on the "InventoryPayment" edge.
func (tiq *TblInventoryQuery) QueryInventoryPayment() *TblPaymentQuery {
	query := (&TblPaymentClient{config: tiq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(tblinventory.Table, tblinventory.FieldID, selector),
			sqlgraph.To(tblpayment.Table, tblpayment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tblinventory.InventoryPaymentTable, tblinventory.InventoryPaymentColumn),
		)
		fromU = sqlgraph.SetNeighbors(tiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TblInventory entity from the query.
// Returns a *NotFoundError when no TblInventory was found.
func (tiq *TblInventoryQuery) First(ctx context.Context) (*TblInventory, error) {
	nodes, err := tiq.Limit(1).All(setContextOp(ctx, tiq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{tblinventory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tiq *TblInventoryQuery) FirstX(ctx context.Context) *TblInventory {
	node, err := tiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TblInventory ID from the query.
// Returns a *NotFoundError when no TblInventory ID was found.
func (tiq *TblInventoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tiq.Limit(1).IDs(setContextOp(ctx, tiq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{tblinventory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tiq *TblInventoryQuery) FirstIDX(ctx context.Context) string {
	id, err := tiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TblInventory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TblInventory entity is found.
// Returns a *NotFoundError when no TblInventory entities are found.
func (tiq *TblInventoryQuery) Only(ctx context.Context) (*TblInventory, error) {
	nodes, err := tiq.Limit(2).All(setContextOp(ctx, tiq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{tblinventory.Label}
	default:
		return nil, &NotSingularError{tblinventory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tiq *TblInventoryQuery) OnlyX(ctx context.Context) *TblInventory {
	node, err := tiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TblInventory ID in the query.
// Returns a *NotSingularError when more than one TblInventory ID is found.
// Returns a *NotFoundError when no entities are found.
func (tiq *TblInventoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tiq.Limit(2).IDs(setContextOp(ctx, tiq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{tblinventory.Label}
	default:
		err = &NotSingularError{tblinventory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tiq *TblInventoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := tiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TblInventories.
func (tiq *TblInventoryQuery) All(ctx context.Context) ([]*TblInventory, error) {
	ctx = setContextOp(ctx, tiq.ctx, ent.OpQueryAll)
	if err := tiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TblInventory, *TblInventoryQuery]()
	return withInterceptors[[]*TblInventory](ctx, tiq, qr, tiq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tiq *TblInventoryQuery) AllX(ctx context.Context) []*TblInventory {
	nodes, err := tiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TblInventory IDs.
func (tiq *TblInventoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tiq.ctx.Unique == nil && tiq.path != nil {
		tiq.Unique(true)
	}
	ctx = setContextOp(ctx, tiq.ctx, ent.OpQueryIDs)
	if err = tiq.Select(tblinventory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tiq *TblInventoryQuery) IDsX(ctx context.Context) []string {
	ids, err := tiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tiq *TblInventoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tiq.ctx, ent.OpQueryCount)
	if err := tiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tiq, querierCount[*TblInventoryQuery](), tiq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tiq *TblInventoryQuery) CountX(ctx context.Context) int {
	count, err := tiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tiq *TblInventoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tiq.ctx, ent.OpQueryExist)
	switch _, err := tiq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entgen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tiq *TblInventoryQuery) ExistX(ctx context.Context) bool {
	exist, err := tiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TblInventoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tiq *TblInventoryQuery) Clone() *TblInventoryQuery {
	if tiq == nil {
		return nil
	}
	return &TblInventoryQuery{
		config:               tiq.config,
		ctx:                  tiq.ctx.Clone(),
		order:                append([]tblinventory.OrderOption{}, tiq.order...),
		inters:               append([]Interceptor{}, tiq.inters...),
		predicates:           append([]predicate.TblInventory{}, tiq.predicates...),
		withInventory:        tiq.withInventory.Clone(),
		withInventoryCart:    tiq.withInventoryCart.Clone(),
		withInventoryPayment: tiq.withInventoryPayment.Clone(),
		// clone intermediate query.
		sql:  tiq.sql.Clone(),
		path: tiq.path,
	}
}

// WithInventory tells the query-builder to eager-load the nodes that are connected to
// the "inventory" edge. The optional arguments are used to configure the query builder of the edge.
func (tiq *TblInventoryQuery) WithInventory(opts ...func(*TblInventoryTagQuery)) *TblInventoryQuery {
	query := (&TblInventoryTagClient{config: tiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tiq.withInventory = query
	return tiq
}

// WithInventoryCart tells the query-builder to eager-load the nodes that are connected to
// the "InventoryCart" edge. The optional arguments are used to configure the query builder of the edge.
func (tiq *TblInventoryQuery) WithInventoryCart(opts ...func(*TblCartQuery)) *TblInventoryQuery {
	query := (&TblCartClient{config: tiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tiq.withInventoryCart = query
	return tiq
}

// WithInventoryPayment tells the query-builder to eager-load the nodes that are connected to
// the "InventoryPayment" edge. The optional arguments are used to configure the query builder of the edge.
func (tiq *TblInventoryQuery) WithInventoryPayment(opts ...func(*TblPaymentQuery)) *TblInventoryQuery {
	query := (&TblPaymentClient{config: tiq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tiq.withInventoryPayment = query
	return tiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TblInventory.Query().
//		GroupBy(tblinventory.FieldName).
//		Aggregate(entgen.Count()).
//		Scan(ctx, &v)
func (tiq *TblInventoryQuery) GroupBy(field string, fields ...string) *TblInventoryGroupBy {
	tiq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TblInventoryGroupBy{build: tiq}
	grbuild.flds = &tiq.ctx.Fields
	grbuild.label = tblinventory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"Name,omitempty"`
//	}
//
//	client.TblInventory.Query().
//		Select(tblinventory.FieldName).
//		Scan(ctx, &v)
func (tiq *TblInventoryQuery) Select(fields ...string) *TblInventorySelect {
	tiq.ctx.Fields = append(tiq.ctx.Fields, fields...)
	sbuild := &TblInventorySelect{TblInventoryQuery: tiq}
	sbuild.label = tblinventory.Label
	sbuild.flds, sbuild.scan = &tiq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TblInventorySelect configured with the given aggregations.
func (tiq *TblInventoryQuery) Aggregate(fns ...AggregateFunc) *TblInventorySelect {
	return tiq.Select().Aggregate(fns...)
}

func (tiq *TblInventoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tiq.inters {
		if inter == nil {
			return fmt.Errorf("entgen: uninitialized interceptor (forgotten import entgen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tiq); err != nil {
				return err
			}
		}
	}
	for _, f := range tiq.ctx.Fields {
		if !tblinventory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
		}
	}
	if tiq.path != nil {
		prev, err := tiq.path(ctx)
		if err != nil {
			return err
		}
		tiq.sql = prev
	}
	return nil
}

func (tiq *TblInventoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TblInventory, error) {
	var (
		nodes       = []*TblInventory{}
		_spec       = tiq.querySpec()
		loadedTypes = [3]bool{
			tiq.withInventory != nil,
			tiq.withInventoryCart != nil,
			tiq.withInventoryPayment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TblInventory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TblInventory{config: tiq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(tiq.modifiers) > 0 {
		_spec.Modifiers = tiq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tiq.withInventory; query != nil {
		if err := tiq.loadInventory(ctx, query, nodes,
			func(n *TblInventory) { n.Edges.Inventory = []*TblInventoryTag{} },
			func(n *TblInventory, e *TblInventoryTag) { n.Edges.Inventory = append(n.Edges.Inventory, e) }); err != nil {
			return nil, err
		}
	}
	if query := tiq.withInventoryCart; query != nil {
		if err := tiq.loadInventoryCart(ctx, query, nodes,
			func(n *TblInventory) { n.Edges.InventoryCart = []*TblCart{} },
			func(n *TblInventory, e *TblCart) { n.Edges.InventoryCart = append(n.Edges.InventoryCart, e) }); err != nil {
			return nil, err
		}
	}
	if query := tiq.withInventoryPayment; query != nil {
		if err := tiq.loadInventoryPayment(ctx, query, nodes,
			func(n *TblInventory) { n.Edges.InventoryPayment = []*TblPayment{} },
			func(n *TblInventory, e *TblPayment) { n.Edges.InventoryPayment = append(n.Edges.InventoryPayment, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tiq *TblInventoryQuery) loadInventory(ctx context.Context, query *TblInventoryTagQuery, nodes []*TblInventory, init func(*TblInventory), assign func(*TblInventory, *TblInventoryTag)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblInventory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.TblInventoryTag(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tblinventory.InventoryColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.tbl_inventory_inventory
		if fk == nil {
			return fmt.Errorf(`foreign-key "tbl_inventory_inventory" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "tbl_inventory_inventory" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tiq *TblInventoryQuery) loadInventoryCart(ctx context.Context, query *TblCartQuery, nodes []*TblInventory, init func(*TblInventory), assign func(*TblInventory, *TblCart)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblInventory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tblcart.FieldProductId)
	}
	query.Where(predicate.TblCart(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tblinventory.InventoryCartColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ProductId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tiq *TblInventoryQuery) loadInventoryPayment(ctx context.Context, query *TblPaymentQuery, nodes []*TblInventory, init func(*TblInventory), assign func(*TblInventory, *TblPayment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TblInventory)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tblpayment.FieldInventoryId)
	}
	query.Where(predicate.TblPayment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(tblinventory.InventoryPaymentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.InventoryId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "InventoryId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (tiq *TblInventoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tiq.querySpec()
	if len(tiq.modifiers) > 0 {
		_spec.Modifiers = tiq.modifiers
	}
	_spec.Node.Columns = tiq.ctx.Fields
	if len(tiq.ctx.Fields) > 0 {
		_spec.Unique = tiq.ctx.Unique != nil && *tiq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tiq.driver, _spec)
}

func (tiq *TblInventoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(tblinventory.Table, tblinventory.Columns, sqlgraph.NewFieldSpec(tblinventory.FieldID, field.TypeString))
	_spec.From = tiq.sql
	if unique := tiq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tiq.path != nil {
		_spec.Unique = true
	}
	if fields := tiq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tblinventory.FieldID)
		for i := range fields {
			if fields[i] != tblinventory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tiq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tiq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tiq *TblInventoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tiq.driver.Dialect())
	t1 := builder.Table(tblinventory.Table)
	columns := tiq.ctx.Fields
	if len(columns) == 0 {
		columns = tblinventory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tiq.sql != nil {
		selector = tiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tiq.ctx.Unique != nil && *tiq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range tiq.modifiers {
		m(selector)
	}
	for _, p := range tiq.predicates {
		p(selector)
	}
	for _, p := range tiq.order {
		p(selector)
	}
	if offset := tiq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tiq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (tiq *TblInventoryQuery) ForUpdate(opts ...sql.LockOption) *TblInventoryQuery {
	if tiq.driver.Dialect() == dialect.Postgres {
		tiq.Unique(false)
	}
	tiq.modifiers = append(tiq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return tiq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (tiq *TblInventoryQuery) ForShare(opts ...sql.LockOption) *TblInventoryQuery {
	if tiq.driver.Dialect() == dialect.Postgres {
		tiq.Unique(false)
	}
	tiq.modifiers = append(tiq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return tiq
}

// TblInventoryGroupBy is the group-by builder for TblInventory entities.
type TblInventoryGroupBy struct {
	selector
	build *TblInventoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tigb *TblInventoryGroupBy) Aggregate(fns ...AggregateFunc) *TblInventoryGroupBy {
	tigb.fns = append(tigb.fns, fns...)
	return tigb
}

// Scan applies the selector query and scans the result into the given value.
func (tigb *TblInventoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tigb.build.ctx, ent.OpQueryGroupBy)
	if err := tigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblInventoryQuery, *TblInventoryGroupBy](ctx, tigb.build, tigb, tigb.build.inters, v)
}

func (tigb *TblInventoryGroupBy) sqlScan(ctx context.Context, root *TblInventoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tigb.fns))
	for _, fn := range tigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tigb.flds)+len(tigb.fns))
		for _, f := range *tigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TblInventorySelect is the builder for selecting fields of TblInventory entities.
type TblInventorySelect struct {
	*TblInventoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tis *TblInventorySelect) Aggregate(fns ...AggregateFunc) *TblInventorySelect {
	tis.fns = append(tis.fns, fns...)
	return tis
}

// Scan applies the selector query and scans the result into the given value.
func (tis *TblInventorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tis.ctx, ent.OpQuerySelect)
	if err := tis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TblInventoryQuery, *TblInventorySelect](ctx, tis.TblInventoryQuery, tis, tis.inters, v)
}

func (tis *TblInventorySelect) sqlScan(ctx context.Context, root *TblInventoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tis.fns))
	for _, fn := range tis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
