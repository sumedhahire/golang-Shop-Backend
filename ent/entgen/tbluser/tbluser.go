// Code generated by ent, DO NOT EDIT.

package tbluser

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tbluser type in the database.
	Label = "tbl_user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id_uuid"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldIsActive holds the string denoting the is_active field in the database.
	FieldIsActive = "is_active"
	// FieldZipCode holds the string denoting the zip_code field in the database.
	FieldZipCode = "zip_code"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldIPAddress holds the string denoting the ip_address field in the database.
	FieldIPAddress = "ip_address"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeUserToken holds the string denoting the usertoken edge name in mutations.
	EdgeUserToken = "UserToken"
	// EdgeUserCart holds the string denoting the usercart edge name in mutations.
	EdgeUserCart = "UserCart"
	// EdgeUserPayment holds the string denoting the userpayment edge name in mutations.
	EdgeUserPayment = "UserPayment"
	// TblCartFieldID holds the string denoting the ID field of the TblCart.
	TblCartFieldID = "Id_uuid"
	// TblPaymentFieldID holds the string denoting the ID field of the TblPayment.
	TblPaymentFieldID = "Id_uuid"
	// Table holds the table name of the tbluser in the database.
	Table = "tbl_users"
	// UserTokenTable is the table that holds the UserToken relation/edge.
	UserTokenTable = "authtoken"
	// UserTokenInverseTable is the table name for the TblAuthToken entity.
	// It exists in this package in order to avoid circular dependency with the "tblauthtoken" package.
	UserTokenInverseTable = "authtoken"
	// UserTokenColumn is the table column denoting the UserToken relation/edge.
	UserTokenColumn = "user_ulid"
	// UserCartTable is the table that holds the UserCart relation/edge.
	UserCartTable = "Tbl_Cart"
	// UserCartInverseTable is the table name for the TblCart entity.
	// It exists in this package in order to avoid circular dependency with the "tblcart" package.
	UserCartInverseTable = "Tbl_Cart"
	// UserCartColumn is the table column denoting the UserCart relation/edge.
	UserCartColumn = "UserId"
	// UserPaymentTable is the table that holds the UserPayment relation/edge.
	UserPaymentTable = "Tbl_Payment"
	// UserPaymentInverseTable is the table name for the TblPayment entity.
	// It exists in this package in order to avoid circular dependency with the "tblpayment" package.
	UserPaymentInverseTable = "Tbl_Payment"
	// UserPaymentColumn is the table column denoting the UserPayment relation/edge.
	UserPaymentColumn = "UserId"
)

// Columns holds all SQL columns for tbluser fields.
var Columns = []string{
	FieldID,
	FieldFirstname,
	FieldLastname,
	FieldEmail,
	FieldBirthDate,
	FieldPassword,
	FieldIsActive,
	FieldZipCode,
	FieldAddress,
	FieldIPAddress,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldRole,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FirstnameValidator is a validator for the "firstname" field. It is called by the builders before save.
	FirstnameValidator func(string) error
	// LastnameValidator is a validator for the "lastname" field. It is called by the builders before save.
	LastnameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultIsActive holds the default value on creation for the "is_active" field.
	DefaultIsActive int
	// IPAddressValidator is a validator for the "ip_address" field. It is called by the builders before save.
	IPAddressValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Role defines the type for the "role" enum field.
type Role string

// RoleUser is the default value of the Role enum.
const DefaultRole = RoleUser

// Role values.
const (
	RoleUser  Role = "user"
	RoleAdmin Role = "admin"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleUser, RoleAdmin:
		return nil
	default:
		return fmt.Errorf("tbluser: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the TblUser queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFirstname orders the results by the firstname field.
func ByFirstname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstname, opts...).ToFunc()
}

// ByLastname orders the results by the lastname field.
func ByLastname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastname, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByIsActive orders the results by the is_active field.
func ByIsActive(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsActive, opts...).ToFunc()
}

// ByZipCode orders the results by the zip_code field.
func ByZipCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldZipCode, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByIPAddress orders the results by the ip_address field.
func ByIPAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIPAddress, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByUserTokenCount orders the results by UserToken count.
func ByUserTokenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserTokenStep(), opts...)
	}
}

// ByUserToken orders the results by UserToken terms.
func ByUserToken(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserTokenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCartCount orders the results by UserCart count.
func ByUserCartCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserCartStep(), opts...)
	}
}

// ByUserCart orders the results by UserCart terms.
func ByUserCart(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserCartStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserPaymentCount orders the results by UserPayment count.
func ByUserPaymentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserPaymentStep(), opts...)
	}
}

// ByUserPayment orders the results by UserPayment terms.
func ByUserPayment(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserPaymentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserTokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserTokenTable, UserTokenColumn),
	)
}
func newUserCartStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserCartInverseTable, TblCartFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserCartTable, UserCartColumn),
	)
}
func newUserPaymentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserPaymentInverseTable, TblPaymentFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, UserPaymentTable, UserPaymentColumn),
	)
}
