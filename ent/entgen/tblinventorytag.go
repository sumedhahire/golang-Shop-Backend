// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblinventorytag"
	"inventory/ent/entgen/tbltag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblInventoryTag is the model entity for the TblInventoryTag schema.
type TblInventoryTag struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// InventoryId holds the value of the "InventoryId" field.
	InventoryId string `json:"InventoryId,omitempty"`
	// TagId holds the value of the "TagId" field.
	TagId string `json:"TagId,omitempty"`
	// CreatedAt holds the value of the "Created_at" field.
	CreatedAt time.Time `json:"Created_at,omitempty"`
	// UpdatedAt holds the value of the "Updated_at" field.
	UpdatedAt time.Time `json:"Updated_at,omitempty"`
	// DeletedAt holds the value of the "Deleted_at" field.
	DeletedAt *time.Time `json:"Deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblInventoryTagQuery when eager-loading is set.
	Edges        TblInventoryTagEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblInventoryTagEdges holds the relations/edges for other nodes in the graph.
type TblInventoryTagEdges struct {
	// Inventory holds the value of the inventory edge.
	Inventory *TblInventory `json:"inventory,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *TblTag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InventoryOrErr returns the Inventory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblInventoryTagEdges) InventoryOrErr() (*TblInventory, error) {
	if e.Inventory != nil {
		return e.Inventory, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tblinventory.Label}
	}
	return nil, &NotLoadedError{edge: "inventory"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblInventoryTagEdges) TagOrErr() (*TblTag, error) {
	if e.Tag != nil {
		return e.Tag, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tbltag.Label}
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblInventoryTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tblinventorytag.FieldID, tblinventorytag.FieldInventoryId, tblinventorytag.FieldTagId:
			values[i] = new(sql.NullString)
		case tblinventorytag.FieldCreatedAt, tblinventorytag.FieldUpdatedAt, tblinventorytag.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblInventoryTag fields.
func (tit *TblInventoryTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tblinventorytag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tit.ID = value.String
			}
		case tblinventorytag.FieldInventoryId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field InventoryId", values[i])
			} else if value.Valid {
				tit.InventoryId = value.String
			}
		case tblinventorytag.FieldTagId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field TagId", values[i])
			} else if value.Valid {
				tit.TagId = value.String
			}
		case tblinventorytag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Created_at", values[i])
			} else if value.Valid {
				tit.CreatedAt = value.Time
			}
		case tblinventorytag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Updated_at", values[i])
			} else if value.Valid {
				tit.UpdatedAt = value.Time
			}
		case tblinventorytag.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Deleted_at", values[i])
			} else if value.Valid {
				tit.DeletedAt = new(time.Time)
				*tit.DeletedAt = value.Time
			}
		default:
			tit.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblInventoryTag.
// This includes values selected through modifiers, order, etc.
func (tit *TblInventoryTag) Value(name string) (ent.Value, error) {
	return tit.selectValues.Get(name)
}

// QueryInventory queries the "inventory" edge of the TblInventoryTag entity.
func (tit *TblInventoryTag) QueryInventory() *TblInventoryQuery {
	return NewTblInventoryTagClient(tit.config).QueryInventory(tit)
}

// QueryTag queries the "tag" edge of the TblInventoryTag entity.
func (tit *TblInventoryTag) QueryTag() *TblTagQuery {
	return NewTblInventoryTagClient(tit.config).QueryTag(tit)
}

// Update returns a builder for updating this TblInventoryTag.
// Note that you need to call TblInventoryTag.Unwrap() before calling this method if this TblInventoryTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (tit *TblInventoryTag) Update() *TblInventoryTagUpdateOne {
	return NewTblInventoryTagClient(tit.config).UpdateOne(tit)
}

// Unwrap unwraps the TblInventoryTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tit *TblInventoryTag) Unwrap() *TblInventoryTag {
	_tx, ok := tit.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblInventoryTag is not a transactional entity")
	}
	tit.config.driver = _tx.drv
	return tit
}

// String implements the fmt.Stringer.
func (tit *TblInventoryTag) String() string {
	var builder strings.Builder
	builder.WriteString("TblInventoryTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tit.ID))
	builder.WriteString("InventoryId=")
	builder.WriteString(tit.InventoryId)
	builder.WriteString(", ")
	builder.WriteString("TagId=")
	builder.WriteString(tit.TagId)
	builder.WriteString(", ")
	builder.WriteString("Created_at=")
	builder.WriteString(tit.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Updated_at=")
	builder.WriteString(tit.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tit.DeletedAt; v != nil {
		builder.WriteString("Deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TblInventoryTags is a parsable slice of TblInventoryTag.
type TblInventoryTags []*TblInventoryTag
