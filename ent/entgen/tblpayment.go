// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"inventory/ent/entgen/tblinventory"
	"inventory/ent/entgen/tblpayment"
	"inventory/ent/entgen/tbluser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TblPayment is the model entity for the TblPayment schema.
type TblPayment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// InventoryId holds the value of the "InventoryId" field.
	InventoryId string `json:"InventoryId,omitempty"`
	// UserId holds the value of the "UserId" field.
	UserId string `json:"UserId,omitempty"`
	// Status holds the value of the "Status" field.
	Status string `json:"Status,omitempty"`
	// RazorpayOrderId holds the value of the "RazorpayOrderId" field.
	RazorpayOrderId string `json:"RazorpayOrderId,omitempty"`
	// Amount holds the value of the "Amount" field.
	Amount float32 `json:"Amount,omitempty"`
	// CreatedAt holds the value of the "Created_at" field.
	CreatedAt time.Time `json:"Created_at,omitempty"`
	// UpdatedAt holds the value of the "Updated_at" field.
	UpdatedAt time.Time `json:"Updated_at,omitempty"`
	// DeletedAt holds the value of the "Deleted_at" field.
	DeletedAt *time.Time `json:"Deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TblPaymentQuery when eager-loading is set.
	Edges        TblPaymentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TblPaymentEdges holds the relations/edges for other nodes in the graph.
type TblPaymentEdges struct {
	// Inventory holds the value of the Inventory edge.
	Inventory *TblInventory `json:"Inventory,omitempty"`
	// User holds the value of the User edge.
	User *TblUser `json:"User,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// InventoryOrErr returns the Inventory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblPaymentEdges) InventoryOrErr() (*TblInventory, error) {
	if e.Inventory != nil {
		return e.Inventory, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tblinventory.Label}
	}
	return nil, &NotLoadedError{edge: "Inventory"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TblPaymentEdges) UserOrErr() (*TblUser, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: tbluser.Label}
	}
	return nil, &NotLoadedError{edge: "User"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TblPayment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tblpayment.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case tblpayment.FieldID, tblpayment.FieldInventoryId, tblpayment.FieldUserId, tblpayment.FieldStatus, tblpayment.FieldRazorpayOrderId:
			values[i] = new(sql.NullString)
		case tblpayment.FieldCreatedAt, tblpayment.FieldUpdatedAt, tblpayment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TblPayment fields.
func (tp *TblPayment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tblpayment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tp.ID = value.String
			}
		case tblpayment.FieldInventoryId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field InventoryId", values[i])
			} else if value.Valid {
				tp.InventoryId = value.String
			}
		case tblpayment.FieldUserId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field UserId", values[i])
			} else if value.Valid {
				tp.UserId = value.String
			}
		case tblpayment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Status", values[i])
			} else if value.Valid {
				tp.Status = value.String
			}
		case tblpayment.FieldRazorpayOrderId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field RazorpayOrderId", values[i])
			} else if value.Valid {
				tp.RazorpayOrderId = value.String
			}
		case tblpayment.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field Amount", values[i])
			} else if value.Valid {
				tp.Amount = float32(value.Float64)
			}
		case tblpayment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Created_at", values[i])
			} else if value.Valid {
				tp.CreatedAt = value.Time
			}
		case tblpayment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Updated_at", values[i])
			} else if value.Valid {
				tp.UpdatedAt = value.Time
			}
		case tblpayment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field Deleted_at", values[i])
			} else if value.Valid {
				tp.DeletedAt = new(time.Time)
				*tp.DeletedAt = value.Time
			}
		default:
			tp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TblPayment.
// This includes values selected through modifiers, order, etc.
func (tp *TblPayment) Value(name string) (ent.Value, error) {
	return tp.selectValues.Get(name)
}

// QueryInventory queries the "Inventory" edge of the TblPayment entity.
func (tp *TblPayment) QueryInventory() *TblInventoryQuery {
	return NewTblPaymentClient(tp.config).QueryInventory(tp)
}

// QueryUser queries the "User" edge of the TblPayment entity.
func (tp *TblPayment) QueryUser() *TblUserQuery {
	return NewTblPaymentClient(tp.config).QueryUser(tp)
}

// Update returns a builder for updating this TblPayment.
// Note that you need to call TblPayment.Unwrap() before calling this method if this TblPayment
// was returned from a transaction, and the transaction was committed or rolled back.
func (tp *TblPayment) Update() *TblPaymentUpdateOne {
	return NewTblPaymentClient(tp.config).UpdateOne(tp)
}

// Unwrap unwraps the TblPayment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tp *TblPayment) Unwrap() *TblPayment {
	_tx, ok := tp.config.driver.(*txDriver)
	if !ok {
		panic("entgen: TblPayment is not a transactional entity")
	}
	tp.config.driver = _tx.drv
	return tp
}

// String implements the fmt.Stringer.
func (tp *TblPayment) String() string {
	var builder strings.Builder
	builder.WriteString("TblPayment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tp.ID))
	builder.WriteString("InventoryId=")
	builder.WriteString(tp.InventoryId)
	builder.WriteString(", ")
	builder.WriteString("UserId=")
	builder.WriteString(tp.UserId)
	builder.WriteString(", ")
	builder.WriteString("Status=")
	builder.WriteString(tp.Status)
	builder.WriteString(", ")
	builder.WriteString("RazorpayOrderId=")
	builder.WriteString(tp.RazorpayOrderId)
	builder.WriteString(", ")
	builder.WriteString("Amount=")
	builder.WriteString(fmt.Sprintf("%v", tp.Amount))
	builder.WriteString(", ")
	builder.WriteString("Created_at=")
	builder.WriteString(tp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("Updated_at=")
	builder.WriteString(tp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := tp.DeletedAt; v != nil {
		builder.WriteString("Deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// TblPayments is a parsable slice of TblPayment.
type TblPayments []*TblPayment
