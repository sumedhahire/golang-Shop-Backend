// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"inventory/ent/entgen/predicate"
	"inventory/ent/entgen/tblauthtoken"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TblAuthTokenDelete is the builder for deleting a TblAuthToken entity.
type TblAuthTokenDelete struct {
	config
	hooks    []Hook
	mutation *TblAuthTokenMutation
}

// Where appends a list predicates to the TblAuthTokenDelete builder.
func (tatd *TblAuthTokenDelete) Where(ps ...predicate.TblAuthToken) *TblAuthTokenDelete {
	tatd.mutation.Where(ps...)
	return tatd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tatd *TblAuthTokenDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tatd.sqlExec, tatd.mutation, tatd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tatd *TblAuthTokenDelete) ExecX(ctx context.Context) int {
	n, err := tatd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tatd *TblAuthTokenDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(tblauthtoken.Table, sqlgraph.NewFieldSpec(tblauthtoken.FieldID, field.TypeString))
	if ps := tatd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tatd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tatd.mutation.done = true
	return affected, err
}

// TblAuthTokenDeleteOne is the builder for deleting a single TblAuthToken entity.
type TblAuthTokenDeleteOne struct {
	tatd *TblAuthTokenDelete
}

// Where appends a list predicates to the TblAuthTokenDelete builder.
func (tatdo *TblAuthTokenDeleteOne) Where(ps ...predicate.TblAuthToken) *TblAuthTokenDeleteOne {
	tatdo.tatd.mutation.Where(ps...)
	return tatdo
}

// Exec executes the deletion query.
func (tatdo *TblAuthTokenDeleteOne) Exec(ctx context.Context) error {
	n, err := tatdo.tatd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{tblauthtoken.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tatdo *TblAuthTokenDeleteOne) ExecX(ctx context.Context) {
	if err := tatdo.Exec(ctx); err != nil {
		panic(err)
	}
}
